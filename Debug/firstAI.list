
firstAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c814  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c40  0800c9e0  0800c9e0  0001c9e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d620  0800d620  000207cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d620  0800d620  0001d620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d628  0800d628  000207cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d628  0800d628  0001d628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d62c  0800d62c  0001d62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007cc  20000000  0800d630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  200007cc  0800ddfc  000207cc  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20000dac  0800ddfc  00020dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000207cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024cd1  00000000  00000000  000207fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399f  00000000  00000000  000454cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b80  00000000  00000000  00048e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a08  00000000  00000000  0004a9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000317f0  00000000  00000000  0004c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002044b  00000000  00000000  0007dbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001340d9  00000000  00000000  0009e033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001d210c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a5c  00000000  00000000  001d21dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200007cc 	.word	0x200007cc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c9bc 	.word	0x0800c9bc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200007d0 	.word	0x200007d0
 80001fc:	0800c9bc 	.word	0x0800c9bc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b0de      	sub	sp, #376	; 0x178
 8000f74:	af06      	add	r7, sp, #24
	/* USER CODE BEGIN 1 */
	char buf[80];
	int buf_len = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	ai_error ai_err;
	ai_i32 nbatch;
	uint32_t timestamp;
	float y_val;
	float x_val;
	bool bSerialPlot = true;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
	float x_input = 2.0f;
 8000f82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f86:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle sine_model = AI_HANDLE_NULL;
 8000f8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000f92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f96:	4ac6      	ldr	r2, [pc, #792]	; (80012b0 <main+0x340>)
 8000f98:	461c      	mov	r4, r3
 8000f9a:	4615      	mov	r5, r2
 8000f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fa4:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fac:	4ac0      	ldr	r2, [pc, #768]	; (80012b0 <main+0x340>)
 8000fae:	461c      	mov	r4, r3
 8000fb0:	4615      	mov	r5, r2
 8000fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fba:	e884 0003 	stmia.w	r4, {r0, r1}

	// Set working memory and get weights/biases from model
	ai_network_params ai_params = { AI_SINE_MODEL_DATA_WEIGHTS(
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4abc      	ldr	r2, [pc, #752]	; (80012b4 <main+0x344>)
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	809a      	strh	r2, [r3, #4]
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2201      	movs	r2, #1
 8000fce:	80da      	strh	r2, [r3, #6]
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	811a      	strh	r2, [r3, #8]
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	f240 5204 	movw	r2, #1284	; 0x504
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	f006 fc75 	bl	80078cc <ai_sine_model_data_weights_get>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4ab1      	ldr	r2, [pc, #708]	; (80012b8 <main+0x348>)
 8000ff2:	619a      	str	r2, [r3, #24]
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	839a      	strh	r2, [r3, #28]
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	83da      	strh	r2, [r3, #30]
 8001000:	463b      	mov	r3, r7
 8001002:	2201      	movs	r2, #1
 8001004:	841a      	strh	r2, [r3, #32]
 8001006:	463b      	mov	r3, r7
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
 800100c:	463b      	mov	r3, r7
 800100e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
 8001014:	463b      	mov	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
			ai_sine_model_data_weights_get()), AI_SINE_MODEL_DATA_ACTIVATIONS(
			activations) };

	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 800101a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800101e:	2201      	movs	r2, #1
 8001020:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001022:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001026:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800102a:	611a      	str	r2, [r3, #16]
	ai_output[0].n_batches = 1;
 800102c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001030:	2201      	movs	r2, #1
 8001032:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001038:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800103c:	611a      	str	r2, [r3, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800103e:	f001 fba4 	bl	800278a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001042:	f000 f94b 	bl	80012dc <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001046:	f000 f9ab 	bl	80013a0 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800104a:	f000 fd49 	bl	8001ae0 <MX_GPIO_Init>
	MX_ADC1_Init();
 800104e:	f000 f9d7 	bl	8001400 <MX_ADC1_Init>
	MX_DFSDM1_Init();
 8001052:	f000 fa5b 	bl	800150c <MX_DFSDM1_Init>
	MX_I2C1_Init();
 8001056:	f000 fa91 	bl	800157c <MX_I2C1_Init>
	MX_I2C2_Init();
 800105a:	f000 facf 	bl	80015fc <MX_I2C2_Init>
	MX_OCTOSPI1_Init();
 800105e:	f000 fb0d 	bl	800167c <MX_OCTOSPI1_Init>
	MX_SPI1_Init();
 8001062:	f000 fb61 	bl	8001728 <MX_SPI1_Init>
	MX_SPI3_Init();
 8001066:	f000 fb9d 	bl	80017a4 <MX_SPI3_Init>
	MX_UART4_Init();
 800106a:	f000 fbff 	bl	800186c <MX_UART4_Init>
	MX_USART1_UART_Init();
 800106e:	f000 fc49 	bl	8001904 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001072:	f000 fc93 	bl	800199c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001076:	f000 fcdf 	bl	8001a38 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_USB_Init();
 800107a:	f000 fd29 	bl	8001ad0 <MX_USB_OTG_FS_USB_Init>
	MX_CRC_Init();
 800107e:	f000 fa23 	bl	80014c8 <MX_CRC_Init>
	MX_TIM16_Init();
 8001082:	f000 fbcd 	bl	8001820 <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim16);
 8001086:	488d      	ldr	r0, [pc, #564]	; (80012bc <main+0x34c>)
 8001088:	f005 fb98 	bl	80067bc <HAL_TIM_Base_Start>

	// Greetings!
	buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 800108c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001090:	498b      	ldr	r1, [pc, #556]	; (80012c0 <main+0x350>)
 8001092:	4618      	mov	r0, r3
 8001094:	f008 fb02 	bl	800969c <siprintf>
 8001098:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, buf_len, 100);
 800109c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	4886      	ldr	r0, [pc, #536]	; (80012c4 <main+0x354>)
 80010aa:	f005 fcd9 	bl	8006a60 <HAL_UART_Transmit>

	// Create instance of neural network
	ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 80010ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f006 fba3 	bl	8007800 <ai_sine_model_create>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if (ai_err.type != AI_ERROR_NONE) {
 80010c0:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d011      	beq.n	80010ec <main+0x17c>
		buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80010c8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80010cc:	497e      	ldr	r1, [pc, #504]	; (80012c8 <main+0x358>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 fae4 	bl	800969c <siprintf>
 80010d4:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
		HAL_UART_Transmit(&huart1, (uint8_t*) buf, buf_len, 100);
 80010d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80010dc:	b29a      	uxth	r2, r3
 80010de:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	4877      	ldr	r0, [pc, #476]	; (80012c4 <main+0x354>)
 80010e6:	f005 fcbb 	bl	8006a60 <HAL_UART_Transmit>
		while (1)
 80010ea:	e7fe      	b.n	80010ea <main+0x17a>
			;
	}

	// Initialize neural network
	if (!ai_sine_model_init(sine_model, &ai_params)) {
 80010ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	463a      	mov	r2, r7
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 fb98 	bl	800782c <ai_sine_model_init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f083 0301 	eor.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d011      	beq.n	800112c <main+0x1bc>
		buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001108:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800110c:	496f      	ldr	r1, [pc, #444]	; (80012cc <main+0x35c>)
 800110e:	4618      	mov	r0, r3
 8001110:	f008 fac4 	bl	800969c <siprintf>
 8001114:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
		HAL_UART_Transmit(&huart1, (uint8_t*) buf, buf_len, 100);
 8001118:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001122:	2364      	movs	r3, #100	; 0x64
 8001124:	4867      	ldr	r0, [pc, #412]	; (80012c4 <main+0x354>)
 8001126:	f005 fc9b 	bl	8006a60 <HAL_UART_Transmit>
		while (1)
 800112a:	e7fe      	b.n	800112a <main+0x1ba>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Fill input buffer (use test value)
		for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++) {
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001132:	e02f      	b.n	8001194 <main+0x224>
			((ai_float*) in_data)[i] = (ai_float) x_input;
 8001134:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800113e:	4413      	add	r3, r2
 8001140:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001144:	601a      	str	r2, [r3, #0]
			x_input += 0.1;
 8001146:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 800114a:	f7ff fa15 	bl	8000578 <__aeabi_f2d>
 800114e:	a354      	add	r3, pc, #336	; (adr r3, 80012a0 <main+0x330>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff f8b2 	bl	80002bc <__adddf3>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd3a 	bl	8000bd8 <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
			if (x_input > 2.0*M_PI) {
 800116a:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 800116e:	f7ff fa03 	bl	8000578 <__aeabi_f2d>
 8001172:	a34d      	add	r3, pc, #308	; (adr r3, 80012a8 <main+0x338>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff fce6 	bl	8000b48 <__aeabi_dcmpgt>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <main+0x21a>
				x_input = 0;
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++) {
 800118a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800118e:	3301      	adds	r3, #1
 8001190:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001194:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0cb      	beq.n	8001134 <main+0x1c4>
			}
		}

		// Get current timestamp
		timestamp = htim16.Instance->CNT;
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <main+0x34c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

		// Perform inference
		nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 80011a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011b0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80011b4:	4618      	mov	r0, r3
 80011b6:	f006 fb78 	bl	80078aa <ai_sine_model_run>
 80011ba:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
		if (nbatch != 1) {
 80011be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d010      	beq.n	80011e8 <main+0x278>
			buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80011c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011ca:	4941      	ldr	r1, [pc, #260]	; (80012d0 <main+0x360>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f008 fa65 	bl	800969c <siprintf>
 80011d2:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
			HAL_UART_Transmit(&huart1, (uint8_t*) buf, buf_len, 100);
 80011d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011da:	b29a      	uxth	r2, r3
 80011dc:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80011e0:	2364      	movs	r3, #100	; 0x64
 80011e2:	4838      	ldr	r0, [pc, #224]	; (80012c4 <main+0x354>)
 80011e4:	f005 fc3c 	bl	8006a60 <HAL_UART_Transmit>
		}

		// Read output (predicted y) of neural network
		y_val = ((float*) out_data)[0];
 80011e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		x_val = ((float*) in_data)[0];
 80011f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

		// Print output of neural network along with inference time (microseconds)
		if (!bSerialPlot) {
 80011fc:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8001200:	f083 0301 	eor.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d01f      	beq.n	800124a <main+0x2da>
			buf_len = snprintf(buf, sizeof(buf), "Input: %f | Output: %f | Duration: %lu\r\n",
 800120a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800120e:	f7ff f9b3 	bl	8000578 <__aeabi_f2d>
 8001212:	4604      	mov	r4, r0
 8001214:	460d      	mov	r5, r1
 8001216:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800121a:	f7ff f9ad 	bl	8000578 <__aeabi_f2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
					x_val, y_val, htim16.Instance->CNT - timestamp);
 8001222:	4926      	ldr	r1, [pc, #152]	; (80012bc <main+0x34c>)
 8001224:	6809      	ldr	r1, [r1, #0]
 8001226:	6a48      	ldr	r0, [r1, #36]	; 0x24
			buf_len = snprintf(buf, sizeof(buf), "Input: %f | Output: %f | Duration: %lu\r\n",
 8001228:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800122c:	1a41      	subs	r1, r0, r1
 800122e:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8001232:	9104      	str	r1, [sp, #16]
 8001234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001238:	e9cd 4500 	strd	r4, r5, [sp]
 800123c:	4a25      	ldr	r2, [pc, #148]	; (80012d4 <main+0x364>)
 800123e:	2150      	movs	r1, #80	; 0x50
 8001240:	f008 f9f8 	bl	8009634 <sniprintf>
 8001244:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
 8001248:	e020      	b.n	800128c <main+0x31c>
		} else {

			buf_len = snprintf(buf, sizeof(buf), "#%f,%f\r\n", y_val, sin(x_input));
 800124a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800124e:	f7ff f993 	bl	8000578 <__aeabi_f2d>
 8001252:	4604      	mov	r4, r0
 8001254:	460d      	mov	r5, r1
 8001256:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 800125a:	f7ff f98d 	bl	8000578 <__aeabi_f2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	ec43 2b10 	vmov	d0, r2, r3
 8001266:	f00a fb73 	bl	800b950 <sin>
 800126a:	eeb0 7a40 	vmov.f32	s14, s0
 800126e:	eef0 7a60 	vmov.f32	s15, s1
 8001272:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001276:	ed8d 7b02 	vstr	d7, [sp, #8]
 800127a:	e9cd 4500 	strd	r4, r5, [sp]
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <main+0x368>)
 8001280:	2150      	movs	r1, #80	; 0x50
 8001282:	4618      	mov	r0, r3
 8001284:	f008 f9d6 	bl	8009634 <sniprintf>
 8001288:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
		}

		HAL_UART_Transmit(&huart1, (uint8_t*) buf, buf_len, 100);
 800128c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001290:	b29a      	uxth	r2, r3
 8001292:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001296:	2364      	movs	r3, #100	; 0x64
 8001298:	480a      	ldr	r0, [pc, #40]	; (80012c4 <main+0x354>)
 800129a:	f005 fbe1 	bl	8006a60 <HAL_UART_Transmit>
		for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++) {
 800129e:	e745      	b.n	800112c <main+0x1bc>
 80012a0:	9999999a 	.word	0x9999999a
 80012a4:	3fb99999 	.word	0x3fb99999
 80012a8:	54442d18 	.word	0x54442d18
 80012ac:	401921fb 	.word	0x401921fb
 80012b0:	0800caa4 	.word	0x0800caa4
 80012b4:	40040440 	.word	0x40040440
 80012b8:	00040440 	.word	0x00040440
 80012bc:	20000d14 	.word	0x20000d14
 80012c0:	0800c9e0 	.word	0x0800c9e0
 80012c4:	20000b00 	.word	0x20000b00
 80012c8:	0800c9fc 	.word	0x0800c9fc
 80012cc:	0800ca24 	.word	0x0800ca24
 80012d0:	0800ca48 	.word	0x0800ca48
 80012d4:	0800ca6c 	.word	0x0800ca6c
 80012d8:	0800ca98 	.word	0x0800ca98

080012dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b096      	sub	sp, #88	; 0x58
 80012e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	2244      	movs	r2, #68	; 0x44
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f007 fc76 	bl	8008bdc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012fe:	2000      	movs	r0, #0
 8001300:	f003 fcbe 	bl	8004c80 <HAL_PWREx_ControlVoltageScaling>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x32>
			!= HAL_OK) {
		Error_Handler();
 800130a:	f000 fd2b 	bl	8001d64 <Error_Handler>
	}
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800130e:	f003 fc87 	bl	8004c20 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <SystemClock_Config+0xc0>)
 8001314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001318:	4a20      	ldr	r2, [pc, #128]	; (800139c <SystemClock_Config+0xc0>)
 800131a:	f023 0318 	bic.w	r3, r3, #24
 800131e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8001322:	2314      	movs	r3, #20
 8001324:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001326:	2301      	movs	r3, #1
 8001328:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800132a:	2301      	movs	r3, #1
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001332:	2360      	movs	r3, #96	; 0x60
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001336:	2302      	movs	r3, #2
 8001338:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800133a:	2301      	movs	r3, #1
 800133c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800133e:	2301      	movs	r3, #1
 8001340:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 60;
 8001342:	233c      	movs	r3, #60	; 0x3c
 8001344:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001346:	2302      	movs	r3, #2
 8001348:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800134a:	2302      	movs	r3, #2
 800134c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800134e:	2302      	movs	r3, #2
 8001350:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fd36 	bl	8004dc8 <HAL_RCC_OscConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x8a>
		Error_Handler();
 8001362:	f000 fcff 	bl	8001d64 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001366:	230f      	movs	r3, #15
 8001368:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136a:	2303      	movs	r3, #3
 800136c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800137a:	463b      	mov	r3, r7
 800137c:	2105      	movs	r1, #5
 800137e:	4618      	mov	r0, r3
 8001380:	f004 f948 	bl	8005614 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0xb2>
		Error_Handler();
 800138a:	f000 fceb 	bl	8001d64 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 800138e:	f004 ff23 	bl	80061d8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001392:	bf00      	nop
 8001394:	3758      	adds	r7, #88	; 0x58
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000

080013a0 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b0a6      	sub	sp, #152	; 0x98
 80013a4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2294      	movs	r2, #148	; 0x94
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f007 fc15 	bl	8008bdc <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC;
 80013b2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013b6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013c4:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013c6:	2301      	movs	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013ce:	2318      	movs	r3, #24
 80013d0:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013da:	2302      	movs	r3, #2
 80013dc:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK
 80013de:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80013e2:	623b      	str	r3, [r7, #32]
			| RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 fbc6 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <PeriphCommonClock_Config+0x56>
		Error_Handler();
 80013f2:	f000 fcb7 	bl	8001d64 <Error_Handler>
	}
}
 80013f6:	bf00      	nop
 80013f8:	3798      	adds	r7, #152	; 0x98
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001416:	4b29      	ldr	r3, [pc, #164]	; (80014bc <MX_ADC1_Init+0xbc>)
 8001418:	4a29      	ldr	r2, [pc, #164]	; (80014c0 <MX_ADC1_Init+0xc0>)
 800141a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <MX_ADC1_Init+0xbc>)
 800141e:	2200      	movs	r2, #0
 8001420:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <MX_ADC1_Init+0xbc>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <MX_ADC1_Init+0xbc>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <MX_ADC1_Init+0xbc>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001434:	4b21      	ldr	r3, [pc, #132]	; (80014bc <MX_ADC1_Init+0xbc>)
 8001436:	2204      	movs	r2, #4
 8001438:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <MX_ADC1_Init+0xbc>)
 800143c:	2200      	movs	r2, #0
 800143e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <MX_ADC1_Init+0xbc>)
 8001442:	2200      	movs	r2, #0
 8001444:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_ADC1_Init+0xbc>)
 8001448:	2201      	movs	r2, #1
 800144a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_ADC1_Init+0xbc>)
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_ADC1_Init+0xbc>)
 8001456:	2200      	movs	r2, #0
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_ADC1_Init+0xbc>)
 800145c:	2200      	movs	r2, #0
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_ADC1_Init+0xbc>)
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_ADC1_Init+0xbc>)
 800146a:	2200      	movs	r2, #0
 800146c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_ADC1_Init+0xbc>)
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001476:	4811      	ldr	r0, [pc, #68]	; (80014bc <MX_ADC1_Init+0xbc>)
 8001478:	f001 fb9c 	bl	8002bb4 <HAL_ADC_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_ADC1_Init+0x86>
		Error_Handler();
 8001482:	f000 fc6f 	bl	8001d64 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_ADC1_Init+0xc4>)
 8001488:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800148a:	2306      	movs	r3, #6
 800148c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001492:	237f      	movs	r3, #127	; 0x7f
 8001494:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001496:	2304      	movs	r3, #4
 8001498:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <MX_ADC1_Init+0xbc>)
 80014a4:	f001 fcd2 	bl	8002e4c <HAL_ADC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0xb2>
		Error_Handler();
 80014ae:	f000 fc59 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000a98 	.word	0x20000a98
 80014c0:	50040000 	.word	0x50040000
 80014c4:	04300002 	.word	0x04300002

080014c8 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_CRC_Init+0x3c>)
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <MX_CRC_Init+0x40>)
 80014d0:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_CRC_Init+0x3c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_CRC_Init+0x3c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_CRC_Init+0x3c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <MX_CRC_Init+0x3c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_CRC_Init+0x3c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_CRC_Init+0x3c>)
 80014f2:	f002 f9b9 	bl	8003868 <HAL_CRC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_CRC_Init+0x38>
		Error_Handler();
 80014fc:	f000 fc32 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200009c4 	.word	0x200009c4
 8001508:	40023000 	.word	0x40023000

0800150c <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_DFSDM1_Init+0x68>)
 8001512:	4a19      	ldr	r2, [pc, #100]	; (8001578 <MX_DFSDM1_Init+0x6c>)
 8001514:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_DFSDM1_Init+0x68>)
 8001518:	2201      	movs	r2, #1
 800151a:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel2.Init.OutputClock.Selection =
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_DFSDM1_Init+0x68>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
	DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_DFSDM1_Init+0x68>)
 8001524:	2202      	movs	r2, #2
 8001526:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_DFSDM1_Init+0x68>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_DFSDM1_Init+0x68>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_DFSDM1_Init+0x68>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_DFSDM1_Init+0x68>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
	hdfsdm1_channel2.Init.SerialInterface.SpiClock =
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_DFSDM1_Init+0x68>)
 8001542:	2204      	movs	r2, #4
 8001544:	621a      	str	r2, [r3, #32]
	DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
	hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_DFSDM1_Init+0x68>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_DFSDM1_Init+0x68>)
 800154e:	2201      	movs	r2, #1
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel2.Init.Offset = 0;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_DFSDM1_Init+0x68>)
 8001554:	2200      	movs	r2, #0
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_DFSDM1_Init+0x68>)
 800155a:	2200      	movs	r2, #0
 800155c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK) {
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_DFSDM1_Init+0x68>)
 8001560:	f002 fa6c 	bl	8003a3c <HAL_DFSDM_ChannelInit>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_DFSDM1_Init+0x62>
		Error_Handler();
 800156a:	f000 fbfb 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000d60 	.word	0x20000d60
 8001578:	40016040 	.word	0x40016040

0800157c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_I2C1_Init+0x74>)
 8001582:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <MX_I2C1_Init+0x78>)
 8001584:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_I2C1_Init+0x74>)
 8001588:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <MX_I2C1_Init+0x7c>)
 800158a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_I2C1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_I2C1_Init+0x74>)
 8001594:	2201      	movs	r2, #1
 8001596:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_I2C1_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_I2C1_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_I2C1_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_I2C1_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_I2C1_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80015b6:	480e      	ldr	r0, [pc, #56]	; (80015f0 <MX_I2C1_Init+0x74>)
 80015b8:	f002 fd19 	bl	8003fee <HAL_I2C_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80015c2:	f000 fbcf 	bl	8001d64 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80015c6:	2100      	movs	r1, #0
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <MX_I2C1_Init+0x74>)
 80015ca:	f002 fd9f 	bl	800410c <HAL_I2CEx_ConfigAnalogFilter>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80015d4:	f000 fbc6 	bl	8001d64 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80015d8:	2100      	movs	r1, #0
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_I2C1_Init+0x74>)
 80015dc:	f002 fde1 	bl	80041a2 <HAL_I2CEx_ConfigDigitalFilter>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_I2C1_Init+0x6e>
		Error_Handler();
 80015e6:	f000 fbbd 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000928 	.word	0x20000928
 80015f4:	40005400 	.word	0x40005400
 80015f8:	307075b1 	.word	0x307075b1

080015fc <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_I2C2_Init+0x74>)
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <MX_I2C2_Init+0x78>)
 8001604:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x307075B1;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_I2C2_Init+0x74>)
 8001608:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <MX_I2C2_Init+0x7c>)
 800160a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_I2C2_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <MX_I2C2_Init+0x74>)
 8001614:	2201      	movs	r2, #1
 8001616:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_I2C2_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <MX_I2C2_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_I2C2_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_I2C2_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_I2C2_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001636:	480e      	ldr	r0, [pc, #56]	; (8001670 <MX_I2C2_Init+0x74>)
 8001638:	f002 fcd9 	bl	8003fee <HAL_I2C_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_I2C2_Init+0x4a>
		Error_Handler();
 8001642:	f000 fb8f 	bl	8001d64 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8001646:	2100      	movs	r1, #0
 8001648:	4809      	ldr	r0, [pc, #36]	; (8001670 <MX_I2C2_Init+0x74>)
 800164a:	f002 fd5f 	bl	800410c <HAL_I2CEx_ConfigAnalogFilter>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001654:	f000 fb86 	bl	8001d64 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001658:	2100      	movs	r1, #0
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_I2C2_Init+0x74>)
 800165c:	f002 fda1 	bl	80041a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_I2C2_Init+0x6e>
		Error_Handler();
 8001666:	f000 fb7d 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200009e8 	.word	0x200009e8
 8001674:	40005800 	.word	0x40005800
 8001678:	307075b1 	.word	0x307075b1

0800167c <MX_OCTOSPI1_Init>:
/**
 * @brief OCTOSPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OCTOSPI1_Init(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN OCTOSPI1_Init 0 */

	/* USER CODE END OCTOSPI1_Init 0 */

	OSPIM_CfgTypeDef OSPIM_Cfg_Struct = { 0 };
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]

	/* USER CODE BEGIN OCTOSPI1_Init 1 */

	/* USER CODE END OCTOSPI1_Init 1 */
	/* OCTOSPI1 parameter configuration*/
	hospi1.Instance = OCTOSPI1;
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 8001692:	4a24      	ldr	r2, [pc, #144]	; (8001724 <MX_OCTOSPI1_Init+0xa8>)
 8001694:	601a      	str	r2, [r3, #0]
	hospi1.Init.FifoThreshold = 1;
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 8001698:	2201      	movs	r2, #1
 800169a:	605a      	str	r2, [r3, #4]
	hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800169c:	4b20      	ldr	r3, [pc, #128]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
	hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 80016a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016a8:	60da      	str	r2, [r3, #12]
	hospi1.Init.DeviceSize = 32;
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 80016ac:	2220      	movs	r2, #32
 80016ae:	611a      	str	r2, [r3, #16]
	hospi1.Init.ChipSelectHighTime = 1;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	615a      	str	r2, [r3, #20]
	hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
	hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
	hospi1.Init.ClockPrescaler = 1;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	621a      	str	r2, [r3, #32]
	hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
	hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
	hospi1.Init.ChipSelectBoundary = 0;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
	hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 80016dc:	2208      	movs	r2, #8
 80016de:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_OSPI_Init(&hospi1) != HAL_OK) {
 80016e0:	480f      	ldr	r0, [pc, #60]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 80016e2:	f002 fdab 	bl	800423c <HAL_OSPI_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_OCTOSPI1_Init+0x74>
		Error_Handler();
 80016ec:	f000 fb3a 	bl	8001d64 <Error_Handler>
	}
	OSPIM_Cfg_Struct.ClkPort = 1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
	OSPIM_Cfg_Struct.NCSPort = 1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
	OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80016f8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80016fc:	613b      	str	r3, [r7, #16]
	if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct,
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	f241 3288 	movw	r2, #5000	; 0x1388
 8001704:	4619      	mov	r1, r3
 8001706:	4806      	ldr	r0, [pc, #24]	; (8001720 <MX_OCTOSPI1_Init+0xa4>)
 8001708:	f002 fe4e 	bl	80043a8 <HAL_OSPIM_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_OCTOSPI1_Init+0x9a>
	HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8001712:	f000 fb27 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN OCTOSPI1_Init 2 */

	/* USER CODE END OCTOSPI1_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000974 	.word	0x20000974
 8001724:	a0001000 	.word	0xa0001000

08001728 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <MX_SPI1_Init+0x74>)
 800172e:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <MX_SPI1_Init+0x78>)
 8001730:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_SPI1_Init+0x74>)
 8001734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001738:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <MX_SPI1_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <MX_SPI1_Init+0x74>)
 8001742:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001746:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_SPI1_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <MX_SPI1_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_SPI1_Init+0x74>)
 8001756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_SPI1_Init+0x74>)
 800175e:	2208      	movs	r2, #8
 8001760:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_SPI1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_SPI1_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_SPI1_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_SPI1_Init+0x74>)
 8001776:	2207      	movs	r2, #7
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_SPI1_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_SPI1_Init+0x74>)
 8001782:	2208      	movs	r2, #8
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_SPI1_Init+0x74>)
 8001788:	f004 ff1e 	bl	80065c8 <HAL_SPI_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8001792:	f000 fae7 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000c20 	.word	0x20000c20
 80017a0:	40013000 	.word	0x40013000

080017a4 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_SPI3_Init+0x74>)
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <MX_SPI3_Init+0x78>)
 80017ac:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_SPI3_Init+0x74>)
 80017b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b4:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_SPI3_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_SPI3_Init+0x74>)
 80017be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017c2:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_SPI3_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <MX_SPI3_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_SPI3_Init+0x74>)
 80017d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d6:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_SPI3_Init+0x74>)
 80017da:	2208      	movs	r2, #8
 80017dc:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_SPI3_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_SPI3_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <MX_SPI3_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_SPI3_Init+0x74>)
 80017f2:	2207      	movs	r2, #7
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <MX_SPI3_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_SPI3_Init+0x74>)
 80017fe:	2208      	movs	r2, #8
 8001800:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_SPI3_Init+0x74>)
 8001804:	f004 fee0 	bl	80065c8 <HAL_SPI_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_SPI3_Init+0x6e>
		Error_Handler();
 800180e:	f000 faa9 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000a34 	.word	0x20000a34
 800181c:	40003c00 	.word	0x40003c00

08001820 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_TIM16_Init+0x44>)
 8001826:	4a10      	ldr	r2, [pc, #64]	; (8001868 <MX_TIM16_Init+0x48>)
 8001828:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 119;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_TIM16_Init+0x44>)
 800182c:	2277      	movs	r2, #119	; 0x77
 800182e:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_TIM16_Init+0x44>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <MX_TIM16_Init+0x44>)
 8001838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183c:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_TIM16_Init+0x44>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <MX_TIM16_Init+0x44>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_TIM16_Init+0x44>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_TIM16_Init+0x44>)
 8001852:	f004 ff5c 	bl	800670e <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM16_Init+0x40>
		Error_Handler();
 800185c:	f000 fa82 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000d14 	.word	0x20000d14
 8001868:	40014400 	.word	0x40014400

0800186c <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <MX_UART4_Init+0x90>)
 8001872:	4a23      	ldr	r2, [pc, #140]	; (8001900 <MX_UART4_Init+0x94>)
 8001874:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <MX_UART4_Init+0x90>)
 8001878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800187c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <MX_UART4_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <MX_UART4_Init+0x90>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <MX_UART4_Init+0x90>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <MX_UART4_Init+0x90>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <MX_UART4_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <MX_UART4_Init+0x90>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <MX_UART4_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <MX_UART4_Init+0x90>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <MX_UART4_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80018b4:	4811      	ldr	r0, [pc, #68]	; (80018fc <MX_UART4_Init+0x90>)
 80018b6:	f005 f883 	bl	80069c0 <HAL_UART_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_UART4_Init+0x58>
		Error_Handler();
 80018c0:	f000 fa50 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 80018c4:	2100      	movs	r1, #0
 80018c6:	480d      	ldr	r0, [pc, #52]	; (80018fc <MX_UART4_Init+0x90>)
 80018c8:	f005 fe18 	bl	80074fc <HAL_UARTEx_SetTxFifoThreshold>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80018d2:	f000 fa47 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80018d6:	2100      	movs	r1, #0
 80018d8:	4808      	ldr	r0, [pc, #32]	; (80018fc <MX_UART4_Init+0x90>)
 80018da:	f005 fe4d 	bl	8007578 <HAL_UARTEx_SetRxFifoThreshold>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80018e4:	f000 fa3e 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_UART4_Init+0x90>)
 80018ea:	f005 fdce 	bl	800748a <HAL_UARTEx_DisableFifoMode>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_UART4_Init+0x8c>
		Error_Handler();
 80018f4:	f000 fa36 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000b90 	.word	0x20000b90
 8001900:	40004c00 	.word	0x40004c00

08001904 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <MX_USART1_UART_Init+0x90>)
 800190a:	4a23      	ldr	r2, [pc, #140]	; (8001998 <MX_USART1_UART_Init+0x94>)
 800190c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <MX_USART1_UART_Init+0x90>)
 8001910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001914:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <MX_USART1_UART_Init+0x90>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <MX_USART1_UART_Init+0x90>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <MX_USART1_UART_Init+0x90>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <MX_USART1_UART_Init+0x90>)
 800192a:	220c      	movs	r2, #12
 800192c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <MX_USART1_UART_Init+0x90>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <MX_USART1_UART_Init+0x90>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_USART1_UART_Init+0x90>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <MX_USART1_UART_Init+0x90>)
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <MX_USART1_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800194c:	4811      	ldr	r0, [pc, #68]	; (8001994 <MX_USART1_UART_Init+0x90>)
 800194e:	f005 f837 	bl	80069c0 <HAL_UART_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001958:	f000 fa04 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 800195c:	2100      	movs	r1, #0
 800195e:	480d      	ldr	r0, [pc, #52]	; (8001994 <MX_USART1_UART_Init+0x90>)
 8001960:	f005 fdcc 	bl	80074fc <HAL_UARTEx_SetTxFifoThreshold>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800196a:	f000 f9fb 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800196e:	2100      	movs	r1, #0
 8001970:	4808      	ldr	r0, [pc, #32]	; (8001994 <MX_USART1_UART_Init+0x90>)
 8001972:	f005 fe01 	bl	8007578 <HAL_UARTEx_SetRxFifoThreshold>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800197c:	f000 f9f2 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <MX_USART1_UART_Init+0x90>)
 8001982:	f005 fd82 	bl	800748a <HAL_UARTEx_DisableFifoMode>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 800198c:	f000 f9ea 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000b00 	.word	0x20000b00
 8001998:	40013800 	.word	0x40013800

0800199c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80019a0:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019a2:	4a24      	ldr	r2, [pc, #144]	; (8001a34 <MX_USART2_UART_Init+0x98>)
 80019a4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019c8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019cc:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80019e6:	4812      	ldr	r0, [pc, #72]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019e8:	f004 ffea 	bl	80069c0 <HAL_UART_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART2_UART_Init+0x5a>
		Error_Handler();
 80019f2:	f000 f9b7 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80019f6:	2100      	movs	r1, #0
 80019f8:	480d      	ldr	r0, [pc, #52]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 80019fa:	f005 fd7f 	bl	80074fc <HAL_UARTEx_SetTxFifoThreshold>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_USART2_UART_Init+0x6c>
			!= HAL_OK) {
		Error_Handler();
 8001a04:	f000 f9ae 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4809      	ldr	r0, [pc, #36]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 8001a0c:	f005 fdb4 	bl	8007578 <HAL_UARTEx_SetRxFifoThreshold>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART2_UART_Init+0x7e>
			!= HAL_OK) {
		Error_Handler();
 8001a16:	f000 f9a5 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_USART2_UART_Init+0x94>)
 8001a1c:	f005 fd35 	bl	800748a <HAL_UARTEx_DisableFifoMode>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_USART2_UART_Init+0x8e>
		Error_Handler();
 8001a26:	f000 f99d 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000c84 	.word	0x20000c84
 8001a34:	40004400 	.word	0x40004400

08001a38 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <MX_USART3_UART_Init+0x94>)
 8001a40:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001a80:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a82:	f004 ff9d 	bl	80069c0 <HAL_UART_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8001a8c:	f000 f96a 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001a90:	2100      	movs	r1, #0
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001a94:	f005 fd32 	bl	80074fc <HAL_UARTEx_SetTxFifoThreshold>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001a9e:	f000 f961 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001aa6:	f005 fd67 	bl	8007578 <HAL_UARTEx_SetRxFifoThreshold>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001ab0:	f000 f958 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <MX_USART3_UART_Init+0x90>)
 8001ab6:	f005 fce8 	bl	800748a <HAL_UARTEx_DisableFifoMode>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8001ac0:	f000 f950 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000898 	.word	0x20000898
 8001acc:	40004800 	.word	0x40004800

08001ad0 <MX_USB_OTG_FS_USB_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_USB_Init(void) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 1 */
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001af6:	4b96      	ldr	r3, [pc, #600]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a95      	ldr	r2, [pc, #596]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001afc:	f043 0310 	orr.w	r3, r3, #16
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b93      	ldr	r3, [pc, #588]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	4b90      	ldr	r3, [pc, #576]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a8f      	ldr	r2, [pc, #572]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b8d      	ldr	r3, [pc, #564]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b26:	4b8a      	ldr	r3, [pc, #552]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a89      	ldr	r2, [pc, #548]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b87      	ldr	r3, [pc, #540]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b84      	ldr	r3, [pc, #528]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a83      	ldr	r2, [pc, #524]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b81      	ldr	r3, [pc, #516]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	4b7e      	ldr	r3, [pc, #504]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4a7d      	ldr	r2, [pc, #500]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b62:	4b7b      	ldr	r3, [pc, #492]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6e:	4b78      	ldr	r3, [pc, #480]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a77      	ldr	r2, [pc, #476]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b75      	ldr	r3, [pc, #468]	; (8001d50 <MX_GPIO_Init+0x270>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8001b86:	2200      	movs	r2, #0
 8001b88:	f240 1105 	movw	r1, #261	; 0x105
 8001b8c:	4871      	ldr	r0, [pc, #452]	; (8001d54 <MX_GPIO_Init+0x274>)
 8001b8e:	f002 f9f3 	bl	8003f78 <HAL_GPIO_WritePin>
	ST25DV04K_RF_DISABLE_Pin | ISM43362_RST_Pin | ISM43362_SPI3_CSN_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001b92:	2200      	movs	r2, #0
 8001b94:	f248 111c 	movw	r1, #33052	; 0x811c
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9c:	f002 f9ec 	bl	8003f78 <HAL_GPIO_WritePin>
	ARD_D10_Pin | ARD_D4_Pin | ARD_D7_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f24f 0134 	movw	r1, #61492	; 0xf034
 8001ba6:	486c      	ldr	r0, [pc, #432]	; (8001d58 <MX_GPIO_Init+0x278>)
 8001ba8:	f002 f9e6 	bl	8003f78 <HAL_GPIO_WritePin>
			ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | LED2_Pin
					| SPSGRF_915_SDN_Pin | ARD_D5_Pin | SPSGRF_915_SPI3_CSN_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001bac:	2200      	movs	r2, #0
 8001bae:	f242 0183 	movw	r1, #8323	; 0x2083
 8001bb2:	486a      	ldr	r0, [pc, #424]	; (8001d5c <MX_GPIO_Init+0x27c>)
 8001bb4:	f002 f9e0 	bl	8003f78 <HAL_GPIO_WritePin>
			SPBTLE_RF_SPI3_CSN_Pin | PMOD_RESET_Pin | PMOD_SPI2_SCK_Pin
					| STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin,
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001bbe:	4868      	ldr	r0, [pc, #416]	; (8001d60 <MX_GPIO_Init+0x280>)
 8001bc0:	f002 f9da 	bl	8003f78 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin | ISM43362_RST_Pin
 8001bc4:	f240 1305 	movw	r3, #261	; 0x105
 8001bc8:	61fb      	str	r3, [r7, #28]
			| ISM43362_SPI3_CSN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	485d      	ldr	r0, [pc, #372]	; (8001d54 <MX_GPIO_Init+0x274>)
 8001bde:	f002 f839 	bl	8003c54 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
	 ISM43362_DRDY_EXTI1_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin | ST25DV04K_GPO_Pin
 8001be2:	237a      	movs	r3, #122	; 0x7a
 8001be4:	61fb      	str	r3, [r7, #28]
			| SPSGRF_915_GPIO3_EXTI5_Pin | SPBTLE_RF_IRQ_EXTI6_Pin
			| ISM43362_DRDY_EXTI1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4857      	ldr	r0, [pc, #348]	; (8001d54 <MX_GPIO_Init+0x274>)
 8001bf8:	f002 f82c 	bl	8003c54 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin | VL53L0X_GPIO1_EXTI7_Pin
 8001bfc:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001c00:	61fb      	str	r3, [r7, #28]
			| LSM3MDL_DRDY_EXTI8_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c06:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	4619      	mov	r1, r3
 8001c12:	4853      	ldr	r0, [pc, #332]	; (8001d60 <MX_GPIO_Init+0x280>)
 8001c14:	f002 f81e 	bl	8003c54 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
	 ARD_D9_Pin */
	GPIO_InitStruct.Pin = ARD_D10_Pin | ARD_D4_Pin | ARD_D7_Pin
 8001c18:	f248 131c 	movw	r3, #33052	; 0x811c
 8001c1c:	61fb      	str	r3, [r7, #28]
			| SPBTLE_RF_RST_Pin | ARD_D9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c34:	f002 f80e 	bl	8003c54 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D3_Pin */
	GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c40:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4842      	ldr	r0, [pc, #264]	; (8001d58 <MX_GPIO_Init+0x278>)
 8001c4e:	f002 f801 	bl	8003c54 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARD_D6_Pin */
	GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c62:	2302      	movs	r3, #2
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	483a      	ldr	r0, [pc, #232]	; (8001d58 <MX_GPIO_Init+0x278>)
 8001c6e:	f001 fff1 	bl	8003c54 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
	 SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
	GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin
 8001c72:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001c76:	61fb      	str	r3, [r7, #28]
			| LED2_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin
			| SPSGRF_915_SPI3_CSN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4833      	ldr	r0, [pc, #204]	; (8001d58 <MX_GPIO_Init+0x278>)
 8001c8c:	f001 ffe2 	bl	8003c54 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
	 HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
	GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin | LSM6DSL_INT1_EXTI11_Pin
 8001c90:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001c94:	61fb      	str	r3, [r7, #28]
			| USB_OTG_FS_PWR_EN_Pin | ARD_D2_Pin | HTS221_DRDY_EXTI15_Pin
			| PMOD_IRQ_EXTI2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c9a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	482d      	ldr	r0, [pc, #180]	; (8001d5c <MX_GPIO_Init+0x27c>)
 8001ca8:	f001 ffd4 	bl	8003c54 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
	GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin | PMOD_RESET_Pin
 8001cac:	f242 0383 	movw	r3, #8323	; 0x2083
 8001cb0:	61fb      	str	r3, [r7, #28]
			| PMOD_SPI2_SCK_Pin | STSAFE_A110_RESET_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4825      	ldr	r0, [pc, #148]	; (8001d5c <MX_GPIO_Init+0x27c>)
 8001cc6:	f001 ffc5 	bl	8003c54 <HAL_GPIO_Init>

	/*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
	GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 8001cca:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001cce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	481f      	ldr	r0, [pc, #124]	; (8001d60 <MX_GPIO_Init+0x280>)
 8001ce4:	f001 ffb6 	bl	8003c54 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d00:	f001 ffa8 	bl	8003c54 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin | USB_OTG_FS_DM_Pin
 8001d04:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d08:	61fb      	str	r3, [r7, #28]
			| USB_OTG_FS_DP_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d16:	230a      	movs	r3, #10
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d24:	f001 ff96 	bl	8003c54 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2017      	movs	r0, #23
 8001d2e:	f001 fd64 	bl	80037fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d32:	2017      	movs	r0, #23
 8001d34:	f001 fd7d 	bl	8003832 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2028      	movs	r0, #40	; 0x28
 8001d3e:	f001 fd5c 	bl	80037fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d42:	2028      	movs	r0, #40	; 0x28
 8001d44:	f001 fd75 	bl	8003832 <HAL_NVIC_EnableIRQ>

}
 8001d48:	bf00      	nop
 8001d4a:	3730      	adds	r7, #48	; 0x30
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	48001000 	.word	0x48001000
 8001d58:	48000400 	.word	0x48000400
 8001d5c:	48000c00 	.word	0x48000c00
 8001d60:	48000800 	.word	0x48000800

08001d64 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>
	...

08001d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_MspInit+0x44>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_MspInit+0x44>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6613      	str	r3, [r2, #96]	; 0x60
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_MspInit+0x44>)
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_MspInit+0x44>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_MspInit+0x44>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_MspInit+0x44>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <HAL_ADC_MspInit+0x74>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d123      	bne.n	8001e22 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_ADC_MspInit+0x78>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_ADC_MspInit+0x78>)
 8001de0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_ADC_MspInit+0x78>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_ADC_MspInit+0x78>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_ADC_MspInit+0x78>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_ADC_MspInit+0x78>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001e0a:	233f      	movs	r3, #63	; 0x3f
 8001e0c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e0e:	230b      	movs	r3, #11
 8001e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4805      	ldr	r0, [pc, #20]	; (8001e34 <HAL_ADC_MspInit+0x7c>)
 8001e1e:	f001 ff19 	bl	8003c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e22:	bf00      	nop
 8001e24:	3728      	adds	r7, #40	; 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	50040000 	.word	0x50040000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	48000800 	.word	0x48000800

08001e38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <HAL_CRC_MspInit+0x38>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d10b      	bne.n	8001e62 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_CRC_MspInit+0x3c>)
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_CRC_MspInit+0x3c>)
 8001e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e54:	6493      	str	r3, [r2, #72]	; 0x48
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_CRC_MspInit+0x3c>)
 8001e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40023000 	.word	0x40023000
 8001e74:	40021000 	.word	0x40021000

08001e78 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0ae      	sub	sp, #184	; 0xb8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	2294      	movs	r2, #148	; 0x94
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f006 fe9f 	bl	8008bdc <memset>
  if(DFSDM1_Init == 0)
 8001e9e:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d142      	bne.n	8001f2c <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eaa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 fe5e 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001ec2:	f7ff ff4f 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eca:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	4a15      	ldr	r2, [pc, #84]	; (8001f38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ee4:	f043 0310 	orr.w	r3, r3, #16
 8001ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001ef6:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001f10:	2306      	movs	r3, #6
 8001f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4807      	ldr	r0, [pc, #28]	; (8001f3c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001f1e:	f001 fe99 	bl	8003c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	4a02      	ldr	r2, [pc, #8]	; (8001f34 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001f2a:	6013      	str	r3, [r2, #0]
  }

}
 8001f2c:	bf00      	nop
 8001f2e:	37b8      	adds	r7, #184	; 0xb8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200007e8 	.word	0x200007e8
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	48001000 	.word	0x48001000

08001f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0b0      	sub	sp, #192	; 0xc0
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f58:	f107 0318 	add.w	r3, r7, #24
 8001f5c:	2294      	movs	r2, #148	; 0x94
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f006 fe3b 	bl	8008bdc <memset>
  if(hi2c->Instance==I2C1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a42      	ldr	r2, [pc, #264]	; (8002074 <HAL_I2C_MspInit+0x134>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d13c      	bne.n	8001fea <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f70:	2340      	movs	r3, #64	; 0x40
 8001f72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f78:	f107 0318 	add.w	r3, r7, #24
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fdfb 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f88:	f7ff feec 	bl	8001d64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <HAL_I2C_MspInit+0x138>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	4a39      	ldr	r2, [pc, #228]	; (8002078 <HAL_I2C_MspInit+0x138>)
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f98:	4b37      	ldr	r3, [pc, #220]	; (8002078 <HAL_I2C_MspInit+0x138>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001fa4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fac:	2312      	movs	r3, #18
 8001fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fc8:	4619      	mov	r1, r3
 8001fca:	482c      	ldr	r0, [pc, #176]	; (800207c <HAL_I2C_MspInit+0x13c>)
 8001fcc:	f001 fe42 	bl	8003c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fd0:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_I2C_MspInit+0x138>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	4a28      	ldr	r2, [pc, #160]	; (8002078 <HAL_I2C_MspInit+0x138>)
 8001fd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fda:	6593      	str	r3, [r2, #88]	; 0x58
 8001fdc:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_I2C_MspInit+0x138>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fe8:	e040      	b.n	800206c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a24      	ldr	r2, [pc, #144]	; (8002080 <HAL_I2C_MspInit+0x140>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d13b      	bne.n	800206c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ffc:	f107 0318 	add.w	r3, r7, #24
 8002000:	4618      	mov	r0, r3
 8002002:	f003 fdb9 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 800200c:	f7ff feaa 	bl	8001d64 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_I2C_MspInit+0x138>)
 8002012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002014:	4a18      	ldr	r2, [pc, #96]	; (8002078 <HAL_I2C_MspInit+0x138>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_I2C_MspInit+0x138>)
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002028:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800202c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002030:	2312      	movs	r3, #18
 8002032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002036:	2301      	movs	r3, #1
 8002038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002042:	2304      	movs	r3, #4
 8002044:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800204c:	4619      	mov	r1, r3
 800204e:	480b      	ldr	r0, [pc, #44]	; (800207c <HAL_I2C_MspInit+0x13c>)
 8002050:	f001 fe00 	bl	8003c54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_I2C_MspInit+0x138>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_I2C_MspInit+0x138>)
 800205a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800205e:	6593      	str	r3, [r2, #88]	; 0x58
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_I2C_MspInit+0x138>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
}
 800206c:	bf00      	nop
 800206e:	37c0      	adds	r7, #192	; 0xc0
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40005400 	.word	0x40005400
 8002078:	40021000 	.word	0x40021000
 800207c:	48000400 	.word	0x48000400
 8002080:	40005800 	.word	0x40005800

08002084 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b0b0      	sub	sp, #192	; 0xc0
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800209c:	f107 0318 	add.w	r3, r7, #24
 80020a0:	2294      	movs	r2, #148	; 0x94
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f006 fd99 	bl	8008bdc <memset>
  if(hospi->Instance==OCTOSPI1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a28      	ldr	r2, [pc, #160]	; (8002150 <HAL_OSPI_MspInit+0xcc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d149      	bne.n	8002148 <HAL_OSPI_MspInit+0xc4>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80020b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fd57 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80020d0:	f7ff fe48 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80020d4:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_OSPI_MspInit+0xd0>)
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	4a1e      	ldr	r2, [pc, #120]	; (8002154 <HAL_OSPI_MspInit+0xd0>)
 80020da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e0:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_OSPI_MspInit+0xd0>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_OSPI_MspInit+0xd0>)
 80020ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f0:	4a18      	ldr	r2, [pc, #96]	; (8002154 <HAL_OSPI_MspInit+0xd0>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f6:	6513      	str	r3, [r2, #80]	; 0x50
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_OSPI_MspInit+0xd0>)
 80020fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_OSPI_MspInit+0xd0>)
 8002106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <HAL_OSPI_MspInit+0xd0>)
 800210a:	f043 0310 	orr.w	r3, r3, #16
 800210e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_OSPI_MspInit+0xd0>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800211c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002136:	230a      	movs	r3, #10
 8002138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002140:	4619      	mov	r1, r3
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <HAL_OSPI_MspInit+0xd4>)
 8002144:	f001 fd86 	bl	8003c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002148:	bf00      	nop
 800214a:	37c0      	adds	r7, #192	; 0xc0
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	a0001000 	.word	0xa0001000
 8002154:	40021000 	.word	0x40021000
 8002158:	48001000 	.word	0x48001000

0800215c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2f      	ldr	r2, [pc, #188]	; (8002238 <HAL_SPI_MspInit+0xdc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d129      	bne.n	80021d2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800217e:	4b2f      	ldr	r3, [pc, #188]	; (800223c <HAL_SPI_MspInit+0xe0>)
 8002180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002182:	4a2e      	ldr	r2, [pc, #184]	; (800223c <HAL_SPI_MspInit+0xe0>)
 8002184:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002188:	6613      	str	r3, [r2, #96]	; 0x60
 800218a:	4b2c      	ldr	r3, [pc, #176]	; (800223c <HAL_SPI_MspInit+0xe0>)
 800218c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	4b29      	ldr	r3, [pc, #164]	; (800223c <HAL_SPI_MspInit+0xe0>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	4a28      	ldr	r2, [pc, #160]	; (800223c <HAL_SPI_MspInit+0xe0>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a2:	4b26      	ldr	r3, [pc, #152]	; (800223c <HAL_SPI_MspInit+0xe0>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80021ae:	23e0      	movs	r3, #224	; 0xe0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021be:	2305      	movs	r3, #5
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021cc:	f001 fd42 	bl	8003c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021d0:	e02d      	b.n	800222e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <HAL_SPI_MspInit+0xe4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d128      	bne.n	800222e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_SPI_MspInit+0xe0>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	4a16      	ldr	r2, [pc, #88]	; (800223c <HAL_SPI_MspInit+0xe0>)
 80021e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e6:	6593      	str	r3, [r2, #88]	; 0x58
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_SPI_MspInit+0xe0>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_SPI_MspInit+0xe0>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f8:	4a10      	ldr	r2, [pc, #64]	; (800223c <HAL_SPI_MspInit+0xe0>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002200:	4b0e      	ldr	r3, [pc, #56]	; (800223c <HAL_SPI_MspInit+0xe0>)
 8002202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800220c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800221e:	2306      	movs	r3, #6
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	4806      	ldr	r0, [pc, #24]	; (8002244 <HAL_SPI_MspInit+0xe8>)
 800222a:	f001 fd13 	bl	8003c54 <HAL_GPIO_Init>
}
 800222e:	bf00      	nop
 8002230:	3730      	adds	r7, #48	; 0x30
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40013000 	.word	0x40013000
 800223c:	40021000 	.word	0x40021000
 8002240:	40003c00 	.word	0x40003c00
 8002244:	48000800 	.word	0x48000800

08002248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <HAL_TIM_Base_MspInit+0x38>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d10b      	bne.n	8002272 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_TIM_Base_MspInit+0x3c>)
 800225c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_TIM_Base_MspInit+0x3c>)
 8002260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002264:	6613      	str	r3, [r2, #96]	; 0x60
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_TIM_Base_MspInit+0x3c>)
 8002268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40014400 	.word	0x40014400
 8002284:	40021000 	.word	0x40021000

08002288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0b4      	sub	sp, #208	; 0xd0
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a4:	2294      	movs	r2, #148	; 0x94
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f006 fc97 	bl	8008bdc <memset>
  if(huart->Instance==UART4)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a83      	ldr	r2, [pc, #524]	; (80024c0 <HAL_UART_MspInit+0x238>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d13c      	bne.n	8002332 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80022b8:	2308      	movs	r3, #8
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80022bc:	2300      	movs	r3, #0
 80022be:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 fc57 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022d0:	f7ff fd48 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022d4:	4b7b      	ldr	r3, [pc, #492]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	4a7a      	ldr	r2, [pc, #488]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 80022da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022de:	6593      	str	r3, [r2, #88]	; 0x58
 80022e0:	4b78      	ldr	r3, [pc, #480]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	4b75      	ldr	r3, [pc, #468]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 80022ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f0:	4a74      	ldr	r2, [pc, #464]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f8:	4b72      	ldr	r3, [pc, #456]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	623b      	str	r3, [r7, #32]
 8002302:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002304:	2303      	movs	r3, #3
 8002306:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800231c:	2308      	movs	r3, #8
 800231e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002326:	4619      	mov	r1, r3
 8002328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800232c:	f001 fc92 	bl	8003c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002330:	e0c2      	b.n	80024b8 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a64      	ldr	r2, [pc, #400]	; (80024c8 <HAL_UART_MspInit+0x240>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d13b      	bne.n	80023b4 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800233c:	2301      	movs	r3, #1
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002340:	2300      	movs	r3, #0
 8002342:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002348:	4618      	mov	r0, r3
 800234a:	f003 fc15 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002354:	f7ff fd06 	bl	8001d64 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002358:	4b5a      	ldr	r3, [pc, #360]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 800235a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235c:	4a59      	ldr	r2, [pc, #356]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 800235e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002362:	6613      	str	r3, [r2, #96]	; 0x60
 8002364:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 8002366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002370:	4b54      	ldr	r3, [pc, #336]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002374:	4a53      	ldr	r2, [pc, #332]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 8002376:	f043 0302 	orr.w	r3, r3, #2
 800237a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800237c:	4b51      	ldr	r3, [pc, #324]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 800237e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002388:	23c0      	movs	r3, #192	; 0xc0
 800238a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239a:	2303      	movs	r3, #3
 800239c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023a0:	2307      	movs	r3, #7
 80023a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023aa:	4619      	mov	r1, r3
 80023ac:	4847      	ldr	r0, [pc, #284]	; (80024cc <HAL_UART_MspInit+0x244>)
 80023ae:	f001 fc51 	bl	8003c54 <HAL_GPIO_Init>
}
 80023b2:	e081      	b.n	80024b8 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a45      	ldr	r2, [pc, #276]	; (80024d0 <HAL_UART_MspInit+0x248>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d13b      	bne.n	8002436 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023be:	2302      	movs	r3, #2
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023c2:	2300      	movs	r3, #0
 80023c4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 fbd4 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_UART_MspInit+0x152>
      Error_Handler();
 80023d6:	f7ff fcc5 	bl	8001d64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023da:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	4a39      	ldr	r2, [pc, #228]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	6593      	str	r3, [r2, #88]	; 0x58
 80023e6:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 80023e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f2:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 80023f8:	f043 0308 	orr.w	r3, r3, #8
 80023fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fe:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800240a:	2378      	movs	r3, #120	; 0x78
 800240c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002422:	2307      	movs	r3, #7
 8002424:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002428:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800242c:	4619      	mov	r1, r3
 800242e:	4829      	ldr	r0, [pc, #164]	; (80024d4 <HAL_UART_MspInit+0x24c>)
 8002430:	f001 fc10 	bl	8003c54 <HAL_GPIO_Init>
}
 8002434:	e040      	b.n	80024b8 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a27      	ldr	r2, [pc, #156]	; (80024d8 <HAL_UART_MspInit+0x250>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d13b      	bne.n	80024b8 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002440:	2304      	movs	r3, #4
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002444:	2300      	movs	r3, #0
 8002446:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800244c:	4618      	mov	r0, r3
 800244e:	f003 fb93 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8002458:	f7ff fc84 	bl	8001d64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 8002462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002466:	6593      	str	r3, [r2, #88]	; 0x58
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002478:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_UART_MspInit+0x23c>)
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800248c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002490:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024a6:	2307      	movs	r3, #7
 80024a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024b0:	4619      	mov	r1, r3
 80024b2:	4808      	ldr	r0, [pc, #32]	; (80024d4 <HAL_UART_MspInit+0x24c>)
 80024b4:	f001 fbce 	bl	8003c54 <HAL_GPIO_Init>
}
 80024b8:	bf00      	nop
 80024ba:	37d0      	adds	r7, #208	; 0xd0
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40004c00 	.word	0x40004c00
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40013800 	.word	0x40013800
 80024cc:	48000400 	.word	0x48000400
 80024d0:	40004400 	.word	0x40004400
 80024d4:	48000c00 	.word	0x48000c00
 80024d8:	40004800 	.word	0x40004800

080024dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <NMI_Handler+0x4>

080024e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <MemManage_Handler+0x4>

080024ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002528:	f000 f984 	bl	8002834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002534:	2020      	movs	r0, #32
 8002536:	f001 fd37 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800253a:	2040      	movs	r0, #64	; 0x40
 800253c:	f001 fd34 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D11_Pin);
 8002540:	2080      	movs	r0, #128	; 0x80
 8002542:	f001 fd31 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ISM43362_RST_Pin);
 8002546:	f44f 7080 	mov.w	r0, #256	; 0x100
 800254a:	f001 fd2d 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}

08002552 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_CLK_Pin);
 8002556:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800255a:	f001 fd25 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_NCS_Pin);
 800255e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002562:	f001 fd21 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OQUADSPI_BK1_IO0_Pin);
 8002566:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800256a:	f001 fd1d 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800256e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002572:	f001 fd19 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO2_Pin);
 8002576:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800257a:	f001 fd15 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO3_Pin);
 800257e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002582:	f001 fd11 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}

0800258a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
	return 1;
 800258e:	2301      	movs	r3, #1
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_kill>:

int _kill(int pid, int sig)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025a4:	f006 fada 	bl	8008b5c <__errno>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2216      	movs	r2, #22
 80025ac:	601a      	str	r2, [r3, #0]
	return -1;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <_exit>:

void _exit (int status)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025c2:	f04f 31ff 	mov.w	r1, #4294967295
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ffe7 	bl	800259a <_kill>
	while (1) {}		/* Make sure we hang here */
 80025cc:	e7fe      	b.n	80025cc <_exit+0x12>

080025ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e00a      	b.n	80025f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025e0:	f3af 8000 	nop.w
 80025e4:	4601      	mov	r1, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	60ba      	str	r2, [r7, #8]
 80025ec:	b2ca      	uxtb	r2, r1
 80025ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3301      	adds	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	dbf0      	blt.n	80025e0 <_read+0x12>
	}

return len;
 80025fe:	687b      	ldr	r3, [r7, #4]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	e009      	b.n	800262e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	60ba      	str	r2, [r7, #8]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	429a      	cmp	r2, r3
 8002634:	dbf1      	blt.n	800261a <_write+0x12>
	}
	return len;
 8002636:	687b      	ldr	r3, [r7, #4]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <_close>:

int _close(int file)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	return -1;
 8002648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002668:	605a      	str	r2, [r3, #4]
	return 0;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_isatty>:

int _isatty(int file)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	return 1;
 8002680:	2301      	movs	r3, #1
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800268e:	b480      	push	{r7}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
	return 0;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b0:	4a14      	ldr	r2, [pc, #80]	; (8002704 <_sbrk+0x5c>)
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <_sbrk+0x60>)
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <_sbrk+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <_sbrk+0x64>)
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <_sbrk+0x68>)
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <_sbrk+0x64>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d207      	bcs.n	80026e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d8:	f006 fa40 	bl	8008b5c <__errno>
 80026dc:	4603      	mov	r3, r0
 80026de:	220c      	movs	r2, #12
 80026e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	e009      	b.n	80026fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <_sbrk+0x64>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a05      	ldr	r2, [pc, #20]	; (800270c <_sbrk+0x64>)
 80026f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fa:	68fb      	ldr	r3, [r7, #12]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	200a0000 	.word	0x200a0000
 8002708:	00001000 	.word	0x00001000
 800270c:	200007ec 	.word	0x200007ec
 8002710:	20000db0 	.word	0x20000db0

08002714 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <SystemInit+0x20>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <SystemInit+0x20>)
 8002720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002770 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800273c:	f7ff ffea 	bl	8002714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002740:	480c      	ldr	r0, [pc, #48]	; (8002774 <LoopForever+0x6>)
  ldr r1, =_edata
 8002742:	490d      	ldr	r1, [pc, #52]	; (8002778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <LoopForever+0xe>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002748:	e002      	b.n	8002750 <LoopCopyDataInit>

0800274a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800274a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800274c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274e:	3304      	adds	r3, #4

08002750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002754:	d3f9      	bcc.n	800274a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002758:	4c0a      	ldr	r4, [pc, #40]	; (8002784 <LoopForever+0x16>)
  movs r3, #0
 800275a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800275c:	e001      	b.n	8002762 <LoopFillZerobss>

0800275e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002760:	3204      	adds	r2, #4

08002762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002764:	d3fb      	bcc.n	800275e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002766:	f006 f9ff 	bl	8008b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800276a:	f7fe fc01 	bl	8000f70 <main>

0800276e <LoopForever>:

LoopForever:
    b LoopForever
 800276e:	e7fe      	b.n	800276e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002770:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002778:	200007cc 	.word	0x200007cc
  ldr r2, =_sidata
 800277c:	0800d630 	.word	0x0800d630
  ldr r2, =_sbss
 8002780:	200007cc 	.word	0x200007cc
  ldr r4, =_ebss
 8002784:	20000dac 	.word	0x20000dac

08002788 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002788:	e7fe      	b.n	8002788 <ADC1_IRQHandler>

0800278a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002794:	2003      	movs	r0, #3
 8002796:	f001 f825 	bl	80037e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800279a:	2000      	movs	r0, #0
 800279c:	f000 f80e 	bl	80027bc <HAL_InitTick>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	71fb      	strb	r3, [r7, #7]
 80027aa:	e001      	b.n	80027b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027ac:	f7ff fae0 	bl	8001d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027b0:	79fb      	ldrb	r3, [r7, #7]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027c8:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_InitTick+0x6c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d023      	beq.n	8002818 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027d0:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_InitTick+0x70>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_InitTick+0x6c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027de:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 f831 	bl	800384e <HAL_SYSTICK_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10f      	bne.n	8002812 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	d809      	bhi.n	800280c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f8:	2200      	movs	r2, #0
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f000 fffb 	bl	80037fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002804:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <HAL_InitTick+0x74>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e007      	b.n	800281c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e004      	b.n	800281c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
 8002816:	e001      	b.n	800281c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000008 	.word	0x20000008
 800282c:	20000000 	.word	0x20000000
 8002830:	20000004 	.word	0x20000004

08002834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_IncTick+0x20>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_IncTick+0x24>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4413      	add	r3, r2
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_IncTick+0x24>)
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000008 	.word	0x20000008
 8002858:	20000d98 	.word	0x20000d98

0800285c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return uwTick;
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_GetTick+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000d98 	.word	0x20000d98

08002874 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	609a      	str	r2, [r3, #8]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3360      	adds	r3, #96	; 0x60
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <LL_ADC_SetOffset+0x44>)
 80028fe:	4013      	ands	r3, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	4313      	orrs	r3, r2
 800290c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	03fff000 	.word	0x03fff000

08002924 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3360      	adds	r3, #96	; 0x60
 8002932:	461a      	mov	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3360      	adds	r3, #96	; 0x60
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	431a      	orrs	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	615a      	str	r2, [r3, #20]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3330      	adds	r3, #48	; 0x30
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	4413      	add	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	211f      	movs	r1, #31
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	f003 011f 	and.w	r1, r3, #31
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 031f 	and.w	r3, r3, #31
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	431a      	orrs	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3314      	adds	r3, #20
 8002a14:	461a      	mov	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	0e5b      	lsrs	r3, r3, #25
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	4413      	add	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	0d1b      	lsrs	r3, r3, #20
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2107      	movs	r1, #7
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	401a      	ands	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	0d1b      	lsrs	r3, r3, #20
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a74:	43db      	mvns	r3, r3
 8002a76:	401a      	ands	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0318 	and.w	r3, r3, #24
 8002a7e:	4908      	ldr	r1, [pc, #32]	; (8002aa0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a80:	40d9      	lsrs	r1, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	400b      	ands	r3, r1
 8002a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	0007ffff 	.word	0x0007ffff

08002aa4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6093      	str	r3, [r2, #8]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002adc:	d101      	bne.n	8002ae2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d101      	bne.n	8002b32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <LL_ADC_IsEnabled+0x18>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <LL_ADC_IsEnabled+0x1a>
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d101      	bne.n	8002b7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d101      	bne.n	8002ba4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e12f      	b.n	8002e2e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d109      	bne.n	8002bf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff f8eb 	bl	8001db8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff67 	bl	8002ac8 <LL_ADC_IsDeepPowerDownEnabled>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff4d 	bl	8002aa4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ff82 	bl	8002b18 <LL_ADC_IsInternalRegulatorEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d115      	bne.n	8002c46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff ff66 	bl	8002af0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c24:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <HAL_ADC_Init+0x284>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	099b      	lsrs	r3, r3, #6
 8002c2a:	4a84      	ldr	r2, [pc, #528]	; (8002e3c <HAL_ADC_Init+0x288>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	3301      	adds	r3, #1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c38:	e002      	b.n	8002c40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f9      	bne.n	8002c3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff64 	bl	8002b18 <LL_ADC_IsInternalRegulatorEnabled>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	f043 0210 	orr.w	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff75 	bl	8002b66 <LL_ADC_REG_IsConversionOngoing>
 8002c7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 80c8 	bne.w	8002e1c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 80c4 	bne.w	8002e1c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c9c:	f043 0202 	orr.w	r2, r3, #2
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff49 	bl	8002b40 <LL_ADC_IsEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cb4:	4862      	ldr	r0, [pc, #392]	; (8002e40 <HAL_ADC_Init+0x28c>)
 8002cb6:	f7ff ff43 	bl	8002b40 <LL_ADC_IsEnabled>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	485f      	ldr	r0, [pc, #380]	; (8002e44 <HAL_ADC_Init+0x290>)
 8002cc8:	f7ff fdd4 	bl	8002874 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7e5b      	ldrb	r3, [r3, #25]
 8002cd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cd6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002cdc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002ce2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d106      	bne.n	8002d08 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	045b      	lsls	r3, r3, #17
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_ADC_Init+0x294>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	430b      	orrs	r3, r1
 8002d36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff12 	bl	8002b66 <LL_ADC_REG_IsConversionOngoing>
 8002d42:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff1f 	bl	8002b8c <LL_ADC_INJ_IsConversionOngoing>
 8002d4e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d140      	bne.n	8002dd8 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d13d      	bne.n	8002dd8 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7e1b      	ldrb	r3, [r3, #24]
 8002d64:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d66:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d6e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d7e:	f023 0306 	bic.w	r3, r3, #6
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	69b9      	ldr	r1, [r7, #24]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d118      	bne.n	8002dc8 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dac:	4311      	orrs	r1, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002db2:	4311      	orrs	r1, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002db8:	430a      	orrs	r2, r1
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	611a      	str	r2, [r3, #16]
 8002dc6:	e007      	b.n	8002dd8 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d10c      	bne.n	8002dfa <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f023 010f 	bic.w	r1, r3, #15
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	1e5a      	subs	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
 8002df8:	e007      	b.n	8002e0a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 020f 	bic.w	r2, r2, #15
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	659a      	str	r2, [r3, #88]	; 0x58
 8002e1a:	e007      	b.n	8002e2c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	f043 0210 	orr.w	r2, r3, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	053e2d63 	.word	0x053e2d63
 8002e40:	50040000 	.word	0x50040000
 8002e44:	50040300 	.word	0x50040300
 8002e48:	fff0c007 	.word	0xfff0c007

08002e4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b0b6      	sub	sp, #216	; 0xd8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x22>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e3d5      	b.n	800361a <HAL_ADC_ConfigChannel+0x7ce>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fe73 	bl	8002b66 <LL_ADC_REG_IsConversionOngoing>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 83ba 	bne.w	80035fc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d824      	bhi.n	8002eda <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	3b02      	subs	r3, #2
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d81b      	bhi.n	8002ed2 <HAL_ADC_ConfigChannel+0x86>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <HAL_ADC_ConfigChannel+0x54>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002eb9 	.word	0x08002eb9
 8002ea8:	08002ec1 	.word	0x08002ec1
 8002eac:	08002ec9 	.word	0x08002ec9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	605a      	str	r2, [r3, #4]
          break;
 8002eb6:	e011      	b.n	8002edc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2212      	movs	r2, #18
 8002ebc:	605a      	str	r2, [r3, #4]
          break;
 8002ebe:	e00d      	b.n	8002edc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2218      	movs	r2, #24
 8002ec4:	605a      	str	r2, [r3, #4]
          break;
 8002ec6:	e009      	b.n	8002edc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ece:	605a      	str	r2, [r3, #4]
          break;
 8002ed0:	e004      	b.n	8002edc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2206      	movs	r2, #6
 8002ed6:	605a      	str	r2, [r3, #4]
          break;
 8002ed8:	e000      	b.n	8002edc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002eda:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f7ff fd5f 	bl	80029ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fe37 	bl	8002b66 <LL_ADC_REG_IsConversionOngoing>
 8002ef8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fe43 	bl	8002b8c <LL_ADC_INJ_IsConversionOngoing>
 8002f06:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 81c1 	bne.w	8003296 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 81bc 	bne.w	8003296 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f26:	d10f      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2200      	movs	r2, #0
 8002f32:	4619      	mov	r1, r3
 8002f34:	f7ff fd66 	bl	8002a04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fd20 	bl	8002986 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f46:	e00e      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6819      	ldr	r1, [r3, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	461a      	mov	r2, r3
 8002f56:	f7ff fd55 	bl	8002a04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fd10 	bl	8002986 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	08db      	lsrs	r3, r3, #3
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d00a      	beq.n	8002f9e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	6919      	ldr	r1, [r3, #16]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f98:	f7ff fca0 	bl	80028dc <LL_ADC_SetOffset>
 8002f9c:	e17b      	b.n	8003296 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fcbd 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x17e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fcb2 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	e01e      	b.n	8003008 <HAL_ADC_ConfigChannel+0x1bc>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fca7 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fe8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ff0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	e004      	b.n	8003006 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x1d4>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	e018      	b.n	8003052 <HAL_ADC_ConfigChannel+0x206>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800303c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003044:	2320      	movs	r3, #32
 8003046:	e004      	b.n	8003052 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003052:	429a      	cmp	r2, r3
 8003054:	d106      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fc76 	bl	8002950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2101      	movs	r1, #1
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fc5a 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003070:	4603      	mov	r3, r0
 8003072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10a      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x244>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fc4f 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003086:	4603      	mov	r3, r0
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	f003 021f 	and.w	r2, r3, #31
 800308e:	e01e      	b.n	80030ce <HAL_ADC_ConfigChannel+0x282>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fc44 	bl	8002924 <LL_ADC_GetOffsetChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80030be:	2320      	movs	r3, #32
 80030c0:	e004      	b.n	80030cc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80030c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x29a>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	0e9b      	lsrs	r3, r3, #26
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	e018      	b.n	8003118 <HAL_ADC_ConfigChannel+0x2cc>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80030fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003102:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800310a:	2320      	movs	r3, #32
 800310c:	e004      	b.n	8003118 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800310e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003118:	429a      	cmp	r2, r3
 800311a:	d106      	bne.n	800312a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2200      	movs	r2, #0
 8003122:	2101      	movs	r1, #1
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fc13 	bl	8002950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2102      	movs	r1, #2
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fbf7 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x30a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fbec 	bl	8002924 <LL_ADC_GetOffsetChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	0e9b      	lsrs	r3, r3, #26
 8003150:	f003 021f 	and.w	r2, r3, #31
 8003154:	e01e      	b.n	8003194 <HAL_ADC_ConfigChannel+0x348>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2102      	movs	r1, #2
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fbe1 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003162:	4603      	mov	r3, r0
 8003164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003174:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003178:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800317c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003184:	2320      	movs	r3, #32
 8003186:	e004      	b.n	8003192 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003188:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319c:	2b00      	cmp	r3, #0
 800319e:	d105      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x360>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	0e9b      	lsrs	r3, r3, #26
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	e016      	b.n	80031da <HAL_ADC_ConfigChannel+0x38e>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80031cc:	2320      	movs	r3, #32
 80031ce:	e004      	b.n	80031da <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80031d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d4:	fab3 f383 	clz	r3, r3
 80031d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031da:	429a      	cmp	r2, r3
 80031dc:	d106      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	2102      	movs	r1, #2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fbb2 	bl	8002950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2103      	movs	r1, #3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fb96 	bl	8002924 <LL_ADC_GetOffsetChannel>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x3cc>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2103      	movs	r1, #3
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fb8b 	bl	8002924 <LL_ADC_GetOffsetChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	0e9b      	lsrs	r3, r3, #26
 8003212:	f003 021f 	and.w	r2, r3, #31
 8003216:	e017      	b.n	8003248 <HAL_ADC_ConfigChannel+0x3fc>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2103      	movs	r1, #3
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fb80 	bl	8002924 <LL_ADC_GetOffsetChannel>
 8003224:	4603      	mov	r3, r0
 8003226:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003230:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003232:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800323a:	2320      	movs	r3, #32
 800323c:	e003      	b.n	8003246 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800323e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x414>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0e9b      	lsrs	r3, r3, #26
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	e011      	b.n	8003284 <HAL_ADC_ConfigChannel+0x438>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800326e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003270:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	e003      	b.n	8003284 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800327c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003284:	429a      	cmp	r2, r3
 8003286:	d106      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2200      	movs	r2, #0
 800328e:	2103      	movs	r1, #3
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fb5d 	bl	8002950 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fc50 	bl	8002b40 <LL_ADC_IsEnabled>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 8140 	bne.w	8003528 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	461a      	mov	r2, r3
 80032b6:	f7ff fbd1 	bl	8002a5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	4a8f      	ldr	r2, [pc, #572]	; (80034fc <HAL_ADC_ConfigChannel+0x6b0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	f040 8131 	bne.w	8003528 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x4a2>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	3301      	adds	r3, #1
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	2b09      	cmp	r3, #9
 80032e4:	bf94      	ite	ls
 80032e6:	2301      	movls	r3, #1
 80032e8:	2300      	movhi	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	e019      	b.n	8003322 <HAL_ADC_ConfigChannel+0x4d6>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80032fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003306:	2320      	movs	r3, #32
 8003308:	e003      	b.n	8003312 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800330a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2b09      	cmp	r3, #9
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003322:	2b00      	cmp	r3, #0
 8003324:	d079      	beq.n	800341a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332e:	2b00      	cmp	r3, #0
 8003330:	d107      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x4f6>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	0e9b      	lsrs	r3, r3, #26
 8003338:	3301      	adds	r3, #1
 800333a:	069b      	lsls	r3, r3, #26
 800333c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003340:	e015      	b.n	800336e <HAL_ADC_ConfigChannel+0x522>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003352:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800335a:	2320      	movs	r3, #32
 800335c:	e003      	b.n	8003366 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800335e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	3301      	adds	r3, #1
 8003368:	069b      	lsls	r3, r3, #26
 800336a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_ADC_ConfigChannel+0x542>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	0e9b      	lsrs	r3, r3, #26
 8003380:	3301      	adds	r3, #1
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2101      	movs	r1, #1
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	e017      	b.n	80033be <HAL_ADC_ConfigChannel+0x572>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800339c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80033a6:	2320      	movs	r3, #32
 80033a8:	e003      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80033aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	3301      	adds	r3, #1
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	2101      	movs	r1, #1
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	ea42 0103 	orr.w	r1, r2, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x598>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	0e9b      	lsrs	r3, r3, #26
 80033d4:	3301      	adds	r3, #1
 80033d6:	f003 021f 	and.w	r2, r3, #31
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	051b      	lsls	r3, r3, #20
 80033e2:	e018      	b.n	8003416 <HAL_ADC_ConfigChannel+0x5ca>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80033f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80033fc:	2320      	movs	r3, #32
 80033fe:	e003      	b.n	8003408 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	3301      	adds	r3, #1
 800340a:	f003 021f 	and.w	r2, r3, #31
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003416:	430b      	orrs	r3, r1
 8003418:	e081      	b.n	800351e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003422:	2b00      	cmp	r3, #0
 8003424:	d107      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x5ea>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	3301      	adds	r3, #1
 800342e:	069b      	lsls	r3, r3, #26
 8003430:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003434:	e015      	b.n	8003462 <HAL_ADC_ConfigChannel+0x616>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800344e:	2320      	movs	r3, #32
 8003450:	e003      	b.n	800345a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	3301      	adds	r3, #1
 800345c:	069b      	lsls	r3, r3, #26
 800345e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x636>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	0e9b      	lsrs	r3, r3, #26
 8003474:	3301      	adds	r3, #1
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	2101      	movs	r1, #1
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	e017      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x666>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	61fb      	str	r3, [r7, #28]
  return result;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800349a:	2320      	movs	r3, #32
 800349c:	e003      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	2101      	movs	r1, #1
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	ea42 0103 	orr.w	r1, r2, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <HAL_ADC_ConfigChannel+0x692>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	0e9b      	lsrs	r3, r3, #26
 80034c8:	3301      	adds	r3, #1
 80034ca:	f003 021f 	and.w	r2, r3, #31
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	3b1e      	subs	r3, #30
 80034d6:	051b      	lsls	r3, r3, #20
 80034d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034dc:	e01e      	b.n	800351c <HAL_ADC_ConfigChannel+0x6d0>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	613b      	str	r3, [r7, #16]
  return result;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d104      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80034f6:	2320      	movs	r3, #32
 80034f8:	e006      	b.n	8003508 <HAL_ADC_ConfigChannel+0x6bc>
 80034fa:	bf00      	nop
 80034fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	3301      	adds	r3, #1
 800350a:	f003 021f 	and.w	r2, r3, #31
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	3b1e      	subs	r3, #30
 8003516:	051b      	lsls	r3, r3, #20
 8003518:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800351c:	430b      	orrs	r3, r1
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	4619      	mov	r1, r3
 8003524:	f7ff fa6e 	bl	8002a04 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b3d      	ldr	r3, [pc, #244]	; (8003624 <HAL_ADC_ConfigChannel+0x7d8>)
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d06c      	beq.n	800360e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003534:	483c      	ldr	r0, [pc, #240]	; (8003628 <HAL_ADC_ConfigChannel+0x7dc>)
 8003536:	f7ff f9c3 	bl	80028c0 <LL_ADC_GetCommonPathInternalCh>
 800353a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a3a      	ldr	r2, [pc, #232]	; (800362c <HAL_ADC_ConfigChannel+0x7e0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d127      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003548:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800354c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d121      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a35      	ldr	r2, [pc, #212]	; (8003630 <HAL_ADC_ConfigChannel+0x7e4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d157      	bne.n	800360e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800355e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003562:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003566:	4619      	mov	r1, r3
 8003568:	482f      	ldr	r0, [pc, #188]	; (8003628 <HAL_ADC_ConfigChannel+0x7dc>)
 800356a:	f7ff f996 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800356e:	4b31      	ldr	r3, [pc, #196]	; (8003634 <HAL_ADC_ConfigChannel+0x7e8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	4a30      	ldr	r2, [pc, #192]	; (8003638 <HAL_ADC_ConfigChannel+0x7ec>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	099b      	lsrs	r3, r3, #6
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003588:	e002      	b.n	8003590 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3b01      	subs	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f9      	bne.n	800358a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003596:	e03a      	b.n	800360e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a27      	ldr	r2, [pc, #156]	; (800363c <HAL_ADC_ConfigChannel+0x7f0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d113      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x77e>
 80035a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10d      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <HAL_ADC_ConfigChannel+0x7e4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d12a      	bne.n	800360e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035c0:	4619      	mov	r1, r3
 80035c2:	4819      	ldr	r0, [pc, #100]	; (8003628 <HAL_ADC_ConfigChannel+0x7dc>)
 80035c4:	f7ff f969 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035c8:	e021      	b.n	800360e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <HAL_ADC_ConfigChannel+0x7f4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d11c      	bne.n	800360e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d116      	bne.n	800360e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a12      	ldr	r2, [pc, #72]	; (8003630 <HAL_ADC_ConfigChannel+0x7e4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d111      	bne.n	800360e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035f2:	4619      	mov	r1, r3
 80035f4:	480c      	ldr	r0, [pc, #48]	; (8003628 <HAL_ADC_ConfigChannel+0x7dc>)
 80035f6:	f7ff f950 	bl	800289a <LL_ADC_SetCommonPathInternalCh>
 80035fa:	e008      	b.n	800360e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003616:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800361a:	4618      	mov	r0, r3
 800361c:	37d8      	adds	r7, #216	; 0xd8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	80080000 	.word	0x80080000
 8003628:	50040300 	.word	0x50040300
 800362c:	c7520000 	.word	0xc7520000
 8003630:	50040000 	.word	0x50040000
 8003634:	20000000 	.word	0x20000000
 8003638:	053e2d63 	.word	0x053e2d63
 800363c:	cb840000 	.word	0xcb840000
 8003640:	80000001 	.word	0x80000001

08003644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <__NVIC_SetPriorityGrouping+0x44>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003660:	4013      	ands	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800366c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003676:	4a04      	ldr	r2, [pc, #16]	; (8003688 <__NVIC_SetPriorityGrouping+0x44>)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	60d3      	str	r3, [r2, #12]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f003 0307 	and.w	r3, r3, #7
}
 800369a:	4618      	mov	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	db0b      	blt.n	80036d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	4907      	ldr	r1, [pc, #28]	; (80036e0 <__NVIC_EnableIRQ+0x38>)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2001      	movs	r0, #1
 80036ca:	fa00 f202 	lsl.w	r2, r0, r2
 80036ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	e000e100 	.word	0xe000e100

080036e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	db0a      	blt.n	800370e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	490c      	ldr	r1, [pc, #48]	; (8003730 <__NVIC_SetPriority+0x4c>)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	440b      	add	r3, r1
 8003708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800370c:	e00a      	b.n	8003724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4908      	ldr	r1, [pc, #32]	; (8003734 <__NVIC_SetPriority+0x50>)
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	3b04      	subs	r3, #4
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	440b      	add	r3, r1
 8003722:	761a      	strb	r2, [r3, #24]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000e100 	.word	0xe000e100
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f1c3 0307 	rsb	r3, r3, #7
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf28      	it	cs
 8003756:	2304      	movcs	r3, #4
 8003758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3304      	adds	r3, #4
 800375e:	2b06      	cmp	r3, #6
 8003760:	d902      	bls.n	8003768 <NVIC_EncodePriority+0x30>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3b03      	subs	r3, #3
 8003766:	e000      	b.n	800376a <NVIC_EncodePriority+0x32>
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	401a      	ands	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003780:	f04f 31ff 	mov.w	r1, #4294967295
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43d9      	mvns	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	4313      	orrs	r3, r2
         );
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	; 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b0:	d301      	bcc.n	80037b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00f      	b.n	80037d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b6:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <SysTick_Config+0x40>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037be:	210f      	movs	r1, #15
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	f7ff ff8e 	bl	80036e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <SysTick_Config+0x40>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <SysTick_Config+0x40>)
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	e000e010 	.word	0xe000e010

080037e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff29 	bl	8003644 <__NVIC_SetPriorityGrouping>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800380c:	f7ff ff3e 	bl	800368c <__NVIC_GetPriorityGrouping>
 8003810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f7ff ff8e 	bl	8003738 <NVIC_EncodePriority>
 800381c:	4602      	mov	r2, r0
 800381e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff5d 	bl	80036e4 <__NVIC_SetPriority>
}
 800382a:	bf00      	nop
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff31 	bl	80036a8 <__NVIC_EnableIRQ>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ffa2 	bl	80037a0 <SysTick_Config>
 800385c:	4603      	mov	r3, r0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e054      	b.n	8003924 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	7f5b      	ldrb	r3, [r3, #29]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d105      	bne.n	8003890 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fe fad4 	bl	8001e38 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	791b      	ldrb	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10c      	bne.n	80038b8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a22      	ldr	r2, [pc, #136]	; (800392c <HAL_CRC_Init+0xc4>)
 80038a4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0218 	bic.w	r2, r2, #24
 80038b4:	609a      	str	r2, [r3, #8]
 80038b6:	e00c      	b.n	80038d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6899      	ldr	r1, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	461a      	mov	r2, r3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f834 	bl	8003930 <HAL_CRCEx_Polynomial_Set>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e028      	b.n	8003924 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	795b      	ldrb	r3, [r3, #5]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d105      	bne.n	80038e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f04f 32ff 	mov.w	r2, #4294967295
 80038e2:	611a      	str	r2, [r3, #16]
 80038e4:	e004      	b.n	80038f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6912      	ldr	r2, [r2, #16]
 80038ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699a      	ldr	r2, [r3, #24]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	04c11db7 	.word	0x04c11db7

08003930 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003940:	231f      	movs	r3, #31
 8003942:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003944:	bf00      	nop
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1e5a      	subs	r2, r3, #1
 800394a:	613a      	str	r2, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d009      	beq.n	8003964 <HAL_CRCEx_Polynomial_Set+0x34>
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_CRCEx_Polynomial_Set+0x16>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b18      	cmp	r3, #24
 8003968:	d846      	bhi.n	80039f8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800396a:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <HAL_CRCEx_Polynomial_Set+0x40>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	080039ff 	.word	0x080039ff
 8003974:	080039f9 	.word	0x080039f9
 8003978:	080039f9 	.word	0x080039f9
 800397c:	080039f9 	.word	0x080039f9
 8003980:	080039f9 	.word	0x080039f9
 8003984:	080039f9 	.word	0x080039f9
 8003988:	080039f9 	.word	0x080039f9
 800398c:	080039f9 	.word	0x080039f9
 8003990:	080039ed 	.word	0x080039ed
 8003994:	080039f9 	.word	0x080039f9
 8003998:	080039f9 	.word	0x080039f9
 800399c:	080039f9 	.word	0x080039f9
 80039a0:	080039f9 	.word	0x080039f9
 80039a4:	080039f9 	.word	0x080039f9
 80039a8:	080039f9 	.word	0x080039f9
 80039ac:	080039f9 	.word	0x080039f9
 80039b0:	080039e1 	.word	0x080039e1
 80039b4:	080039f9 	.word	0x080039f9
 80039b8:	080039f9 	.word	0x080039f9
 80039bc:	080039f9 	.word	0x080039f9
 80039c0:	080039f9 	.word	0x080039f9
 80039c4:	080039f9 	.word	0x080039f9
 80039c8:	080039f9 	.word	0x080039f9
 80039cc:	080039f9 	.word	0x080039f9
 80039d0:	080039d5 	.word	0x080039d5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d913      	bls.n	8003a02 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80039de:	e010      	b.n	8003a02 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b07      	cmp	r3, #7
 80039e4:	d90f      	bls.n	8003a06 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80039ea:	e00c      	b.n	8003a06 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b0f      	cmp	r3, #15
 80039f0:	d90b      	bls.n	8003a0a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80039f6:	e008      	b.n	8003a0a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
      break;
 80039fc:	e006      	b.n	8003a0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039fe:	bf00      	nop
 8003a00:	e004      	b.n	8003a0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003a02:	bf00      	nop
 8003a04:	e002      	b.n	8003a0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003a06:	bf00      	nop
 8003a08:	e000      	b.n	8003a0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003a0a:	bf00      	nop
  }
  if (status == HAL_OK)
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10d      	bne.n	8003a2e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f023 0118 	bic.w	r1, r3, #24
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e0ac      	b.n	8003ba8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f8b2 	bl	8003bbc <DFSDM_GetChannelFromInstance>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	4a55      	ldr	r2, [pc, #340]	; (8003bb0 <HAL_DFSDM_ChannelInit+0x174>)
 8003a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e09f      	b.n	8003ba8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7fe fa05 	bl	8001e78 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003a6e:	4b51      	ldr	r3, [pc, #324]	; (8003bb4 <HAL_DFSDM_ChannelInit+0x178>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	4a4f      	ldr	r2, [pc, #316]	; (8003bb4 <HAL_DFSDM_ChannelInit+0x178>)
 8003a76:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003a78:	4b4e      	ldr	r3, [pc, #312]	; (8003bb4 <HAL_DFSDM_ChannelInit+0x178>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d125      	bne.n	8003acc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003a80:	4b4d      	ldr	r3, [pc, #308]	; (8003bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a4c      	ldr	r2, [pc, #304]	; (8003bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a8a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003a8c:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4948      	ldr	r1, [pc, #288]	; (8003bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003a9a:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a46      	ldr	r2, [pc, #280]	; (8003bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003aa0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003aa4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	791b      	ldrb	r3, [r3, #4]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d108      	bne.n	8003ac0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003aae:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	493f      	ldr	r1, [pc, #252]	; (8003bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003ac0:	4b3d      	ldr	r3, [pc, #244]	; (8003bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a3c      	ldr	r2, [pc, #240]	; (8003bb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003aca:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003ada:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6819      	ldr	r1, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003aea:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003af0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 020f 	bic.w	r2, r2, #15
 8003b08:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003b30:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6899      	ldr	r1, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	3b01      	subs	r3, #1
 8003b42:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f002 0207 	and.w	r2, r2, #7
 8003b5c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b88:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f810 	bl	8003bbc <DFSDM_GetChannelFromInstance>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4904      	ldr	r1, [pc, #16]	; (8003bb0 <HAL_DFSDM_ChannelInit+0x174>)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	200007f4 	.word	0x200007f4
 8003bb4:	200007f0 	.word	0x200007f0
 8003bb8:	40016000 	.word	0x40016000

08003bbc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <DFSDM_GetChannelFromInstance+0x7c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d102      	bne.n	8003bd2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e02b      	b.n	8003c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <DFSDM_GetChannelFromInstance+0x80>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d102      	bne.n	8003be0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e024      	b.n	8003c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <DFSDM_GetChannelFromInstance+0x84>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d102      	bne.n	8003bee <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003be8:	2302      	movs	r3, #2
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	e01d      	b.n	8003c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <DFSDM_GetChannelFromInstance+0x88>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d102      	bne.n	8003bfc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003bf6:	2304      	movs	r3, #4
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	e016      	b.n	8003c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <DFSDM_GetChannelFromInstance+0x8c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d102      	bne.n	8003c0a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003c04:	2305      	movs	r3, #5
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	e00f      	b.n	8003c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a0f      	ldr	r2, [pc, #60]	; (8003c4c <DFSDM_GetChannelFromInstance+0x90>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d102      	bne.n	8003c18 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003c12:	2306      	movs	r3, #6
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	e008      	b.n	8003c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a0d      	ldr	r2, [pc, #52]	; (8003c50 <DFSDM_GetChannelFromInstance+0x94>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d102      	bne.n	8003c26 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003c20:	2307      	movs	r3, #7
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e001      	b.n	8003c2a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003c26:	2303      	movs	r3, #3
 8003c28:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40016000 	.word	0x40016000
 8003c3c:	40016020 	.word	0x40016020
 8003c40:	40016040 	.word	0x40016040
 8003c44:	40016080 	.word	0x40016080
 8003c48:	400160a0 	.word	0x400160a0
 8003c4c:	400160c0 	.word	0x400160c0
 8003c50:	400160e0 	.word	0x400160e0

08003c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c62:	e166      	b.n	8003f32 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	2101      	movs	r1, #1
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	4013      	ands	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8158 	beq.w	8003f2c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d005      	beq.n	8003c94 <HAL_GPIO_Init+0x40>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d130      	bne.n	8003cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cca:	2201      	movs	r2, #1
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	f003 0201 	and.w	r2, r3, #1
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d017      	beq.n	8003d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4013      	ands	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d123      	bne.n	8003d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	08da      	lsrs	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3208      	adds	r2, #8
 8003d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	220f      	movs	r2, #15
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	08da      	lsrs	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3208      	adds	r2, #8
 8003d80:	6939      	ldr	r1, [r7, #16]
 8003d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	2203      	movs	r2, #3
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0203 	and.w	r2, r3, #3
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80b2 	beq.w	8003f2c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc8:	4b61      	ldr	r3, [pc, #388]	; (8003f50 <HAL_GPIO_Init+0x2fc>)
 8003dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dcc:	4a60      	ldr	r2, [pc, #384]	; (8003f50 <HAL_GPIO_Init+0x2fc>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	6613      	str	r3, [r2, #96]	; 0x60
 8003dd4:	4b5e      	ldr	r3, [pc, #376]	; (8003f50 <HAL_GPIO_Init+0x2fc>)
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003de0:	4a5c      	ldr	r2, [pc, #368]	; (8003f54 <HAL_GPIO_Init+0x300>)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	3302      	adds	r3, #2
 8003de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	220f      	movs	r2, #15
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e0a:	d02b      	beq.n	8003e64 <HAL_GPIO_Init+0x210>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <HAL_GPIO_Init+0x304>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d025      	beq.n	8003e60 <HAL_GPIO_Init+0x20c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a51      	ldr	r2, [pc, #324]	; (8003f5c <HAL_GPIO_Init+0x308>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d01f      	beq.n	8003e5c <HAL_GPIO_Init+0x208>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a50      	ldr	r2, [pc, #320]	; (8003f60 <HAL_GPIO_Init+0x30c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d019      	beq.n	8003e58 <HAL_GPIO_Init+0x204>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a4f      	ldr	r2, [pc, #316]	; (8003f64 <HAL_GPIO_Init+0x310>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <HAL_GPIO_Init+0x200>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a4e      	ldr	r2, [pc, #312]	; (8003f68 <HAL_GPIO_Init+0x314>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00d      	beq.n	8003e50 <HAL_GPIO_Init+0x1fc>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a4d      	ldr	r2, [pc, #308]	; (8003f6c <HAL_GPIO_Init+0x318>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <HAL_GPIO_Init+0x1f8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a4c      	ldr	r2, [pc, #304]	; (8003f70 <HAL_GPIO_Init+0x31c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_GPIO_Init+0x1f4>
 8003e44:	2307      	movs	r3, #7
 8003e46:	e00e      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e48:	2308      	movs	r3, #8
 8003e4a:	e00c      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e4c:	2306      	movs	r3, #6
 8003e4e:	e00a      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e50:	2305      	movs	r3, #5
 8003e52:	e008      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e54:	2304      	movs	r3, #4
 8003e56:	e006      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e004      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e002      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e64:	2300      	movs	r3, #0
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	f002 0203 	and.w	r2, r2, #3
 8003e6c:	0092      	lsls	r2, r2, #2
 8003e6e:	4093      	lsls	r3, r2
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e76:	4937      	ldr	r1, [pc, #220]	; (8003f54 <HAL_GPIO_Init+0x300>)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e84:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ea8:	4a32      	ldr	r2, [pc, #200]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eae:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ed2:	4a28      	ldr	r2, [pc, #160]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ed8:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003efc:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f26:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f47f ae91 	bne.w	8003c64 <HAL_GPIO_Init+0x10>
  }
}
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40010000 	.word	0x40010000
 8003f58:	48000400 	.word	0x48000400
 8003f5c:	48000800 	.word	0x48000800
 8003f60:	48000c00 	.word	0x48000c00
 8003f64:	48001000 	.word	0x48001000
 8003f68:	48001400 	.word	0x48001400
 8003f6c:	48001800 	.word	0x48001800
 8003f70:	48001c00 	.word	0x48001c00
 8003f74:	40010400 	.word	0x40010400

08003f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	807b      	strh	r3, [r7, #2]
 8003f84:	4613      	mov	r3, r2
 8003f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f88:	787b      	ldrb	r3, [r7, #1]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f94:	e002      	b.n	8003f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f96:	887a      	ldrh	r2, [r7, #2]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fb2:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d006      	beq.n	8003fcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fbe:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f806 	bl	8003fd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40010400 	.word	0x40010400

08003fd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e081      	b.n	8004104 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fd ff93 	bl	8001f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2224      	movs	r2, #36	; 0x24
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0201 	bic.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800403e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800404e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d107      	bne.n	8004068 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004064:	609a      	str	r2, [r3, #8]
 8004066:	e006      	b.n	8004076 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004074:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d104      	bne.n	8004088 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004086:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800409a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69d9      	ldr	r1, [r3, #28]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1a      	ldr	r2, [r3, #32]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b20      	cmp	r3, #32
 8004120:	d138      	bne.n	8004194 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800412c:	2302      	movs	r3, #2
 800412e:	e032      	b.n	8004196 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2224      	movs	r2, #36	; 0x24
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800415e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d139      	bne.n	800422c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e033      	b.n	800422e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2224      	movs	r2, #36	; 0x24
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0201 	bic.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	e000      	b.n	800422e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800422c:	2302      	movs	r3, #2
  }
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af02      	add	r7, sp, #8
 8004242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004248:	f7fe fb08 	bl	800285c <HAL_GetTick>
 800424c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
 8004258:	e08f      	b.n	800437a <HAL_OSPI_Init+0x13e>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	2b00      	cmp	r3, #0
 8004266:	f040 8088 	bne.w	800437a <HAL_OSPI_Init+0x13e>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fd ff0a 	bl	8002084 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004270:	f241 3188 	movw	r1, #5000	; 0x1388
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f887 	bl	8004388 <HAL_OSPI_SetTimeout>

     /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1, (OCTOSPI_DCR1_MTYP | OCTOSPI_DCR1_DEVSIZE | OCTOSPI_DCR1_CSHT |
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	4b40      	ldr	r3, [pc, #256]	; (8004384 <HAL_OSPI_Init+0x148>)
 8004282:	4013      	ands	r3, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68d1      	ldr	r1, [r2, #12]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6912      	ldr	r2, [r2, #16]
 800428c:	3a01      	subs	r2, #1
 800428e:	0412      	lsls	r2, r2, #16
 8004290:	4311      	orrs	r1, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6952      	ldr	r2, [r2, #20]
 8004296:	3a01      	subs	r2, #1
 8004298:	0212      	lsls	r2, r2, #8
 800429a:	4311      	orrs	r1, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	69d2      	ldr	r2, [r2, #28]
 80042a0:	4311      	orrs	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	430b      	orrs	r3, r1
 80042a8:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	0412      	lsls	r2, r2, #16
 80042b4:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	021a      	lsls	r2, r3, #8
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2200      	movs	r2, #0
 80042da:	2120      	movs	r1, #32
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fbb7 	bl	8004a50 <OSPI_WaitFlagStateUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d146      	bne.n	800437a <HAL_OSPI_Init+0x13e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	1e5a      	subs	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004322:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d107      	bne.n	8004362 <HAL_OSPI_Init+0x126>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0202 	orr.w	r2, r2, #2
 8004360:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800436a:	d103      	bne.n	8004374 <HAL_OSPI_Init+0x138>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
 8004372:	e002      	b.n	800437a <HAL_OSPI_Init+0x13e>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	f8e0f8fc 	.word	0xf8e0f8fc

08004388 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b092      	sub	sp, #72	; 0x48
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a08      	ldr	r2, [pc, #32]	; (80043e8 <HAL_OSPIM_Config+0x40>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d105      	bne.n	80043d6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80043d4:	e004      	b.n	80043e0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80043d6:	2301      	movs	r3, #1
 80043d8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80043e6:	e01f      	b.n	8004428 <HAL_OSPIM_Config+0x80>
 80043e8:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80043ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80043f0:	3301      	adds	r3, #1
 80043f2:	b2d8      	uxtb	r0, r3
 80043f4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80043f8:	f107 0114 	add.w	r1, r7, #20
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	4619      	mov	r1, r3
 8004408:	f000 fb5a 	bl	8004ac0 <OSPIM_GetConfig>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2208      	movs	r2, #8
 800441c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800441e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004422:	3301      	adds	r3, #1
 8004424:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004428:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800442c:	2b01      	cmp	r3, #1
 800442e:	d9dd      	bls.n	80043ec <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004430:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004434:	2b00      	cmp	r3, #0
 8004436:	f040 82fe 	bne.w	8004a36 <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800443a:	4bcd      	ldr	r3, [pc, #820]	; (8004770 <HAL_OSPIM_Config+0x3c8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004446:	4bca      	ldr	r3, [pc, #808]	; (8004770 <HAL_OSPIM_Config+0x3c8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4ac9      	ldr	r2, [pc, #804]	; (8004770 <HAL_OSPIM_Config+0x3c8>)
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004452:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800445e:	4bc5      	ldr	r3, [pc, #788]	; (8004774 <HAL_OSPIM_Config+0x3cc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800446a:	4bc2      	ldr	r3, [pc, #776]	; (8004774 <HAL_OSPIM_Config+0x3cc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4ac1      	ldr	r2, [pc, #772]	; (8004774 <HAL_OSPIM_Config+0x3cc>)
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004476:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800447a:	f043 0302 	orr.w	r3, r3, #2
 800447e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004482:	49bd      	ldr	r1, [pc, #756]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 8004484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004492:	4413      	add	r3, r2
 8004494:	3b2c      	subs	r3, #44	; 0x2c
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3b01      	subs	r3, #1
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	48b5      	ldr	r0, [pc, #724]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 80044a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044b0:	4413      	add	r3, r2
 80044b2:	3b2c      	subs	r3, #44	; 0x2c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4403      	add	r3, r0
 80044c0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80044c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044d0:	4413      	add	r3, r2
 80044d2:	3b34      	subs	r3, #52	; 0x34
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80ac 	beq.w	8004634 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80044dc:	49a6      	ldr	r1, [pc, #664]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 80044de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044ec:	4413      	add	r3, r2
 80044ee:	3b34      	subs	r3, #52	; 0x34
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	6859      	ldr	r1, [r3, #4]
 80044fa:	489f      	ldr	r0, [pc, #636]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 80044fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800450a:	4413      	add	r3, r2
 800450c:	3b34      	subs	r3, #52	; 0x34
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3b01      	subs	r3, #1
 8004512:	f021 0201 	bic.w	r2, r1, #1
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4403      	add	r3, r0
 800451a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800451c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800452a:	4413      	add	r3, r2
 800452c:	3b30      	subs	r3, #48	; 0x30
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01f      	beq.n	8004574 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004534:	4990      	ldr	r1, [pc, #576]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 8004536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004544:	4413      	add	r3, r2
 8004546:	3b30      	subs	r3, #48	; 0x30
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	6859      	ldr	r1, [r3, #4]
 8004552:	4889      	ldr	r0, [pc, #548]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 8004554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004562:	4413      	add	r3, r2
 8004564:	3b30      	subs	r3, #48	; 0x30
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3b01      	subs	r3, #1
 800456a:	f021 0210 	bic.w	r2, r1, #16
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4403      	add	r3, r0
 8004572:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004574:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004582:	4413      	add	r3, r2
 8004584:	3b28      	subs	r3, #40	; 0x28
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d023      	beq.n	80045d4 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800458c:	497a      	ldr	r1, [pc, #488]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 800458e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800459c:	4413      	add	r3, r2
 800459e:	3b28      	subs	r3, #40	; 0x28
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	6859      	ldr	r1, [r3, #4]
 80045ae:	4872      	ldr	r0, [pc, #456]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 80045b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045be:	4413      	add	r3, r2
 80045c0:	3b28      	subs	r3, #40	; 0x28
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4403      	add	r3, r0
 80045d2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80045d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045e2:	4413      	add	r3, r2
 80045e4:	3b24      	subs	r3, #36	; 0x24
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d023      	beq.n	8004634 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80045ec:	4962      	ldr	r1, [pc, #392]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 80045ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045fc:	4413      	add	r3, r2
 80045fe:	3b24      	subs	r3, #36	; 0x24
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3b01      	subs	r3, #1
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	6859      	ldr	r1, [r3, #4]
 800460e:	485a      	ldr	r0, [pc, #360]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 8004610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800461e:	4413      	add	r3, r2
 8004620:	3b24      	subs	r3, #36	; 0x24
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3b01      	subs	r3, #1
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4403      	add	r3, r0
 8004632:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	6819      	ldr	r1, [r3, #0]
 8004638:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004648:	4413      	add	r3, r2
 800464a:	3b34      	subs	r3, #52	; 0x34
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4299      	cmp	r1, r3
 8004650:	d03c      	beq.n	80046cc <HAL_OSPIM_Config+0x324>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004666:	4413      	add	r3, r2
 8004668:	3b30      	subs	r3, #48	; 0x30
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4299      	cmp	r1, r3
 800466e:	d02d      	beq.n	80046cc <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6899      	ldr	r1, [r3, #8]
 8004674:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004684:	4413      	add	r3, r2
 8004686:	3b2c      	subs	r3, #44	; 0x2c
 8004688:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800468a:	4299      	cmp	r1, r3
 800468c:	d01e      	beq.n	80046cc <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	68d9      	ldr	r1, [r3, #12]
 8004692:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046a2:	4413      	add	r3, r2
 80046a4:	3b28      	subs	r3, #40	; 0x28
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4299      	cmp	r1, r3
 80046aa:	d00f      	beq.n	80046cc <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6919      	ldr	r1, [r3, #16]
 80046b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046c0:	4413      	add	r3, r2
 80046c2:	3b24      	subs	r3, #36	; 0x24
 80046c4:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80046c6:	4299      	cmp	r1, r3
 80046c8:	f040 80e0 	bne.w	800488c <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80046cc:	492a      	ldr	r1, [pc, #168]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 80046ce:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046de:	4413      	add	r3, r2
 80046e0:	3b34      	subs	r3, #52	; 0x34
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	4822      	ldr	r0, [pc, #136]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 80046ee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046fe:	4413      	add	r3, r2
 8004700:	3b34      	subs	r3, #52	; 0x34
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3b01      	subs	r3, #1
 8004706:	f021 0201 	bic.w	r2, r1, #1
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4403      	add	r3, r0
 800470e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004710:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004720:	4413      	add	r3, r2
 8004722:	3b30      	subs	r3, #48	; 0x30
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d028      	beq.n	800477c <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800472a:	4913      	ldr	r1, [pc, #76]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 800472c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800473c:	4413      	add	r3, r2
 800473e:	3b30      	subs	r3, #48	; 0x30
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3b01      	subs	r3, #1
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	6859      	ldr	r1, [r3, #4]
 800474a:	480b      	ldr	r0, [pc, #44]	; (8004778 <HAL_OSPIM_Config+0x3d0>)
 800474c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800475c:	4413      	add	r3, r2
 800475e:	3b30      	subs	r3, #48	; 0x30
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3b01      	subs	r3, #1
 8004764:	f021 0210 	bic.w	r2, r1, #16
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4403      	add	r3, r0
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	e005      	b.n	800477c <HAL_OSPIM_Config+0x3d4>
 8004770:	a0001000 	.word	0xa0001000
 8004774:	a0001400 	.word	0xa0001400
 8004778:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800477c:	49b1      	ldr	r1, [pc, #708]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 800477e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800478e:	4413      	add	r3, r2
 8004790:	3b2c      	subs	r3, #44	; 0x2c
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3b01      	subs	r3, #1
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	48a9      	ldr	r0, [pc, #676]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 800479e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047ae:	4413      	add	r3, r2
 80047b0:	3b2c      	subs	r3, #44	; 0x2c
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4403      	add	r3, r0
 80047be:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80047c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047d0:	4413      	add	r3, r2
 80047d2:	3b28      	subs	r3, #40	; 0x28
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d025      	beq.n	8004826 <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80047da:	499a      	ldr	r1, [pc, #616]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 80047dc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047ec:	4413      	add	r3, r2
 80047ee:	3b28      	subs	r3, #40	; 0x28
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	4891      	ldr	r0, [pc, #580]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 8004800:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004810:	4413      	add	r3, r2
 8004812:	3b28      	subs	r3, #40	; 0x28
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3b01      	subs	r3, #1
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4403      	add	r3, r0
 8004824:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004826:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004836:	4413      	add	r3, r2
 8004838:	3b24      	subs	r3, #36	; 0x24
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d025      	beq.n	800488c <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004840:	4980      	ldr	r1, [pc, #512]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 8004842:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004852:	4413      	add	r3, r2
 8004854:	3b24      	subs	r3, #36	; 0x24
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3b01      	subs	r3, #1
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	4877      	ldr	r0, [pc, #476]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 8004866:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004876:	4413      	add	r3, r2
 8004878:	3b24      	subs	r3, #36	; 0x24
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3b01      	subs	r3, #1
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4403      	add	r3, r0
 800488a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800488c:	4a6d      	ldr	r2, [pc, #436]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	3b01      	subs	r3, #1
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800489e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a0:	025b      	lsls	r3, r3, #9
 80048a2:	431a      	orrs	r2, r3
 80048a4:	4967      	ldr	r1, [pc, #412]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80048b6:	4a63      	ldr	r2, [pc, #396]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3b01      	subs	r3, #1
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f023 0203 	bic.w	r2, r3, #3
 80048c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	431a      	orrs	r2, r3
 80048ce:	495d      	ldr	r1, [pc, #372]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d014      	beq.n	8004912 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80048e8:	4a56      	ldr	r2, [pc, #344]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fc:	015b      	lsls	r3, r3, #5
 80048fe:	431a      	orrs	r2, r3
 8004900:	4950      	ldr	r1, [pc, #320]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	3b01      	subs	r3, #1
 8004908:	f042 0210 	orr.w	r2, r2, #16
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d019      	beq.n	8004952 <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800491e:	4a49      	ldr	r2, [pc, #292]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	3b01      	subs	r3, #1
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004936:	049b      	lsls	r3, r3, #18
 8004938:	431a      	orrs	r2, r3
 800493a:	4942      	ldr	r1, [pc, #264]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	3b01      	subs	r3, #1
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	605a      	str	r2, [r3, #4]
 8004950:	e01c      	b.n	800498c <HAL_OSPIM_Config+0x5e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d018      	beq.n	800498c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800495a:	4a3a      	ldr	r2, [pc, #232]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	3b01      	subs	r3, #1
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004972:	069b      	lsls	r3, r3, #26
 8004974:	431a      	orrs	r2, r3
 8004976:	4933      	ldr	r1, [pc, #204]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	3b01      	subs	r3, #1
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d019      	beq.n	80049cc <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004998:	4a2a      	ldr	r2, [pc, #168]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	3b01      	subs	r3, #1
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80049ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b0:	049b      	lsls	r3, r3, #18
 80049b2:	431a      	orrs	r2, r3
 80049b4:	4923      	ldr	r1, [pc, #140]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	e01c      	b.n	8004a06 <HAL_OSPIM_Config+0x65e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d018      	beq.n	8004a06 <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80049d4:	4a1b      	ldr	r2, [pc, #108]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	3b01      	subs	r3, #1
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80049ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ec:	069b      	lsls	r3, r3, #26
 80049ee:	431a      	orrs	r2, r3
 80049f0:	4914      	ldr	r1, [pc, #80]	; (8004a44 <HAL_OSPIM_Config+0x69c>)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004a06:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <HAL_OSPIM_Config+0x6a0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <HAL_OSPIM_Config+0x6a0>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004a1e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004a2a:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <HAL_OSPIM_Config+0x6a4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a07      	ldr	r2, [pc, #28]	; (8004a4c <HAL_OSPIM_Config+0x6a4>)
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004a36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3748      	adds	r7, #72	; 0x48
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	50061c00 	.word	0x50061c00
 8004a48:	a0001000 	.word	0xa0001000
 8004a4c:	a0001400 	.word	0xa0001400

08004a50 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004a60:	e01a      	b.n	8004a98 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d016      	beq.n	8004a98 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6a:	f7fd fef7 	bl	800285c <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d302      	bcc.n	8004a80 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10b      	bne.n	8004a98 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a86:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8c:	f043 0201 	orr.w	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e00e      	b.n	8004ab6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6a1a      	ldr	r2, [r3, #32]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bf14      	ite	ne
 8004aa6:	2301      	movne	r3, #1
 8004aa8:	2300      	moveq	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d1d6      	bne.n	8004a62 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	6039      	str	r1, [r7, #0]
 8004aca:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <OSPIM_GetConfig+0x26>
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d802      	bhi.n	8004ae6 <OSPIM_GetConfig+0x26>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
 8004aea:	e08e      	b.n	8004c0a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2200      	movs	r2, #0
 8004af6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2200      	movs	r2, #0
 8004afc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2200      	movs	r2, #0
 8004b02:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2200      	movs	r2, #0
 8004b08:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d101      	bne.n	8004b14 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004b10:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <OSPIM_GetConfig+0x158>)
 8004b12:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e074      	b.n	8004c04 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004b1a:	4a40      	ldr	r2, [pc, #256]	; (8004c1c <OSPIM_GetConfig+0x15c>)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4053      	eors	r3, r2
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d103      	bne.n	8004b46 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4053      	eors	r3, r2
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4053      	eors	r3, r2
 8004b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d103      	bne.n	8004b86 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d018      	beq.n	8004bc2 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4053      	eors	r3, r2
 8004b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d111      	bne.n	8004bc2 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	60da      	str	r2, [r3, #12]
 8004bb4:	e005      	b.n	8004bc2 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d018      	beq.n	8004bfe <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4053      	eors	r3, r2
 8004bd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d111      	bne.n	8004bfe <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3301      	adds	r3, #1
 8004be8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	611a      	str	r2, [r3, #16]
 8004bf0:	e005      	b.n	8004bfe <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3301      	adds	r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d987      	bls.n	8004b1a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	04040222 	.word	0x04040222
 8004c1c:	50061c00 	.word	0x50061c00

08004c20 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a04      	ldr	r2, [pc, #16]	; (8004c3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2e:	6013      	str	r3, [r2, #0]
}
 8004c30:	bf00      	nop
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40007000 	.word	0x40007000

08004c40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c44:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c50:	d102      	bne.n	8004c58 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c56:	e00b      	b.n	8004c70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004c58:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c66:	d102      	bne.n	8004c6e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c6c:	e000      	b.n	8004c70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004c6e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40007000 	.word	0x40007000

08004c80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d141      	bne.n	8004d12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c8e:	4b4b      	ldr	r3, [pc, #300]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9a:	d131      	bne.n	8004d00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c9c:	4b47      	ldr	r3, [pc, #284]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca2:	4a46      	ldr	r2, [pc, #280]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cac:	4b43      	ldr	r3, [pc, #268]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cb4:	4a41      	ldr	r2, [pc, #260]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004cbc:	4b40      	ldr	r3, [pc, #256]	; (8004dc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2232      	movs	r2, #50	; 0x32
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	4a3f      	ldr	r2, [pc, #252]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ccc:	0c9b      	lsrs	r3, r3, #18
 8004cce:	3301      	adds	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cd2:	e002      	b.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cda:	4b38      	ldr	r3, [pc, #224]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce6:	d102      	bne.n	8004cee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f2      	bne.n	8004cd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cee:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfa:	d158      	bne.n	8004dae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e057      	b.n	8004db0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d00:	4b2e      	ldr	r3, [pc, #184]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d06:	4a2d      	ldr	r2, [pc, #180]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d10:	e04d      	b.n	8004dae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d18:	d141      	bne.n	8004d9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d1a:	4b28      	ldr	r3, [pc, #160]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d26:	d131      	bne.n	8004d8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d2e:	4a23      	ldr	r2, [pc, #140]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d38:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d40:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004d48:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2232      	movs	r2, #50	; 0x32
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	0c9b      	lsrs	r3, r3, #18
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d5e:	e002      	b.n	8004d66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d66:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d72:	d102      	bne.n	8004d7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f2      	bne.n	8004d60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d86:	d112      	bne.n	8004dae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e011      	b.n	8004db0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d92:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d9c:	e007      	b.n	8004dae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004da6:	4a05      	ldr	r2, [pc, #20]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	40007000 	.word	0x40007000
 8004dc0:	20000000 	.word	0x20000000
 8004dc4:	431bde83 	.word	0x431bde83

08004dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f000 bc16 	b.w	8005608 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ddc:	4ba0      	ldr	r3, [pc, #640]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 030c 	and.w	r3, r3, #12
 8004de4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004de6:	4b9e      	ldr	r3, [pc, #632]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80e4 	beq.w	8004fc6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <HAL_RCC_OscConfig+0x4c>
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b0c      	cmp	r3, #12
 8004e08:	f040 808b 	bne.w	8004f22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	f040 8087 	bne.w	8004f22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e14:	4b92      	ldr	r3, [pc, #584]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_OscConfig+0x64>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e3ed      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	4b8b      	ldr	r3, [pc, #556]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <HAL_RCC_OscConfig+0x7e>
 8004e3c:	4b88      	ldr	r3, [pc, #544]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e44:	e005      	b.n	8004e52 <HAL_RCC_OscConfig+0x8a>
 8004e46:	4b86      	ldr	r3, [pc, #536]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d223      	bcs.n	8004e9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fdca 	bl	80059f4 <RCC_SetFlashLatencyFromMSIRange>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e3ce      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e6a:	4b7d      	ldr	r3, [pc, #500]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a7c      	ldr	r2, [pc, #496]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004e70:	f043 0308 	orr.w	r3, r3, #8
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	4b7a      	ldr	r3, [pc, #488]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	4977      	ldr	r1, [pc, #476]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e88:	4b75      	ldr	r3, [pc, #468]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	021b      	lsls	r3, r3, #8
 8004e96:	4972      	ldr	r1, [pc, #456]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	604b      	str	r3, [r1, #4]
 8004e9c:	e025      	b.n	8004eea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e9e:	4b70      	ldr	r3, [pc, #448]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a6f      	ldr	r2, [pc, #444]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004ea4:	f043 0308 	orr.w	r3, r3, #8
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	4b6d      	ldr	r3, [pc, #436]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	496a      	ldr	r1, [pc, #424]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ebc:	4b68      	ldr	r3, [pc, #416]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	4965      	ldr	r1, [pc, #404]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fd8a 	bl	80059f4 <RCC_SetFlashLatencyFromMSIRange>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e38e      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004eea:	f000 fcbf 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	4b5b      	ldr	r3, [pc, #364]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	091b      	lsrs	r3, r3, #4
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	495a      	ldr	r1, [pc, #360]	; (8005064 <HAL_RCC_OscConfig+0x29c>)
 8004efc:	5ccb      	ldrb	r3, [r1, r3]
 8004efe:	f003 031f 	and.w	r3, r3, #31
 8004f02:	fa22 f303 	lsr.w	r3, r2, r3
 8004f06:	4a58      	ldr	r2, [pc, #352]	; (8005068 <HAL_RCC_OscConfig+0x2a0>)
 8004f08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f0a:	4b58      	ldr	r3, [pc, #352]	; (800506c <HAL_RCC_OscConfig+0x2a4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fd fc54 	bl	80027bc <HAL_InitTick>
 8004f14:	4603      	mov	r3, r0
 8004f16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d052      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	e372      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d032      	beq.n	8004f90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f2a:	4b4d      	ldr	r3, [pc, #308]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a4c      	ldr	r2, [pc, #304]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f36:	f7fd fc91 	bl	800285c <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f3e:	f7fd fc8d 	bl	800285c <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e35b      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f50:	4b43      	ldr	r3, [pc, #268]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f0      	beq.n	8004f3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f5c:	4b40      	ldr	r3, [pc, #256]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a3f      	ldr	r2, [pc, #252]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004f62:	f043 0308 	orr.w	r3, r3, #8
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4b3d      	ldr	r3, [pc, #244]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	493a      	ldr	r1, [pc, #232]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f7a:	4b39      	ldr	r3, [pc, #228]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	4935      	ldr	r1, [pc, #212]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	604b      	str	r3, [r1, #4]
 8004f8e:	e01a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f90:	4b33      	ldr	r3, [pc, #204]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a32      	ldr	r2, [pc, #200]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f9c:	f7fd fc5e 	bl	800285c <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fa4:	f7fd fc5a 	bl	800285c <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e328      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fb6:	4b2a      	ldr	r3, [pc, #168]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x1dc>
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d073      	beq.n	80050ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d005      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x21c>
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b0c      	cmp	r3, #12
 8004fdc:	d10e      	bne.n	8004ffc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d10b      	bne.n	8004ffc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe4:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d063      	beq.n	80050b8 <HAL_RCC_OscConfig+0x2f0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d15f      	bne.n	80050b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e305      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005004:	d106      	bne.n	8005014 <HAL_RCC_OscConfig+0x24c>
 8005006:	4b16      	ldr	r3, [pc, #88]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 800500c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	e01d      	b.n	8005050 <HAL_RCC_OscConfig+0x288>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800501c:	d10c      	bne.n	8005038 <HAL_RCC_OscConfig+0x270>
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8005024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a0c      	ldr	r2, [pc, #48]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8005030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e00b      	b.n	8005050 <HAL_RCC_OscConfig+0x288>
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a08      	ldr	r2, [pc, #32]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 800503e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a05      	ldr	r2, [pc, #20]	; (8005060 <HAL_RCC_OscConfig+0x298>)
 800504a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800504e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01b      	beq.n	8005090 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005058:	f7fd fc00 	bl	800285c <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800505e:	e010      	b.n	8005082 <HAL_RCC_OscConfig+0x2ba>
 8005060:	40021000 	.word	0x40021000
 8005064:	0800cac0 	.word	0x0800cac0
 8005068:	20000000 	.word	0x20000000
 800506c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005070:	f7fd fbf4 	bl	800285c <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	; 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e2c2      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005082:	4baf      	ldr	r3, [pc, #700]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x2a8>
 800508e:	e014      	b.n	80050ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fd fbe4 	bl	800285c <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005098:	f7fd fbe0 	bl	800285c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	; 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e2ae      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050aa:	4ba5      	ldr	r3, [pc, #660]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x2d0>
 80050b6:	e000      	b.n	80050ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d060      	beq.n	8005188 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_OscConfig+0x310>
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b0c      	cmp	r3, #12
 80050d0:	d119      	bne.n	8005106 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d116      	bne.n	8005106 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050d8:	4b99      	ldr	r3, [pc, #612]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_OscConfig+0x328>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e28b      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f0:	4b93      	ldr	r3, [pc, #588]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	061b      	lsls	r3, r3, #24
 80050fe:	4990      	ldr	r1, [pc, #576]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005100:	4313      	orrs	r3, r2
 8005102:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005104:	e040      	b.n	8005188 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d023      	beq.n	8005156 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800510e:	4b8c      	ldr	r3, [pc, #560]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a8b      	ldr	r2, [pc, #556]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511a:	f7fd fb9f 	bl	800285c <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005122:	f7fd fb9b 	bl	800285c <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e269      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005134:	4b82      	ldr	r3, [pc, #520]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005140:	4b7f      	ldr	r3, [pc, #508]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	061b      	lsls	r3, r3, #24
 800514e:	497c      	ldr	r1, [pc, #496]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005150:	4313      	orrs	r3, r2
 8005152:	604b      	str	r3, [r1, #4]
 8005154:	e018      	b.n	8005188 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005156:	4b7a      	ldr	r3, [pc, #488]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a79      	ldr	r2, [pc, #484]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 800515c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005162:	f7fd fb7b 	bl	800285c <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005168:	e008      	b.n	800517c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516a:	f7fd fb77 	bl	800285c <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e245      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800517c:	4b70      	ldr	r3, [pc, #448]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1f0      	bne.n	800516a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d03c      	beq.n	800520e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01c      	beq.n	80051d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800519c:	4b68      	ldr	r3, [pc, #416]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a2:	4a67      	ldr	r2, [pc, #412]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fd fb56 	bl	800285c <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b4:	f7fd fb52 	bl	800285c <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e220      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051c6:	4b5e      	ldr	r3, [pc, #376]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80051c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0ef      	beq.n	80051b4 <HAL_RCC_OscConfig+0x3ec>
 80051d4:	e01b      	b.n	800520e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051d6:	4b5a      	ldr	r3, [pc, #360]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80051d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051dc:	4a58      	ldr	r2, [pc, #352]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e6:	f7fd fb39 	bl	800285c <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ee:	f7fd fb35 	bl	800285c <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e203      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005200:	4b4f      	ldr	r3, [pc, #316]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1ef      	bne.n	80051ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80a6 	beq.w	8005368 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800521c:	2300      	movs	r3, #0
 800521e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005220:	4b47      	ldr	r3, [pc, #284]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10d      	bne.n	8005248 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800522c:	4b44      	ldr	r3, [pc, #272]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 800522e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005230:	4a43      	ldr	r2, [pc, #268]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005236:	6593      	str	r3, [r2, #88]	; 0x58
 8005238:	4b41      	ldr	r3, [pc, #260]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005244:	2301      	movs	r3, #1
 8005246:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005248:	4b3e      	ldr	r3, [pc, #248]	; (8005344 <HAL_RCC_OscConfig+0x57c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d118      	bne.n	8005286 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005254:	4b3b      	ldr	r3, [pc, #236]	; (8005344 <HAL_RCC_OscConfig+0x57c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a3a      	ldr	r2, [pc, #232]	; (8005344 <HAL_RCC_OscConfig+0x57c>)
 800525a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800525e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005260:	f7fd fafc 	bl	800285c <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005268:	f7fd faf8 	bl	800285c <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e1c6      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800527a:	4b32      	ldr	r3, [pc, #200]	; (8005344 <HAL_RCC_OscConfig+0x57c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d108      	bne.n	80052a0 <HAL_RCC_OscConfig+0x4d8>
 800528e:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005294:	4a2a      	ldr	r2, [pc, #168]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800529e:	e024      	b.n	80052ea <HAL_RCC_OscConfig+0x522>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b05      	cmp	r3, #5
 80052a6:	d110      	bne.n	80052ca <HAL_RCC_OscConfig+0x502>
 80052a8:	4b25      	ldr	r3, [pc, #148]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ae:	4a24      	ldr	r2, [pc, #144]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052b0:	f043 0304 	orr.w	r3, r3, #4
 80052b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052b8:	4b21      	ldr	r3, [pc, #132]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052be:	4a20      	ldr	r2, [pc, #128]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052c8:	e00f      	b.n	80052ea <HAL_RCC_OscConfig+0x522>
 80052ca:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d0:	4a1b      	ldr	r2, [pc, #108]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052da:	4b19      	ldr	r3, [pc, #100]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e0:	4a17      	ldr	r2, [pc, #92]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 80052e2:	f023 0304 	bic.w	r3, r3, #4
 80052e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d016      	beq.n	8005320 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f2:	f7fd fab3 	bl	800285c <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f8:	e00a      	b.n	8005310 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fa:	f7fd faaf 	bl	800285c <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3288 	movw	r2, #5000	; 0x1388
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e17b      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_OscConfig+0x578>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0ed      	beq.n	80052fa <HAL_RCC_OscConfig+0x532>
 800531e:	e01a      	b.n	8005356 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005320:	f7fd fa9c 	bl	800285c <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005326:	e00f      	b.n	8005348 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005328:	f7fd fa98 	bl	800285c <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	; 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d906      	bls.n	8005348 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e164      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
 800533e:	bf00      	nop
 8005340:	40021000 	.word	0x40021000
 8005344:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005348:	4ba8      	ldr	r3, [pc, #672]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e8      	bne.n	8005328 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005356:	7ffb      	ldrb	r3, [r7, #31]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d105      	bne.n	8005368 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535c:	4ba3      	ldr	r3, [pc, #652]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 800535e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005360:	4aa2      	ldr	r2, [pc, #648]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 8005362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005366:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d03c      	beq.n	80053ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01c      	beq.n	80053b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800537c:	4b9b      	ldr	r3, [pc, #620]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 800537e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005382:	4a9a      	ldr	r2, [pc, #616]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538c:	f7fd fa66 	bl	800285c <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005394:	f7fd fa62 	bl	800285c <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e130      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053a6:	4b91      	ldr	r3, [pc, #580]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80053a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0ef      	beq.n	8005394 <HAL_RCC_OscConfig+0x5cc>
 80053b4:	e01b      	b.n	80053ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053b6:	4b8d      	ldr	r3, [pc, #564]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80053b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053bc:	4a8b      	ldr	r2, [pc, #556]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c6:	f7fd fa49 	bl	800285c <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053ce:	f7fd fa45 	bl	800285c <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e113      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053e0:	4b82      	ldr	r3, [pc, #520]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80053e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1ef      	bne.n	80053ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 8107 	beq.w	8005606 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	f040 80cb 	bne.w	8005598 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005402:	4b7a      	ldr	r3, [pc, #488]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f003 0203 	and.w	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	429a      	cmp	r2, r3
 8005414:	d12c      	bne.n	8005470 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005420:	3b01      	subs	r3, #1
 8005422:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005424:	429a      	cmp	r2, r3
 8005426:	d123      	bne.n	8005470 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005434:	429a      	cmp	r2, r3
 8005436:	d11b      	bne.n	8005470 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005444:	429a      	cmp	r2, r3
 8005446:	d113      	bne.n	8005470 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005452:	085b      	lsrs	r3, r3, #1
 8005454:	3b01      	subs	r3, #1
 8005456:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005458:	429a      	cmp	r2, r3
 800545a:	d109      	bne.n	8005470 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	085b      	lsrs	r3, r3, #1
 8005468:	3b01      	subs	r3, #1
 800546a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d06d      	beq.n	800554c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b0c      	cmp	r3, #12
 8005474:	d068      	beq.n	8005548 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005476:	4b5d      	ldr	r3, [pc, #372]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d105      	bne.n	800548e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005482:	4b5a      	ldr	r3, [pc, #360]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0ba      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005492:	4b56      	ldr	r3, [pc, #344]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a55      	ldr	r2, [pc, #340]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 8005498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800549c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800549e:	f7fd f9dd 	bl	800285c <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a6:	f7fd f9d9 	bl	800285c <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e0a7      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b8:	4b4c      	ldr	r3, [pc, #304]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f0      	bne.n	80054a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054c4:	4b49      	ldr	r3, [pc, #292]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	4b49      	ldr	r3, [pc, #292]	; (80055f0 <HAL_RCC_OscConfig+0x828>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054d4:	3a01      	subs	r2, #1
 80054d6:	0112      	lsls	r2, r2, #4
 80054d8:	4311      	orrs	r1, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054de:	0212      	lsls	r2, r2, #8
 80054e0:	4311      	orrs	r1, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054e6:	0852      	lsrs	r2, r2, #1
 80054e8:	3a01      	subs	r2, #1
 80054ea:	0552      	lsls	r2, r2, #21
 80054ec:	4311      	orrs	r1, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054f2:	0852      	lsrs	r2, r2, #1
 80054f4:	3a01      	subs	r2, #1
 80054f6:	0652      	lsls	r2, r2, #25
 80054f8:	4311      	orrs	r1, r2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054fe:	06d2      	lsls	r2, r2, #27
 8005500:	430a      	orrs	r2, r1
 8005502:	493a      	ldr	r1, [pc, #232]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 8005504:	4313      	orrs	r3, r2
 8005506:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005508:	4b38      	ldr	r3, [pc, #224]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a37      	ldr	r2, [pc, #220]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 800550e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005512:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005514:	4b35      	ldr	r3, [pc, #212]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a34      	ldr	r2, [pc, #208]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 800551a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800551e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005520:	f7fd f99c 	bl	800285c <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005528:	f7fd f998 	bl	800285c <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e066      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800553a:	4b2c      	ldr	r3, [pc, #176]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005546:	e05e      	b.n	8005606 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e05d      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800554c:	4b27      	ldr	r3, [pc, #156]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d156      	bne.n	8005606 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005558:	4b24      	ldr	r3, [pc, #144]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a23      	ldr	r2, [pc, #140]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 800555e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005562:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005564:	4b21      	ldr	r3, [pc, #132]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4a20      	ldr	r2, [pc, #128]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 800556a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800556e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005570:	f7fd f974 	bl	800285c <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005578:	f7fd f970 	bl	800285c <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e03e      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800558a:	4b18      	ldr	r3, [pc, #96]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f0      	beq.n	8005578 <HAL_RCC_OscConfig+0x7b0>
 8005596:	e036      	b.n	8005606 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b0c      	cmp	r3, #12
 800559c:	d031      	beq.n	8005602 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559e:	4b13      	ldr	r3, [pc, #76]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a12      	ldr	r2, [pc, #72]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80055a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80055aa:	4b10      	ldr	r3, [pc, #64]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d105      	bne.n	80055c2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80055b6:	4b0d      	ldr	r3, [pc, #52]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	4a0c      	ldr	r2, [pc, #48]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80055bc:	f023 0303 	bic.w	r3, r3, #3
 80055c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80055c2:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	4a09      	ldr	r2, [pc, #36]	; (80055ec <HAL_RCC_OscConfig+0x824>)
 80055c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80055cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d2:	f7fd f943 	bl	800285c <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d8:	e00c      	b.n	80055f4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055da:	f7fd f93f 	bl	800285c <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d905      	bls.n	80055f4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e00d      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
 80055ec:	40021000 	.word	0x40021000
 80055f0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <HAL_RCC_OscConfig+0x848>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1ec      	bne.n	80055da <HAL_RCC_OscConfig+0x812>
 8005600:	e001      	b.n	8005606 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40021000 	.word	0x40021000

08005614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e10f      	b.n	800584c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800562c:	4b89      	ldr	r3, [pc, #548]	; (8005854 <HAL_RCC_ClockConfig+0x240>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d910      	bls.n	800565c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563a:	4b86      	ldr	r3, [pc, #536]	; (8005854 <HAL_RCC_ClockConfig+0x240>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f023 020f 	bic.w	r2, r3, #15
 8005642:	4984      	ldr	r1, [pc, #528]	; (8005854 <HAL_RCC_ClockConfig+0x240>)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	4313      	orrs	r3, r2
 8005648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800564a:	4b82      	ldr	r3, [pc, #520]	; (8005854 <HAL_RCC_ClockConfig+0x240>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d001      	beq.n	800565c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0f7      	b.n	800584c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8089 	beq.w	800577c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b03      	cmp	r3, #3
 8005670:	d133      	bne.n	80056da <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005672:	4b79      	ldr	r3, [pc, #484]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e0e4      	b.n	800584c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005682:	f000 fa11 	bl	8005aa8 <RCC_GetSysClockFreqFromPLLSource>
 8005686:	4603      	mov	r3, r0
 8005688:	4a74      	ldr	r2, [pc, #464]	; (800585c <HAL_RCC_ClockConfig+0x248>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d955      	bls.n	800573a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800568e:	4b72      	ldr	r3, [pc, #456]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800569a:	4b6f      	ldr	r3, [pc, #444]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056a2:	4a6d      	ldr	r2, [pc, #436]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 80056a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056aa:	2380      	movs	r3, #128	; 0x80
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	e044      	b.n	800573a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d03e      	beq.n	800573a <HAL_RCC_ClockConfig+0x126>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d13a      	bne.n	800573a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056c4:	4b64      	ldr	r3, [pc, #400]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056cc:	4a62      	ldr	r2, [pc, #392]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 80056ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e02f      	b.n	800573a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d107      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056e2:	4b5d      	ldr	r3, [pc, #372]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d115      	bne.n	800571a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e0ac      	b.n	800584c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d107      	bne.n	800570a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056fa:	4b57      	ldr	r3, [pc, #348]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d109      	bne.n	800571a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e0a0      	b.n	800584c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800570a:	4b53      	ldr	r3, [pc, #332]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e098      	b.n	800584c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800571a:	f000 f8a7 	bl	800586c <HAL_RCC_GetSysClockFreq>
 800571e:	4603      	mov	r3, r0
 8005720:	4a4e      	ldr	r2, [pc, #312]	; (800585c <HAL_RCC_ClockConfig+0x248>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d909      	bls.n	800573a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005726:	4b4c      	ldr	r3, [pc, #304]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800572e:	4a4a      	ldr	r2, [pc, #296]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 8005730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005734:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005736:	2380      	movs	r3, #128	; 0x80
 8005738:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800573a:	4b47      	ldr	r3, [pc, #284]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f023 0203 	bic.w	r2, r3, #3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	4944      	ldr	r1, [pc, #272]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 8005748:	4313      	orrs	r3, r2
 800574a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800574c:	f7fd f886 	bl	800285c <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005752:	e00a      	b.n	800576a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005754:	f7fd f882 	bl	800285c <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005762:	4293      	cmp	r3, r2
 8005764:	d901      	bls.n	800576a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e070      	b.n	800584c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576a:	4b3b      	ldr	r3, [pc, #236]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 020c 	and.w	r2, r3, #12
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	429a      	cmp	r2, r3
 800577a:	d1eb      	bne.n	8005754 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d009      	beq.n	800579c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005788:	4b33      	ldr	r3, [pc, #204]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	4930      	ldr	r1, [pc, #192]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 8005796:	4313      	orrs	r3, r2
 8005798:	608b      	str	r3, [r1, #8]
 800579a:	e008      	b.n	80057ae <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b80      	cmp	r3, #128	; 0x80
 80057a0:	d105      	bne.n	80057ae <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057a2:	4b2d      	ldr	r3, [pc, #180]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4a2c      	ldr	r2, [pc, #176]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 80057a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ac:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ae:	4b29      	ldr	r3, [pc, #164]	; (8005854 <HAL_RCC_ClockConfig+0x240>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d210      	bcs.n	80057de <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057bc:	4b25      	ldr	r3, [pc, #148]	; (8005854 <HAL_RCC_ClockConfig+0x240>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f023 020f 	bic.w	r2, r3, #15
 80057c4:	4923      	ldr	r1, [pc, #140]	; (8005854 <HAL_RCC_ClockConfig+0x240>)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057cc:	4b21      	ldr	r3, [pc, #132]	; (8005854 <HAL_RCC_ClockConfig+0x240>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d001      	beq.n	80057de <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e036      	b.n	800584c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d008      	beq.n	80057fc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057ea:	4b1b      	ldr	r3, [pc, #108]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	4918      	ldr	r1, [pc, #96]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005808:	4b13      	ldr	r3, [pc, #76]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4910      	ldr	r1, [pc, #64]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 8005818:	4313      	orrs	r3, r2
 800581a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800581c:	f000 f826 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8005820:	4602      	mov	r2, r0
 8005822:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <HAL_RCC_ClockConfig+0x244>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	490c      	ldr	r1, [pc, #48]	; (8005860 <HAL_RCC_ClockConfig+0x24c>)
 800582e:	5ccb      	ldrb	r3, [r1, r3]
 8005830:	f003 031f 	and.w	r3, r3, #31
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
 8005838:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <HAL_RCC_ClockConfig+0x250>)
 800583a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <HAL_RCC_ClockConfig+0x254>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f7fc ffbb 	bl	80027bc <HAL_InitTick>
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]

  return status;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40022000 	.word	0x40022000
 8005858:	40021000 	.word	0x40021000
 800585c:	04c4b400 	.word	0x04c4b400
 8005860:	0800cac0 	.word	0x0800cac0
 8005864:	20000000 	.word	0x20000000
 8005868:	20000004 	.word	0x20000004

0800586c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800586c:	b480      	push	{r7}
 800586e:	b089      	sub	sp, #36	; 0x24
 8005870:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	2300      	movs	r3, #0
 8005878:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800587a:	4b3e      	ldr	r3, [pc, #248]	; (8005974 <HAL_RCC_GetSysClockFreq+0x108>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 030c 	and.w	r3, r3, #12
 8005882:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005884:	4b3b      	ldr	r3, [pc, #236]	; (8005974 <HAL_RCC_GetSysClockFreq+0x108>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <HAL_RCC_GetSysClockFreq+0x34>
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b0c      	cmp	r3, #12
 8005898:	d121      	bne.n	80058de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d11e      	bne.n	80058de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058a0:	4b34      	ldr	r3, [pc, #208]	; (8005974 <HAL_RCC_GetSysClockFreq+0x108>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d107      	bne.n	80058bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058ac:	4b31      	ldr	r3, [pc, #196]	; (8005974 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b2:	0a1b      	lsrs	r3, r3, #8
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	e005      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058bc:	4b2d      	ldr	r3, [pc, #180]	; (8005974 <HAL_RCC_GetSysClockFreq+0x108>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	091b      	lsrs	r3, r3, #4
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058c8:	4a2b      	ldr	r2, [pc, #172]	; (8005978 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10d      	bne.n	80058f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058dc:	e00a      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d102      	bne.n	80058ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058e4:	4b25      	ldr	r3, [pc, #148]	; (800597c <HAL_RCC_GetSysClockFreq+0x110>)
 80058e6:	61bb      	str	r3, [r7, #24]
 80058e8:	e004      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d101      	bne.n	80058f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058f0:	4b23      	ldr	r3, [pc, #140]	; (8005980 <HAL_RCC_GetSysClockFreq+0x114>)
 80058f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b0c      	cmp	r3, #12
 80058f8:	d134      	bne.n	8005964 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058fa:	4b1e      	ldr	r3, [pc, #120]	; (8005974 <HAL_RCC_GetSysClockFreq+0x108>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d003      	beq.n	8005912 <HAL_RCC_GetSysClockFreq+0xa6>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b03      	cmp	r3, #3
 800590e:	d003      	beq.n	8005918 <HAL_RCC_GetSysClockFreq+0xac>
 8005910:	e005      	b.n	800591e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005912:	4b1a      	ldr	r3, [pc, #104]	; (800597c <HAL_RCC_GetSysClockFreq+0x110>)
 8005914:	617b      	str	r3, [r7, #20]
      break;
 8005916:	e005      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005918:	4b19      	ldr	r3, [pc, #100]	; (8005980 <HAL_RCC_GetSysClockFreq+0x114>)
 800591a:	617b      	str	r3, [r7, #20]
      break;
 800591c:	e002      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	617b      	str	r3, [r7, #20]
      break;
 8005922:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005924:	4b13      	ldr	r3, [pc, #76]	; (8005974 <HAL_RCC_GetSysClockFreq+0x108>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	091b      	lsrs	r3, r3, #4
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	3301      	adds	r3, #1
 8005930:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005932:	4b10      	ldr	r3, [pc, #64]	; (8005974 <HAL_RCC_GetSysClockFreq+0x108>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	0a1b      	lsrs	r3, r3, #8
 8005938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	fb02 f203 	mul.w	r2, r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	fbb2 f3f3 	udiv	r3, r2, r3
 8005948:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800594a:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <HAL_RCC_GetSysClockFreq+0x108>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	0e5b      	lsrs	r3, r3, #25
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	3301      	adds	r3, #1
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005962:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005964:	69bb      	ldr	r3, [r7, #24]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3724      	adds	r7, #36	; 0x24
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40021000 	.word	0x40021000
 8005978:	0800cad8 	.word	0x0800cad8
 800597c:	00f42400 	.word	0x00f42400
 8005980:	007a1200 	.word	0x007a1200

08005984 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005988:	4b03      	ldr	r3, [pc, #12]	; (8005998 <HAL_RCC_GetHCLKFreq+0x14>)
 800598a:	681b      	ldr	r3, [r3, #0]
}
 800598c:	4618      	mov	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20000000 	.word	0x20000000

0800599c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059a0:	f7ff fff0 	bl	8005984 <HAL_RCC_GetHCLKFreq>
 80059a4:	4602      	mov	r2, r0
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	0a1b      	lsrs	r3, r3, #8
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	4904      	ldr	r1, [pc, #16]	; (80059c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059b2:	5ccb      	ldrb	r3, [r1, r3]
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021000 	.word	0x40021000
 80059c4:	0800cad0 	.word	0x0800cad0

080059c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059cc:	f7ff ffda 	bl	8005984 <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	0adb      	lsrs	r3, r3, #11
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4904      	ldr	r1, [pc, #16]	; (80059f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40021000 	.word	0x40021000
 80059f0:	0800cad0 	.word	0x0800cad0

080059f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a00:	4b27      	ldr	r3, [pc, #156]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a0c:	f7ff f918 	bl	8004c40 <HAL_PWREx_GetVoltageRange>
 8005a10:	6178      	str	r0, [r7, #20]
 8005a12:	e014      	b.n	8005a3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a14:	4b22      	ldr	r3, [pc, #136]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a18:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8005a20:	4b1f      	ldr	r3, [pc, #124]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a2c:	f7ff f908 	bl	8004c40 <HAL_PWREx_GetVoltageRange>
 8005a30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a32:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a44:	d10b      	bne.n	8005a5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b80      	cmp	r3, #128	; 0x80
 8005a4a:	d913      	bls.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2ba0      	cmp	r3, #160	; 0xa0
 8005a50:	d902      	bls.n	8005a58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a52:	2302      	movs	r3, #2
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	e00d      	b.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a58:	2301      	movs	r3, #1
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	e00a      	b.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b7f      	cmp	r3, #127	; 0x7f
 8005a62:	d902      	bls.n	8005a6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005a64:	2302      	movs	r3, #2
 8005a66:	613b      	str	r3, [r7, #16]
 8005a68:	e004      	b.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b70      	cmp	r3, #112	; 0x70
 8005a6e:	d101      	bne.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a70:	2301      	movs	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f023 020f 	bic.w	r2, r3, #15
 8005a7c:	4909      	ldr	r1, [pc, #36]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a84:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 030f 	and.w	r3, r3, #15
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d001      	beq.n	8005a96 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40022000 	.word	0x40022000

08005aa8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005ab2:	4b2d      	ldr	r3, [pc, #180]	; (8005b68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d118      	bne.n	8005af0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005abe:	4b2a      	ldr	r3, [pc, #168]	; (8005b68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d107      	bne.n	8005ada <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005aca:	4b27      	ldr	r3, [pc, #156]	; (8005b68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ad0:	0a1b      	lsrs	r3, r3, #8
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	e005      	b.n	8005ae6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ada:	4b23      	ldr	r3, [pc, #140]	; (8005b68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ae6:	4a21      	ldr	r2, [pc, #132]	; (8005b6c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aee:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005af0:	4b1d      	ldr	r3, [pc, #116]	; (8005b68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d003      	beq.n	8005b08 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d003      	beq.n	8005b0e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8005b06:	e005      	b.n	8005b14 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005b08:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005b0a:	613b      	str	r3, [r7, #16]
    break;
 8005b0c:	e005      	b.n	8005b1a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005b0e:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005b10:	613b      	str	r3, [r7, #16]
    break;
 8005b12:	e002      	b.n	8005b1a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	613b      	str	r3, [r7, #16]
    break;
 8005b18:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b1a:	4b13      	ldr	r3, [pc, #76]	; (8005b68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	091b      	lsrs	r3, r3, #4
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	3301      	adds	r3, #1
 8005b26:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b28:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	fb02 f203 	mul.w	r2, r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b40:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	0e5b      	lsrs	r3, r3, #25
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b58:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005b5a:	683b      	ldr	r3, [r7, #0]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	0800cad8 	.word	0x0800cad8
 8005b70:	00f42400 	.word	0x00f42400
 8005b74:	007a1200 	.word	0x007a1200

08005b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b80:	2300      	movs	r3, #0
 8005b82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b84:	2300      	movs	r3, #0
 8005b86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d040      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b98:	2b80      	cmp	r3, #128	; 0x80
 8005b9a:	d02a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b9c:	2b80      	cmp	r3, #128	; 0x80
 8005b9e:	d825      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ba0:	2b60      	cmp	r3, #96	; 0x60
 8005ba2:	d026      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ba4:	2b60      	cmp	r3, #96	; 0x60
 8005ba6:	d821      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d006      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d81d      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d010      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005bb8:	e018      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bba:	4b89      	ldr	r3, [pc, #548]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	4a88      	ldr	r2, [pc, #544]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bc6:	e015      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fb12 	bl	80061f8 <RCCEx_PLLSAI1_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bd8:	e00c      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	3320      	adds	r3, #32
 8005bde:	2100      	movs	r1, #0
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fbfd 	bl	80063e0 <RCCEx_PLLSAI2_Config>
 8005be6:	4603      	mov	r3, r0
 8005be8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bea:	e003      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	74fb      	strb	r3, [r7, #19]
      break;
 8005bf0:	e000      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10b      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bfa:	4b79      	ldr	r3, [pc, #484]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c00:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c08:	4975      	ldr	r1, [pc, #468]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005c10:	e001      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c12:	7cfb      	ldrb	r3, [r7, #19]
 8005c14:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d047      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2a:	d030      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c30:	d82a      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c36:	d02a      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c3c:	d824      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c42:	d008      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c48:	d81e      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c52:	d010      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c54:	e018      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c56:	4b62      	ldr	r3, [pc, #392]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	4a61      	ldr	r2, [pc, #388]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c60:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c62:	e015      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fac4 	bl	80061f8 <RCCEx_PLLSAI1_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c74:	e00c      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3320      	adds	r3, #32
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fbaf 	bl	80063e0 <RCCEx_PLLSAI2_Config>
 8005c82:	4603      	mov	r3, r0
 8005c84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c86:	e003      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	74fb      	strb	r3, [r7, #19]
      break;
 8005c8c:	e000      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c90:	7cfb      	ldrb	r3, [r7, #19]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c96:	4b52      	ldr	r3, [pc, #328]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca4:	494e      	ldr	r1, [pc, #312]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005cac:	e001      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cae:	7cfb      	ldrb	r3, [r7, #19]
 8005cb0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 809f 	beq.w	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005cc4:	4b46      	ldr	r3, [pc, #280]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cda:	4b41      	ldr	r3, [pc, #260]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cde:	4a40      	ldr	r2, [pc, #256]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ce6:	4b3e      	ldr	r3, [pc, #248]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cf6:	4b3b      	ldr	r3, [pc, #236]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a3a      	ldr	r2, [pc, #232]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d02:	f7fc fdab 	bl	800285c <HAL_GetTick>
 8005d06:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d08:	e009      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0a:	f7fc fda7 	bl	800285c <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d902      	bls.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	74fb      	strb	r3, [r7, #19]
        break;
 8005d1c:	e005      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d1e:	4b31      	ldr	r3, [pc, #196]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0ef      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005d2a:	7cfb      	ldrb	r3, [r7, #19]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d15b      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d30:	4b2b      	ldr	r3, [pc, #172]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01f      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d019      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d4e:	4b24      	ldr	r3, [pc, #144]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d5a:	4b21      	ldr	r3, [pc, #132]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d60:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d6a:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d70:	4a1b      	ldr	r2, [pc, #108]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d7a:	4a19      	ldr	r2, [pc, #100]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d016      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8c:	f7fc fd66 	bl	800285c <HAL_GetTick>
 8005d90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d92:	e00b      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d94:	f7fc fd62 	bl	800285c <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d902      	bls.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	74fb      	strb	r3, [r7, #19]
            break;
 8005daa:	e006      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dac:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0ec      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005dba:	7cfb      	ldrb	r3, [r7, #19]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10c      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd0:	4903      	ldr	r1, [pc, #12]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005dd8:	e008      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dda:	7cfb      	ldrb	r3, [r7, #19]
 8005ddc:	74bb      	strb	r3, [r7, #18]
 8005dde:	e005      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005de0:	40021000 	.word	0x40021000
 8005de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de8:	7cfb      	ldrb	r3, [r7, #19]
 8005dea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dec:	7c7b      	ldrb	r3, [r7, #17]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d105      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005df2:	4ba0      	ldr	r3, [pc, #640]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df6:	4a9f      	ldr	r2, [pc, #636]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e0a:	4b9a      	ldr	r3, [pc, #616]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e10:	f023 0203 	bic.w	r2, r3, #3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	4996      	ldr	r1, [pc, #600]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00a      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e2c:	4b91      	ldr	r3, [pc, #580]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	f023 020c 	bic.w	r2, r3, #12
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	498e      	ldr	r1, [pc, #568]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e4e:	4b89      	ldr	r3, [pc, #548]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5c:	4985      	ldr	r1, [pc, #532]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e70:	4b80      	ldr	r3, [pc, #512]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e7e:	497d      	ldr	r1, [pc, #500]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e92:	4b78      	ldr	r3, [pc, #480]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea0:	4974      	ldr	r1, [pc, #464]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eb4:	4b6f      	ldr	r3, [pc, #444]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec2:	496c      	ldr	r1, [pc, #432]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ed6:	4b67      	ldr	r3, [pc, #412]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005edc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee4:	4963      	ldr	r1, [pc, #396]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ef8:	4b5e      	ldr	r3, [pc, #376]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f06:	495b      	ldr	r1, [pc, #364]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f1a:	4b56      	ldr	r3, [pc, #344]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f28:	4952      	ldr	r1, [pc, #328]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f3c:	4b4d      	ldr	r3, [pc, #308]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4a:	494a      	ldr	r1, [pc, #296]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f5e:	4b45      	ldr	r3, [pc, #276]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6c:	4941      	ldr	r1, [pc, #260]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f80:	4b3c      	ldr	r3, [pc, #240]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f86:	f023 0203 	bic.w	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8e:	4939      	ldr	r1, [pc, #228]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d028      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fa2:	4b34      	ldr	r3, [pc, #208]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb0:	4930      	ldr	r1, [pc, #192]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fc0:	d106      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fc2:	4b2c      	ldr	r3, [pc, #176]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	4a2b      	ldr	r2, [pc, #172]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fcc:	60d3      	str	r3, [r2, #12]
 8005fce:	e011      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	2101      	movs	r1, #1
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 f909 	bl	80061f8 <RCCEx_PLLSAI1_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005fea:	7cfb      	ldrb	r3, [r7, #19]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005ff0:	7cfb      	ldrb	r3, [r7, #19]
 8005ff2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d04d      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006008:	d108      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800600a:	4b1a      	ldr	r3, [pc, #104]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800600c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006010:	4a18      	ldr	r2, [pc, #96]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006016:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800601a:	e012      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800601c:	4b15      	ldr	r3, [pc, #84]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800601e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006022:	4a14      	ldr	r2, [pc, #80]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006024:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006028:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006032:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800603a:	490e      	ldr	r1, [pc, #56]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006046:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800604a:	d106      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800604c:	4b09      	ldr	r3, [pc, #36]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	4a08      	ldr	r2, [pc, #32]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006056:	60d3      	str	r3, [r2, #12]
 8006058:	e020      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800605e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006062:	d109      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006064:	4b03      	ldr	r3, [pc, #12]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4a02      	ldr	r2, [pc, #8]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800606a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800606e:	60d3      	str	r3, [r2, #12]
 8006070:	e014      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006072:	bf00      	nop
 8006074:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800607c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006080:	d10c      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3304      	adds	r3, #4
 8006086:	2101      	movs	r1, #1
 8006088:	4618      	mov	r0, r3
 800608a:	f000 f8b5 	bl	80061f8 <RCCEx_PLLSAI1_Config>
 800608e:	4603      	mov	r3, r0
 8006090:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006092:	7cfb      	ldrb	r3, [r7, #19]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006098:	7cfb      	ldrb	r3, [r7, #19]
 800609a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d028      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060a8:	4b4a      	ldr	r3, [pc, #296]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060b6:	4947      	ldr	r1, [pc, #284]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060c6:	d106      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060c8:	4b42      	ldr	r3, [pc, #264]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	4a41      	ldr	r2, [pc, #260]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060d2:	60d3      	str	r3, [r2, #12]
 80060d4:	e011      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060de:	d10c      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3304      	adds	r3, #4
 80060e4:	2101      	movs	r1, #1
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 f886 	bl	80061f8 <RCCEx_PLLSAI1_Config>
 80060ec:	4603      	mov	r3, r0
 80060ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060f0:	7cfb      	ldrb	r3, [r7, #19]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80060f6:	7cfb      	ldrb	r3, [r7, #19]
 80060f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01e      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006106:	4b33      	ldr	r3, [pc, #204]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006116:	492f      	ldr	r1, [pc, #188]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006124:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006128:	d10c      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3304      	adds	r3, #4
 800612e:	2102      	movs	r1, #2
 8006130:	4618      	mov	r0, r3
 8006132:	f000 f861 	bl	80061f8 <RCCEx_PLLSAI1_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800613a:	7cfb      	ldrb	r3, [r7, #19]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006140:	7cfb      	ldrb	r3, [r7, #19]
 8006142:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006150:	4b20      	ldr	r3, [pc, #128]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006156:	f023 0204 	bic.w	r2, r3, #4
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006160:	491c      	ldr	r1, [pc, #112]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006174:	4b17      	ldr	r3, [pc, #92]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006176:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800617a:	f023 0218 	bic.w	r2, r3, #24
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006184:	4913      	ldr	r1, [pc, #76]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006186:	4313      	orrs	r3, r2
 8006188:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d017      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006198:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800619a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800619e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a8:	490a      	ldr	r1, [pc, #40]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ba:	d105      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80061c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40021000 	.word	0x40021000

080061d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80061dc:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a04      	ldr	r2, [pc, #16]	; (80061f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80061e2:	f043 0304 	orr.w	r3, r3, #4
 80061e6:	6013      	str	r3, [r2, #0]
}
 80061e8:	bf00      	nop
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40021000 	.word	0x40021000

080061f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006206:	4b72      	ldr	r3, [pc, #456]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00e      	beq.n	8006230 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006212:	4b6f      	ldr	r3, [pc, #444]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f003 0203 	and.w	r2, r3, #3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d103      	bne.n	800622a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
       ||
 8006226:	2b00      	cmp	r3, #0
 8006228:	d142      	bne.n	80062b0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	73fb      	strb	r3, [r7, #15]
 800622e:	e03f      	b.n	80062b0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b03      	cmp	r3, #3
 8006236:	d018      	beq.n	800626a <RCCEx_PLLSAI1_Config+0x72>
 8006238:	2b03      	cmp	r3, #3
 800623a:	d825      	bhi.n	8006288 <RCCEx_PLLSAI1_Config+0x90>
 800623c:	2b01      	cmp	r3, #1
 800623e:	d002      	beq.n	8006246 <RCCEx_PLLSAI1_Config+0x4e>
 8006240:	2b02      	cmp	r3, #2
 8006242:	d009      	beq.n	8006258 <RCCEx_PLLSAI1_Config+0x60>
 8006244:	e020      	b.n	8006288 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006246:	4b62      	ldr	r3, [pc, #392]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d11d      	bne.n	800628e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006256:	e01a      	b.n	800628e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006258:	4b5d      	ldr	r3, [pc, #372]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006260:	2b00      	cmp	r3, #0
 8006262:	d116      	bne.n	8006292 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006268:	e013      	b.n	8006292 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800626a:	4b59      	ldr	r3, [pc, #356]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10f      	bne.n	8006296 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006276:	4b56      	ldr	r3, [pc, #344]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d109      	bne.n	8006296 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006286:	e006      	b.n	8006296 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	73fb      	strb	r3, [r7, #15]
      break;
 800628c:	e004      	b.n	8006298 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800628e:	bf00      	nop
 8006290:	e002      	b.n	8006298 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006292:	bf00      	nop
 8006294:	e000      	b.n	8006298 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006296:	bf00      	nop
    }

    if(status == HAL_OK)
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d108      	bne.n	80062b0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800629e:	4b4c      	ldr	r3, [pc, #304]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f023 0203 	bic.w	r2, r3, #3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4949      	ldr	r1, [pc, #292]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f040 8086 	bne.w	80063c4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80062b8:	4b45      	ldr	r3, [pc, #276]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a44      	ldr	r2, [pc, #272]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c4:	f7fc faca 	bl	800285c <HAL_GetTick>
 80062c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062ca:	e009      	b.n	80062e0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062cc:	f7fc fac6 	bl	800285c <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d902      	bls.n	80062e0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	73fb      	strb	r3, [r7, #15]
        break;
 80062de:	e005      	b.n	80062ec <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062e0:	4b3b      	ldr	r3, [pc, #236]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1ef      	bne.n	80062cc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d168      	bne.n	80063c4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d113      	bne.n	8006320 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062f8:	4b35      	ldr	r3, [pc, #212]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	4b35      	ldr	r3, [pc, #212]	; (80063d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80062fe:	4013      	ands	r3, r2
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6892      	ldr	r2, [r2, #8]
 8006304:	0211      	lsls	r1, r2, #8
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	68d2      	ldr	r2, [r2, #12]
 800630a:	06d2      	lsls	r2, r2, #27
 800630c:	4311      	orrs	r1, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6852      	ldr	r2, [r2, #4]
 8006312:	3a01      	subs	r2, #1
 8006314:	0112      	lsls	r2, r2, #4
 8006316:	430a      	orrs	r2, r1
 8006318:	492d      	ldr	r1, [pc, #180]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800631a:	4313      	orrs	r3, r2
 800631c:	610b      	str	r3, [r1, #16]
 800631e:	e02d      	b.n	800637c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d115      	bne.n	8006352 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006326:	4b2a      	ldr	r3, [pc, #168]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006328:	691a      	ldr	r2, [r3, #16]
 800632a:	4b2b      	ldr	r3, [pc, #172]	; (80063d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800632c:	4013      	ands	r3, r2
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6892      	ldr	r2, [r2, #8]
 8006332:	0211      	lsls	r1, r2, #8
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6912      	ldr	r2, [r2, #16]
 8006338:	0852      	lsrs	r2, r2, #1
 800633a:	3a01      	subs	r2, #1
 800633c:	0552      	lsls	r2, r2, #21
 800633e:	4311      	orrs	r1, r2
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6852      	ldr	r2, [r2, #4]
 8006344:	3a01      	subs	r2, #1
 8006346:	0112      	lsls	r2, r2, #4
 8006348:	430a      	orrs	r2, r1
 800634a:	4921      	ldr	r1, [pc, #132]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800634c:	4313      	orrs	r3, r2
 800634e:	610b      	str	r3, [r1, #16]
 8006350:	e014      	b.n	800637c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006352:	4b1f      	ldr	r3, [pc, #124]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	4b21      	ldr	r3, [pc, #132]	; (80063dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006358:	4013      	ands	r3, r2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6892      	ldr	r2, [r2, #8]
 800635e:	0211      	lsls	r1, r2, #8
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6952      	ldr	r2, [r2, #20]
 8006364:	0852      	lsrs	r2, r2, #1
 8006366:	3a01      	subs	r2, #1
 8006368:	0652      	lsls	r2, r2, #25
 800636a:	4311      	orrs	r1, r2
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6852      	ldr	r2, [r2, #4]
 8006370:	3a01      	subs	r2, #1
 8006372:	0112      	lsls	r2, r2, #4
 8006374:	430a      	orrs	r2, r1
 8006376:	4916      	ldr	r1, [pc, #88]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006378:	4313      	orrs	r3, r2
 800637a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800637c:	4b14      	ldr	r3, [pc, #80]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006382:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006386:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006388:	f7fc fa68 	bl	800285c <HAL_GetTick>
 800638c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800638e:	e009      	b.n	80063a4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006390:	f7fc fa64 	bl	800285c <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d902      	bls.n	80063a4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	73fb      	strb	r3, [r7, #15]
          break;
 80063a2:	e005      	b.n	80063b0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0ef      	beq.n	8006390 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d106      	bne.n	80063c4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063b6:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	4904      	ldr	r1, [pc, #16]	; (80063d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40021000 	.word	0x40021000
 80063d4:	07ff800f 	.word	0x07ff800f
 80063d8:	ff9f800f 	.word	0xff9f800f
 80063dc:	f9ff800f 	.word	0xf9ff800f

080063e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063ee:	4b72      	ldr	r3, [pc, #456]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00e      	beq.n	8006418 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80063fa:	4b6f      	ldr	r3, [pc, #444]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f003 0203 	and.w	r2, r3, #3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d103      	bne.n	8006412 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
       ||
 800640e:	2b00      	cmp	r3, #0
 8006410:	d142      	bne.n	8006498 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	73fb      	strb	r3, [r7, #15]
 8006416:	e03f      	b.n	8006498 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d018      	beq.n	8006452 <RCCEx_PLLSAI2_Config+0x72>
 8006420:	2b03      	cmp	r3, #3
 8006422:	d825      	bhi.n	8006470 <RCCEx_PLLSAI2_Config+0x90>
 8006424:	2b01      	cmp	r3, #1
 8006426:	d002      	beq.n	800642e <RCCEx_PLLSAI2_Config+0x4e>
 8006428:	2b02      	cmp	r3, #2
 800642a:	d009      	beq.n	8006440 <RCCEx_PLLSAI2_Config+0x60>
 800642c:	e020      	b.n	8006470 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800642e:	4b62      	ldr	r3, [pc, #392]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d11d      	bne.n	8006476 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800643e:	e01a      	b.n	8006476 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006440:	4b5d      	ldr	r3, [pc, #372]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006448:	2b00      	cmp	r3, #0
 800644a:	d116      	bne.n	800647a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006450:	e013      	b.n	800647a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006452:	4b59      	ldr	r3, [pc, #356]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10f      	bne.n	800647e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800645e:	4b56      	ldr	r3, [pc, #344]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800646e:	e006      	b.n	800647e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	e004      	b.n	8006480 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006476:	bf00      	nop
 8006478:	e002      	b.n	8006480 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800647a:	bf00      	nop
 800647c:	e000      	b.n	8006480 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800647e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d108      	bne.n	8006498 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006486:	4b4c      	ldr	r3, [pc, #304]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f023 0203 	bic.w	r2, r3, #3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4949      	ldr	r1, [pc, #292]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006494:	4313      	orrs	r3, r2
 8006496:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	2b00      	cmp	r3, #0
 800649c:	f040 8086 	bne.w	80065ac <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80064a0:	4b45      	ldr	r3, [pc, #276]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a44      	ldr	r2, [pc, #272]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ac:	f7fc f9d6 	bl	800285c <HAL_GetTick>
 80064b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064b2:	e009      	b.n	80064c8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064b4:	f7fc f9d2 	bl	800285c <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d902      	bls.n	80064c8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	73fb      	strb	r3, [r7, #15]
        break;
 80064c6:	e005      	b.n	80064d4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064c8:	4b3b      	ldr	r3, [pc, #236]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1ef      	bne.n	80064b4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d168      	bne.n	80065ac <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d113      	bne.n	8006508 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80064e0:	4b35      	ldr	r3, [pc, #212]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064e2:	695a      	ldr	r2, [r3, #20]
 80064e4:	4b35      	ldr	r3, [pc, #212]	; (80065bc <RCCEx_PLLSAI2_Config+0x1dc>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6892      	ldr	r2, [r2, #8]
 80064ec:	0211      	lsls	r1, r2, #8
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	68d2      	ldr	r2, [r2, #12]
 80064f2:	06d2      	lsls	r2, r2, #27
 80064f4:	4311      	orrs	r1, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6852      	ldr	r2, [r2, #4]
 80064fa:	3a01      	subs	r2, #1
 80064fc:	0112      	lsls	r2, r2, #4
 80064fe:	430a      	orrs	r2, r1
 8006500:	492d      	ldr	r1, [pc, #180]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006502:	4313      	orrs	r3, r2
 8006504:	614b      	str	r3, [r1, #20]
 8006506:	e02d      	b.n	8006564 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d115      	bne.n	800653a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800650e:	4b2a      	ldr	r3, [pc, #168]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006510:	695a      	ldr	r2, [r3, #20]
 8006512:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006514:	4013      	ands	r3, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6892      	ldr	r2, [r2, #8]
 800651a:	0211      	lsls	r1, r2, #8
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6912      	ldr	r2, [r2, #16]
 8006520:	0852      	lsrs	r2, r2, #1
 8006522:	3a01      	subs	r2, #1
 8006524:	0552      	lsls	r2, r2, #21
 8006526:	4311      	orrs	r1, r2
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6852      	ldr	r2, [r2, #4]
 800652c:	3a01      	subs	r2, #1
 800652e:	0112      	lsls	r2, r2, #4
 8006530:	430a      	orrs	r2, r1
 8006532:	4921      	ldr	r1, [pc, #132]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006534:	4313      	orrs	r3, r2
 8006536:	614b      	str	r3, [r1, #20]
 8006538:	e014      	b.n	8006564 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800653a:	4b1f      	ldr	r3, [pc, #124]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800653c:	695a      	ldr	r2, [r3, #20]
 800653e:	4b21      	ldr	r3, [pc, #132]	; (80065c4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006540:	4013      	ands	r3, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6892      	ldr	r2, [r2, #8]
 8006546:	0211      	lsls	r1, r2, #8
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6952      	ldr	r2, [r2, #20]
 800654c:	0852      	lsrs	r2, r2, #1
 800654e:	3a01      	subs	r2, #1
 8006550:	0652      	lsls	r2, r2, #25
 8006552:	4311      	orrs	r1, r2
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6852      	ldr	r2, [r2, #4]
 8006558:	3a01      	subs	r2, #1
 800655a:	0112      	lsls	r2, r2, #4
 800655c:	430a      	orrs	r2, r1
 800655e:	4916      	ldr	r1, [pc, #88]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006560:	4313      	orrs	r3, r2
 8006562:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006564:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800656a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800656e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006570:	f7fc f974 	bl	800285c <HAL_GetTick>
 8006574:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006576:	e009      	b.n	800658c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006578:	f7fc f970 	bl	800285c <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d902      	bls.n	800658c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	73fb      	strb	r3, [r7, #15]
          break;
 800658a:	e005      	b.n	8006598 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800658c:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0ef      	beq.n	8006578 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800659e:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065a0:	695a      	ldr	r2, [r3, #20]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	4904      	ldr	r1, [pc, #16]	; (80065b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000
 80065bc:	07ff800f 	.word	0x07ff800f
 80065c0:	ff9f800f 	.word	0xff9f800f
 80065c4:	f9ff800f 	.word	0xf9ff800f

080065c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e095      	b.n	8006706 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ea:	d009      	beq.n	8006600 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	61da      	str	r2, [r3, #28]
 80065f2:	e005      	b.n	8006600 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb fd9e 	bl	800215c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006636:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006640:	d902      	bls.n	8006648 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	e002      	b.n	800664e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800664c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006656:	d007      	beq.n	8006668 <HAL_SPI_Init+0xa0>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006660:	d002      	beq.n	8006668 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	431a      	orrs	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066aa:	ea42 0103 	orr.w	r1, r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	0c1b      	lsrs	r3, r3, #16
 80066c4:	f003 0204 	and.w	r2, r3, #4
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	f003 0310 	and.w	r3, r3, #16
 80066d0:	431a      	orrs	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80066e4:	ea42 0103 	orr.w	r1, r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e049      	b.n	80067b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d106      	bne.n	800673a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fb fd87 	bl	8002248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2202      	movs	r2, #2
 800673e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3304      	adds	r3, #4
 800674a:	4619      	mov	r1, r3
 800674c:	4610      	mov	r0, r2
 800674e:	f000 f89d 	bl	800688c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d001      	beq.n	80067d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e047      	b.n	8006864 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a23      	ldr	r2, [pc, #140]	; (8006870 <HAL_TIM_Base_Start+0xb4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d01d      	beq.n	8006822 <HAL_TIM_Base_Start+0x66>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ee:	d018      	beq.n	8006822 <HAL_TIM_Base_Start+0x66>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1f      	ldr	r2, [pc, #124]	; (8006874 <HAL_TIM_Base_Start+0xb8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d013      	beq.n	8006822 <HAL_TIM_Base_Start+0x66>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1e      	ldr	r2, [pc, #120]	; (8006878 <HAL_TIM_Base_Start+0xbc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00e      	beq.n	8006822 <HAL_TIM_Base_Start+0x66>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1c      	ldr	r2, [pc, #112]	; (800687c <HAL_TIM_Base_Start+0xc0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d009      	beq.n	8006822 <HAL_TIM_Base_Start+0x66>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1b      	ldr	r2, [pc, #108]	; (8006880 <HAL_TIM_Base_Start+0xc4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d004      	beq.n	8006822 <HAL_TIM_Base_Start+0x66>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a19      	ldr	r2, [pc, #100]	; (8006884 <HAL_TIM_Base_Start+0xc8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d115      	bne.n	800684e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	4b17      	ldr	r3, [pc, #92]	; (8006888 <HAL_TIM_Base_Start+0xcc>)
 800682a:	4013      	ands	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b06      	cmp	r3, #6
 8006832:	d015      	beq.n	8006860 <HAL_TIM_Base_Start+0xa4>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683a:	d011      	beq.n	8006860 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0201 	orr.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684c:	e008      	b.n	8006860 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 0201 	orr.w	r2, r2, #1
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e000      	b.n	8006862 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006860:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40000400 	.word	0x40000400
 8006878:	40000800 	.word	0x40000800
 800687c:	40000c00 	.word	0x40000c00
 8006880:	40013400 	.word	0x40013400
 8006884:	40014000 	.word	0x40014000
 8006888:	00010007 	.word	0x00010007

0800688c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a40      	ldr	r2, [pc, #256]	; (80069a0 <TIM_Base_SetConfig+0x114>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d013      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068aa:	d00f      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a3d      	ldr	r2, [pc, #244]	; (80069a4 <TIM_Base_SetConfig+0x118>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00b      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a3c      	ldr	r2, [pc, #240]	; (80069a8 <TIM_Base_SetConfig+0x11c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3b      	ldr	r2, [pc, #236]	; (80069ac <TIM_Base_SetConfig+0x120>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3a      	ldr	r2, [pc, #232]	; (80069b0 <TIM_Base_SetConfig+0x124>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d108      	bne.n	80068de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2f      	ldr	r2, [pc, #188]	; (80069a0 <TIM_Base_SetConfig+0x114>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01f      	beq.n	8006926 <TIM_Base_SetConfig+0x9a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ec:	d01b      	beq.n	8006926 <TIM_Base_SetConfig+0x9a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a2c      	ldr	r2, [pc, #176]	; (80069a4 <TIM_Base_SetConfig+0x118>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d017      	beq.n	8006926 <TIM_Base_SetConfig+0x9a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2b      	ldr	r2, [pc, #172]	; (80069a8 <TIM_Base_SetConfig+0x11c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d013      	beq.n	8006926 <TIM_Base_SetConfig+0x9a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2a      	ldr	r2, [pc, #168]	; (80069ac <TIM_Base_SetConfig+0x120>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00f      	beq.n	8006926 <TIM_Base_SetConfig+0x9a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a29      	ldr	r2, [pc, #164]	; (80069b0 <TIM_Base_SetConfig+0x124>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00b      	beq.n	8006926 <TIM_Base_SetConfig+0x9a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a28      	ldr	r2, [pc, #160]	; (80069b4 <TIM_Base_SetConfig+0x128>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d007      	beq.n	8006926 <TIM_Base_SetConfig+0x9a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a27      	ldr	r2, [pc, #156]	; (80069b8 <TIM_Base_SetConfig+0x12c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d003      	beq.n	8006926 <TIM_Base_SetConfig+0x9a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a26      	ldr	r2, [pc, #152]	; (80069bc <TIM_Base_SetConfig+0x130>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d108      	bne.n	8006938 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a10      	ldr	r2, [pc, #64]	; (80069a0 <TIM_Base_SetConfig+0x114>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00f      	beq.n	8006984 <TIM_Base_SetConfig+0xf8>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a12      	ldr	r2, [pc, #72]	; (80069b0 <TIM_Base_SetConfig+0x124>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00b      	beq.n	8006984 <TIM_Base_SetConfig+0xf8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a11      	ldr	r2, [pc, #68]	; (80069b4 <TIM_Base_SetConfig+0x128>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d007      	beq.n	8006984 <TIM_Base_SetConfig+0xf8>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a10      	ldr	r2, [pc, #64]	; (80069b8 <TIM_Base_SetConfig+0x12c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_Base_SetConfig+0xf8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a0f      	ldr	r2, [pc, #60]	; (80069bc <TIM_Base_SetConfig+0x130>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d103      	bne.n	800698c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	615a      	str	r2, [r3, #20]
}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40012c00 	.word	0x40012c00
 80069a4:	40000400 	.word	0x40000400
 80069a8:	40000800 	.word	0x40000800
 80069ac:	40000c00 	.word	0x40000c00
 80069b0:	40013400 	.word	0x40013400
 80069b4:	40014000 	.word	0x40014000
 80069b8:	40014400 	.word	0x40014400
 80069bc:	40014800 	.word	0x40014800

080069c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e042      	b.n	8006a58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d106      	bne.n	80069ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7fb fc4f 	bl	8002288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2224      	movs	r2, #36	; 0x24
 80069ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0201 	bic.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f8c4 	bl	8006b90 <UART_SetConfig>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d101      	bne.n	8006a12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e022      	b.n	8006a58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fb80 	bl	8007120 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fc07 	bl	8007264 <UART_CheckIdleState>
 8006a56:	4603      	mov	r3, r0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	; 0x28
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	f040 8084 	bne.w	8006b84 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <HAL_UART_Transmit+0x28>
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e07c      	b.n	8006b86 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d101      	bne.n	8006a9a <HAL_UART_Transmit+0x3a>
 8006a96:	2302      	movs	r3, #2
 8006a98:	e075      	b.n	8006b86 <HAL_UART_Transmit+0x126>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2221      	movs	r2, #33	; 0x21
 8006aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ab2:	f7fb fed3 	bl	800285c <HAL_GetTick>
 8006ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	88fa      	ldrh	r2, [r7, #6]
 8006abc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	88fa      	ldrh	r2, [r7, #6]
 8006ac4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad0:	d108      	bne.n	8006ae4 <HAL_UART_Transmit+0x84>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d104      	bne.n	8006ae4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	e003      	b.n	8006aec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006af4:	e02d      	b.n	8006b52 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2200      	movs	r2, #0
 8006afe:	2180      	movs	r1, #128	; 0x80
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fbfa 	bl	80072fa <UART_WaitOnFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e03a      	b.n	8006b86 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10b      	bne.n	8006b2e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	881a      	ldrh	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b22:	b292      	uxth	r2, r2
 8006b24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	3302      	adds	r3, #2
 8006b2a:	61bb      	str	r3, [r7, #24]
 8006b2c:	e008      	b.n	8006b40 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	781a      	ldrb	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	b292      	uxth	r2, r2
 8006b38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1cb      	bne.n	8006af6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2200      	movs	r2, #0
 8006b66:	2140      	movs	r1, #64	; 0x40
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 fbc6 	bl	80072fa <UART_WaitOnFlagUntilTimeout>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e006      	b.n	8006b86 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	e000      	b.n	8006b86 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006b84:	2302      	movs	r3, #2
  }
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b90:	b5b0      	push	{r4, r5, r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4bb1      	ldr	r3, [pc, #708]	; (8006e80 <UART_SetConfig+0x2f0>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	69f9      	ldr	r1, [r7, #28]
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4aa6      	ldr	r2, [pc, #664]	; (8006e84 <UART_SetConfig+0x2f4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d004      	beq.n	8006bf8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c02:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	6812      	ldr	r2, [r2, #0]
 8006c0a:	69f9      	ldr	r1, [r7, #28]
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	f023 010f 	bic.w	r1, r3, #15
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a97      	ldr	r2, [pc, #604]	; (8006e88 <UART_SetConfig+0x2f8>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d120      	bne.n	8006c72 <UART_SetConfig+0xe2>
 8006c30:	4b96      	ldr	r3, [pc, #600]	; (8006e8c <UART_SetConfig+0x2fc>)
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d816      	bhi.n	8006c6c <UART_SetConfig+0xdc>
 8006c3e:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <UART_SetConfig+0xb4>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c55 	.word	0x08006c55
 8006c48:	08006c61 	.word	0x08006c61
 8006c4c:	08006c5b 	.word	0x08006c5b
 8006c50:	08006c67 	.word	0x08006c67
 8006c54:	2301      	movs	r3, #1
 8006c56:	76fb      	strb	r3, [r7, #27]
 8006c58:	e0e7      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	76fb      	strb	r3, [r7, #27]
 8006c5e:	e0e4      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006c60:	2304      	movs	r3, #4
 8006c62:	76fb      	strb	r3, [r7, #27]
 8006c64:	e0e1      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006c66:	2308      	movs	r3, #8
 8006c68:	76fb      	strb	r3, [r7, #27]
 8006c6a:	e0de      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	76fb      	strb	r3, [r7, #27]
 8006c70:	e0db      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a86      	ldr	r2, [pc, #536]	; (8006e90 <UART_SetConfig+0x300>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d132      	bne.n	8006ce2 <UART_SetConfig+0x152>
 8006c7c:	4b83      	ldr	r3, [pc, #524]	; (8006e8c <UART_SetConfig+0x2fc>)
 8006c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c82:	f003 030c 	and.w	r3, r3, #12
 8006c86:	2b0c      	cmp	r3, #12
 8006c88:	d828      	bhi.n	8006cdc <UART_SetConfig+0x14c>
 8006c8a:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <UART_SetConfig+0x100>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006cc5 	.word	0x08006cc5
 8006c94:	08006cdd 	.word	0x08006cdd
 8006c98:	08006cdd 	.word	0x08006cdd
 8006c9c:	08006cdd 	.word	0x08006cdd
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006cdd 	.word	0x08006cdd
 8006ca8:	08006cdd 	.word	0x08006cdd
 8006cac:	08006cdd 	.word	0x08006cdd
 8006cb0:	08006ccb 	.word	0x08006ccb
 8006cb4:	08006cdd 	.word	0x08006cdd
 8006cb8:	08006cdd 	.word	0x08006cdd
 8006cbc:	08006cdd 	.word	0x08006cdd
 8006cc0:	08006cd7 	.word	0x08006cd7
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	76fb      	strb	r3, [r7, #27]
 8006cc8:	e0af      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	76fb      	strb	r3, [r7, #27]
 8006cce:	e0ac      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	76fb      	strb	r3, [r7, #27]
 8006cd4:	e0a9      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	76fb      	strb	r3, [r7, #27]
 8006cda:	e0a6      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	76fb      	strb	r3, [r7, #27]
 8006ce0:	e0a3      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a6b      	ldr	r2, [pc, #428]	; (8006e94 <UART_SetConfig+0x304>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d120      	bne.n	8006d2e <UART_SetConfig+0x19e>
 8006cec:	4b67      	ldr	r3, [pc, #412]	; (8006e8c <UART_SetConfig+0x2fc>)
 8006cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cf6:	2b30      	cmp	r3, #48	; 0x30
 8006cf8:	d013      	beq.n	8006d22 <UART_SetConfig+0x192>
 8006cfa:	2b30      	cmp	r3, #48	; 0x30
 8006cfc:	d814      	bhi.n	8006d28 <UART_SetConfig+0x198>
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d009      	beq.n	8006d16 <UART_SetConfig+0x186>
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d810      	bhi.n	8006d28 <UART_SetConfig+0x198>
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <UART_SetConfig+0x180>
 8006d0a:	2b10      	cmp	r3, #16
 8006d0c:	d006      	beq.n	8006d1c <UART_SetConfig+0x18c>
 8006d0e:	e00b      	b.n	8006d28 <UART_SetConfig+0x198>
 8006d10:	2300      	movs	r3, #0
 8006d12:	76fb      	strb	r3, [r7, #27]
 8006d14:	e089      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006d16:	2302      	movs	r3, #2
 8006d18:	76fb      	strb	r3, [r7, #27]
 8006d1a:	e086      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006d1c:	2304      	movs	r3, #4
 8006d1e:	76fb      	strb	r3, [r7, #27]
 8006d20:	e083      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006d22:	2308      	movs	r3, #8
 8006d24:	76fb      	strb	r3, [r7, #27]
 8006d26:	e080      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006d28:	2310      	movs	r3, #16
 8006d2a:	76fb      	strb	r3, [r7, #27]
 8006d2c:	e07d      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a59      	ldr	r2, [pc, #356]	; (8006e98 <UART_SetConfig+0x308>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d120      	bne.n	8006d7a <UART_SetConfig+0x1ea>
 8006d38:	4b54      	ldr	r3, [pc, #336]	; (8006e8c <UART_SetConfig+0x2fc>)
 8006d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d42:	2bc0      	cmp	r3, #192	; 0xc0
 8006d44:	d013      	beq.n	8006d6e <UART_SetConfig+0x1de>
 8006d46:	2bc0      	cmp	r3, #192	; 0xc0
 8006d48:	d814      	bhi.n	8006d74 <UART_SetConfig+0x1e4>
 8006d4a:	2b80      	cmp	r3, #128	; 0x80
 8006d4c:	d009      	beq.n	8006d62 <UART_SetConfig+0x1d2>
 8006d4e:	2b80      	cmp	r3, #128	; 0x80
 8006d50:	d810      	bhi.n	8006d74 <UART_SetConfig+0x1e4>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <UART_SetConfig+0x1cc>
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	d006      	beq.n	8006d68 <UART_SetConfig+0x1d8>
 8006d5a:	e00b      	b.n	8006d74 <UART_SetConfig+0x1e4>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	76fb      	strb	r3, [r7, #27]
 8006d60:	e063      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006d62:	2302      	movs	r3, #2
 8006d64:	76fb      	strb	r3, [r7, #27]
 8006d66:	e060      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006d68:	2304      	movs	r3, #4
 8006d6a:	76fb      	strb	r3, [r7, #27]
 8006d6c:	e05d      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006d6e:	2308      	movs	r3, #8
 8006d70:	76fb      	strb	r3, [r7, #27]
 8006d72:	e05a      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006d74:	2310      	movs	r3, #16
 8006d76:	76fb      	strb	r3, [r7, #27]
 8006d78:	e057      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a47      	ldr	r2, [pc, #284]	; (8006e9c <UART_SetConfig+0x30c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d125      	bne.n	8006dd0 <UART_SetConfig+0x240>
 8006d84:	4b41      	ldr	r3, [pc, #260]	; (8006e8c <UART_SetConfig+0x2fc>)
 8006d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d92:	d017      	beq.n	8006dc4 <UART_SetConfig+0x234>
 8006d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d98:	d817      	bhi.n	8006dca <UART_SetConfig+0x23a>
 8006d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d9e:	d00b      	beq.n	8006db8 <UART_SetConfig+0x228>
 8006da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da4:	d811      	bhi.n	8006dca <UART_SetConfig+0x23a>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <UART_SetConfig+0x222>
 8006daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dae:	d006      	beq.n	8006dbe <UART_SetConfig+0x22e>
 8006db0:	e00b      	b.n	8006dca <UART_SetConfig+0x23a>
 8006db2:	2300      	movs	r3, #0
 8006db4:	76fb      	strb	r3, [r7, #27]
 8006db6:	e038      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006db8:	2302      	movs	r3, #2
 8006dba:	76fb      	strb	r3, [r7, #27]
 8006dbc:	e035      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006dbe:	2304      	movs	r3, #4
 8006dc0:	76fb      	strb	r3, [r7, #27]
 8006dc2:	e032      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006dc4:	2308      	movs	r3, #8
 8006dc6:	76fb      	strb	r3, [r7, #27]
 8006dc8:	e02f      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006dca:	2310      	movs	r3, #16
 8006dcc:	76fb      	strb	r3, [r7, #27]
 8006dce:	e02c      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a2b      	ldr	r2, [pc, #172]	; (8006e84 <UART_SetConfig+0x2f4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d125      	bne.n	8006e26 <UART_SetConfig+0x296>
 8006dda:	4b2c      	ldr	r3, [pc, #176]	; (8006e8c <UART_SetConfig+0x2fc>)
 8006ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006de4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006de8:	d017      	beq.n	8006e1a <UART_SetConfig+0x28a>
 8006dea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dee:	d817      	bhi.n	8006e20 <UART_SetConfig+0x290>
 8006df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006df4:	d00b      	beq.n	8006e0e <UART_SetConfig+0x27e>
 8006df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dfa:	d811      	bhi.n	8006e20 <UART_SetConfig+0x290>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <UART_SetConfig+0x278>
 8006e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e04:	d006      	beq.n	8006e14 <UART_SetConfig+0x284>
 8006e06:	e00b      	b.n	8006e20 <UART_SetConfig+0x290>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	76fb      	strb	r3, [r7, #27]
 8006e0c:	e00d      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	76fb      	strb	r3, [r7, #27]
 8006e12:	e00a      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006e14:	2304      	movs	r3, #4
 8006e16:	76fb      	strb	r3, [r7, #27]
 8006e18:	e007      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006e1a:	2308      	movs	r3, #8
 8006e1c:	76fb      	strb	r3, [r7, #27]
 8006e1e:	e004      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006e20:	2310      	movs	r3, #16
 8006e22:	76fb      	strb	r3, [r7, #27]
 8006e24:	e001      	b.n	8006e2a <UART_SetConfig+0x29a>
 8006e26:	2310      	movs	r3, #16
 8006e28:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a15      	ldr	r2, [pc, #84]	; (8006e84 <UART_SetConfig+0x2f4>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	f040 809f 	bne.w	8006f74 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e36:	7efb      	ldrb	r3, [r7, #27]
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d837      	bhi.n	8006eac <UART_SetConfig+0x31c>
 8006e3c:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <UART_SetConfig+0x2b4>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006e69 	.word	0x08006e69
 8006e48:	08006ead 	.word	0x08006ead
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006ead 	.word	0x08006ead
 8006e54:	08006e77 	.word	0x08006e77
 8006e58:	08006ead 	.word	0x08006ead
 8006e5c:	08006ead 	.word	0x08006ead
 8006e60:	08006ead 	.word	0x08006ead
 8006e64:	08006ea5 	.word	0x08006ea5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e68:	f7fe fd98 	bl	800599c <HAL_RCC_GetPCLK1Freq>
 8006e6c:	6178      	str	r0, [r7, #20]
        break;
 8006e6e:	e022      	b.n	8006eb6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e70:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <UART_SetConfig+0x310>)
 8006e72:	617b      	str	r3, [r7, #20]
        break;
 8006e74:	e01f      	b.n	8006eb6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e76:	f7fe fcf9 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8006e7a:	6178      	str	r0, [r7, #20]
        break;
 8006e7c:	e01b      	b.n	8006eb6 <UART_SetConfig+0x326>
 8006e7e:	bf00      	nop
 8006e80:	cfff69f3 	.word	0xcfff69f3
 8006e84:	40008000 	.word	0x40008000
 8006e88:	40013800 	.word	0x40013800
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	40004400 	.word	0x40004400
 8006e94:	40004800 	.word	0x40004800
 8006e98:	40004c00 	.word	0x40004c00
 8006e9c:	40005000 	.word	0x40005000
 8006ea0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ea8:	617b      	str	r3, [r7, #20]
        break;
 8006eaa:	e004      	b.n	8006eb6 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	76bb      	strb	r3, [r7, #26]
        break;
 8006eb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 8119 	beq.w	80070f0 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	4a95      	ldr	r2, [pc, #596]	; (8007118 <UART_SetConfig+0x588>)
 8006ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ed0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	4413      	add	r3, r2
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d305      	bcc.n	8006eee <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d902      	bls.n	8006ef4 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	76bb      	strb	r3, [r7, #26]
 8006ef2:	e0fd      	b.n	80070f0 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f04f 0100 	mov.w	r1, #0
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	4a85      	ldr	r2, [pc, #532]	; (8007118 <UART_SetConfig+0x588>)
 8006f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	f7f9 feb4 	bl	8000c78 <__aeabi_uldivmod>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4610      	mov	r0, r2
 8006f16:	4619      	mov	r1, r3
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	020b      	lsls	r3, r1, #8
 8006f22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f26:	0202      	lsls	r2, r0, #8
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	6849      	ldr	r1, [r1, #4]
 8006f2c:	0849      	lsrs	r1, r1, #1
 8006f2e:	4608      	mov	r0, r1
 8006f30:	f04f 0100 	mov.w	r1, #0
 8006f34:	1814      	adds	r4, r2, r0
 8006f36:	eb43 0501 	adc.w	r5, r3, r1
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	4620      	mov	r0, r4
 8006f46:	4629      	mov	r1, r5
 8006f48:	f7f9 fe96 	bl	8000c78 <__aeabi_uldivmod>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4613      	mov	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f5a:	d308      	bcc.n	8006f6e <UART_SetConfig+0x3de>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f62:	d204      	bcs.n	8006f6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	60da      	str	r2, [r3, #12]
 8006f6c:	e0c0      	b.n	80070f0 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	76bb      	strb	r3, [r7, #26]
 8006f72:	e0bd      	b.n	80070f0 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7c:	d164      	bne.n	8007048 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8006f7e:	7efb      	ldrb	r3, [r7, #27]
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d828      	bhi.n	8006fd6 <UART_SetConfig+0x446>
 8006f84:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <UART_SetConfig+0x3fc>)
 8006f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8a:	bf00      	nop
 8006f8c:	08006fb1 	.word	0x08006fb1
 8006f90:	08006fb9 	.word	0x08006fb9
 8006f94:	08006fc1 	.word	0x08006fc1
 8006f98:	08006fd7 	.word	0x08006fd7
 8006f9c:	08006fc7 	.word	0x08006fc7
 8006fa0:	08006fd7 	.word	0x08006fd7
 8006fa4:	08006fd7 	.word	0x08006fd7
 8006fa8:	08006fd7 	.word	0x08006fd7
 8006fac:	08006fcf 	.word	0x08006fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fb0:	f7fe fcf4 	bl	800599c <HAL_RCC_GetPCLK1Freq>
 8006fb4:	6178      	str	r0, [r7, #20]
        break;
 8006fb6:	e013      	b.n	8006fe0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fb8:	f7fe fd06 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 8006fbc:	6178      	str	r0, [r7, #20]
        break;
 8006fbe:	e00f      	b.n	8006fe0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fc0:	4b56      	ldr	r3, [pc, #344]	; (800711c <UART_SetConfig+0x58c>)
 8006fc2:	617b      	str	r3, [r7, #20]
        break;
 8006fc4:	e00c      	b.n	8006fe0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fc6:	f7fe fc51 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8006fca:	6178      	str	r0, [r7, #20]
        break;
 8006fcc:	e008      	b.n	8006fe0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd2:	617b      	str	r3, [r7, #20]
        break;
 8006fd4:	e004      	b.n	8006fe0 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	76bb      	strb	r3, [r7, #26]
        break;
 8006fde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 8084 	beq.w	80070f0 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	4a4a      	ldr	r2, [pc, #296]	; (8007118 <UART_SetConfig+0x588>)
 8006fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ffa:	005a      	lsls	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	085b      	lsrs	r3, r3, #1
 8007002:	441a      	add	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	fbb2 f3f3 	udiv	r3, r2, r3
 800700c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b0f      	cmp	r3, #15
 8007012:	d916      	bls.n	8007042 <UART_SetConfig+0x4b2>
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800701a:	d212      	bcs.n	8007042 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	b29b      	uxth	r3, r3
 8007020:	f023 030f 	bic.w	r3, r3, #15
 8007024:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	b29b      	uxth	r3, r3
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	b29a      	uxth	r2, r3
 8007032:	89fb      	ldrh	r3, [r7, #14]
 8007034:	4313      	orrs	r3, r2
 8007036:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	89fa      	ldrh	r2, [r7, #14]
 800703e:	60da      	str	r2, [r3, #12]
 8007040:	e056      	b.n	80070f0 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	76bb      	strb	r3, [r7, #26]
 8007046:	e053      	b.n	80070f0 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007048:	7efb      	ldrb	r3, [r7, #27]
 800704a:	2b08      	cmp	r3, #8
 800704c:	d827      	bhi.n	800709e <UART_SetConfig+0x50e>
 800704e:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <UART_SetConfig+0x4c4>)
 8007050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007054:	08007079 	.word	0x08007079
 8007058:	08007081 	.word	0x08007081
 800705c:	08007089 	.word	0x08007089
 8007060:	0800709f 	.word	0x0800709f
 8007064:	0800708f 	.word	0x0800708f
 8007068:	0800709f 	.word	0x0800709f
 800706c:	0800709f 	.word	0x0800709f
 8007070:	0800709f 	.word	0x0800709f
 8007074:	08007097 	.word	0x08007097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007078:	f7fe fc90 	bl	800599c <HAL_RCC_GetPCLK1Freq>
 800707c:	6178      	str	r0, [r7, #20]
        break;
 800707e:	e013      	b.n	80070a8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007080:	f7fe fca2 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 8007084:	6178      	str	r0, [r7, #20]
        break;
 8007086:	e00f      	b.n	80070a8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007088:	4b24      	ldr	r3, [pc, #144]	; (800711c <UART_SetConfig+0x58c>)
 800708a:	617b      	str	r3, [r7, #20]
        break;
 800708c:	e00c      	b.n	80070a8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708e:	f7fe fbed 	bl	800586c <HAL_RCC_GetSysClockFreq>
 8007092:	6178      	str	r0, [r7, #20]
        break;
 8007094:	e008      	b.n	80070a8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800709a:	617b      	str	r3, [r7, #20]
        break;
 800709c:	e004      	b.n	80070a8 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	76bb      	strb	r3, [r7, #26]
        break;
 80070a6:	bf00      	nop
    }

    if (pclk != 0U)
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d020      	beq.n	80070f0 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	4a19      	ldr	r2, [pc, #100]	; (8007118 <UART_SetConfig+0x588>)
 80070b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b8:	461a      	mov	r2, r3
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	085b      	lsrs	r3, r3, #1
 80070c6:	441a      	add	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d0:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	2b0f      	cmp	r3, #15
 80070d6:	d909      	bls.n	80070ec <UART_SetConfig+0x55c>
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070de:	d205      	bcs.n	80070ec <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	60da      	str	r2, [r3, #12]
 80070ea:	e001      	b.n	80070f0 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800710c:	7ebb      	ldrb	r3, [r7, #26]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bdb0      	pop	{r4, r5, r7, pc}
 8007116:	bf00      	nop
 8007118:	0800cb08 	.word	0x0800cb08
 800711c:	00f42400 	.word	0x00f42400

08007120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00a      	beq.n	800718e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	f003 0310 	and.w	r3, r3, #16
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00a      	beq.n	80071d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01a      	beq.n	8007236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721e:	d10a      	bne.n	8007236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	605a      	str	r2, [r3, #4]
  }
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af02      	add	r7, sp, #8
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007274:	f7fb faf2 	bl	800285c <HAL_GetTick>
 8007278:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0308 	and.w	r3, r3, #8
 8007284:	2b08      	cmp	r3, #8
 8007286:	d10e      	bne.n	80072a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f82f 	bl	80072fa <UART_WaitOnFlagUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e025      	b.n	80072f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d10e      	bne.n	80072d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f819 	bl	80072fa <UART_WaitOnFlagUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e00f      	b.n	80072f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b09c      	sub	sp, #112	; 0x70
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	603b      	str	r3, [r7, #0]
 8007306:	4613      	mov	r3, r2
 8007308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730a:	e0a9      	b.n	8007460 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800730c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800730e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007312:	f000 80a5 	beq.w	8007460 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007316:	f7fb faa1 	bl	800285c <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007322:	429a      	cmp	r2, r3
 8007324:	d302      	bcc.n	800732c <UART_WaitOnFlagUntilTimeout+0x32>
 8007326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007328:	2b00      	cmp	r3, #0
 800732a:	d140      	bne.n	80073ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800733a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800733c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007340:	667b      	str	r3, [r7, #100]	; 0x64
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800734a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800734c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e6      	bne.n	800732c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3308      	adds	r3, #8
 8007364:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	f023 0301 	bic.w	r3, r3, #1
 8007374:	663b      	str	r3, [r7, #96]	; 0x60
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3308      	adds	r3, #8
 800737c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800737e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800738c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e5      	bne.n	800735e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2220      	movs	r2, #32
 800739e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e069      	b.n	8007482 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d051      	beq.n	8007460 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ca:	d149      	bne.n	8007460 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f4:	637b      	str	r3, [r7, #52]	; 0x34
 80073f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e6      	bne.n	80073d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	613b      	str	r3, [r7, #16]
   return(result);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f023 0301 	bic.w	r3, r3, #1
 800741e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3308      	adds	r3, #8
 8007426:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007428:	623a      	str	r2, [r7, #32]
 800742a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	69f9      	ldr	r1, [r7, #28]
 800742e:	6a3a      	ldr	r2, [r7, #32]
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	61bb      	str	r3, [r7, #24]
   return(result);
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e5      	bne.n	8007408 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2220      	movs	r2, #32
 8007440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2220      	movs	r2, #32
 8007448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2220      	movs	r2, #32
 8007450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e010      	b.n	8007482 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	69da      	ldr	r2, [r3, #28]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	4013      	ands	r3, r2
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	429a      	cmp	r2, r3
 800746e:	bf0c      	ite	eq
 8007470:	2301      	moveq	r3, #1
 8007472:	2300      	movne	r3, #0
 8007474:	b2db      	uxtb	r3, r3
 8007476:	461a      	mov	r2, r3
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	429a      	cmp	r2, r3
 800747c:	f43f af46 	beq.w	800730c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3770      	adds	r7, #112	; 0x70
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800749c:	2302      	movs	r3, #2
 800749e:	e027      	b.n	80074f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2224      	movs	r2, #36	; 0x24
 80074ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0201 	bic.w	r2, r2, #1
 80074c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007510:	2302      	movs	r3, #2
 8007512:	e02d      	b.n	8007570 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2224      	movs	r2, #36	; 0x24
 8007520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0201 	bic.w	r2, r2, #1
 800753a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f84f 	bl	80075f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800758c:	2302      	movs	r3, #2
 800758e:	e02d      	b.n	80075ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2224      	movs	r2, #36	; 0x24
 800759c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0201 	bic.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f811 	bl	80075f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2220      	movs	r2, #32
 80075de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007600:	2b00      	cmp	r3, #0
 8007602:	d108      	bne.n	8007616 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007614:	e031      	b.n	800767a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007616:	2308      	movs	r3, #8
 8007618:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800761a:	2308      	movs	r3, #8
 800761c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	0e5b      	lsrs	r3, r3, #25
 8007626:	b2db      	uxtb	r3, r3
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	0f5b      	lsrs	r3, r3, #29
 8007636:	b2db      	uxtb	r3, r3
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	7b3a      	ldrb	r2, [r7, #12]
 8007642:	4911      	ldr	r1, [pc, #68]	; (8007688 <UARTEx_SetNbDataToProcess+0x94>)
 8007644:	5c8a      	ldrb	r2, [r1, r2]
 8007646:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800764a:	7b3a      	ldrb	r2, [r7, #12]
 800764c:	490f      	ldr	r1, [pc, #60]	; (800768c <UARTEx_SetNbDataToProcess+0x98>)
 800764e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007650:	fb93 f3f2 	sdiv	r3, r3, r2
 8007654:	b29a      	uxth	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	7b7a      	ldrb	r2, [r7, #13]
 8007660:	4909      	ldr	r1, [pc, #36]	; (8007688 <UARTEx_SetNbDataToProcess+0x94>)
 8007662:	5c8a      	ldrb	r2, [r1, r2]
 8007664:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007668:	7b7a      	ldrb	r2, [r7, #13]
 800766a:	4908      	ldr	r1, [pc, #32]	; (800768c <UARTEx_SetNbDataToProcess+0x98>)
 800766c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800766e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007672:	b29a      	uxth	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800767a:	bf00      	nop
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	0800cb20 	.word	0x0800cb20
 800768c:	0800cb28 	.word	0x0800cb28

08007690 <sine_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	3303      	adds	r3, #3
 80076a0:	f023 0303 	bic.w	r3, r3, #3
 80076a4:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_6_input0_output_array.data = AI_PTR(NULL);
 80076a6:	4b16      	ldr	r3, [pc, #88]	; (8007700 <sine_model_configure_activations+0x70>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	609a      	str	r2, [r3, #8]
    serving_default_dense_6_input0_output_array.data_start = AI_PTR(NULL);
 80076ac:	4b14      	ldr	r3, [pc, #80]	; (8007700 <sine_model_configure_activations+0x70>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 80076b2:	4a14      	ldr	r2, [pc, #80]	; (8007704 <sine_model_configure_activations+0x74>)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 80076b8:	4a12      	ldr	r2, [pc, #72]	; (8007704 <sine_model_configure_activations+0x74>)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(activations + 0);
 80076be:	4a12      	ldr	r2, [pc, #72]	; (8007708 <sine_model_configure_activations+0x78>)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(activations + 0);
 80076c4:	4a10      	ldr	r2, [pc, #64]	; (8007708 <sine_model_configure_activations+0x78>)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 64);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3340      	adds	r3, #64	; 0x40
 80076ce:	4a0f      	ldr	r2, [pc, #60]	; (800770c <sine_model_configure_activations+0x7c>)
 80076d0:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 64);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3340      	adds	r3, #64	; 0x40
 80076d6:	4a0d      	ldr	r2, [pc, #52]	; (800770c <sine_model_configure_activations+0x7c>)
 80076d8:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(activations + 0);
 80076da:	4a0d      	ldr	r2, [pc, #52]	; (8007710 <sine_model_configure_activations+0x80>)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(activations + 0);
 80076e0:	4a0b      	ldr	r2, [pc, #44]	; (8007710 <sine_model_configure_activations+0x80>)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 80076e6:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <sine_model_configure_activations+0x84>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 80076ec:	4b09      	ldr	r3, [pc, #36]	; (8007714 <sine_model_configure_activations+0x84>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80076f2:	2301      	movs	r3, #1
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	20000070 	.word	0x20000070
 8007704:	20000080 	.word	0x20000080
 8007708:	20000090 	.word	0x20000090
 800770c:	200000a0 	.word	0x200000a0
 8007710:	200000b0 	.word	0x200000b0
 8007714:	200000c0 	.word	0x200000c0

08007718 <sine_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8007728:	4b2f      	ldr	r3, [pc, #188]	; (80077e8 <sine_model_configure_weights+0xd0>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007730:	4a2d      	ldr	r2, [pc, #180]	; (80077e8 <sine_model_configure_weights+0xd0>)
 8007732:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8007734:	4a2c      	ldr	r2, [pc, #176]	; (80077e8 <sine_model_configure_weights+0xd0>)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 800773a:	4a2b      	ldr	r2, [pc, #172]	; (80077e8 <sine_model_configure_weights+0xd0>)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8007740:	4b2a      	ldr	r3, [pc, #168]	; (80077ec <sine_model_configure_weights+0xd4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007748:	4a28      	ldr	r2, [pc, #160]	; (80077ec <sine_model_configure_weights+0xd4>)
 800774a:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 64);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3340      	adds	r3, #64	; 0x40
 8007750:	4a26      	ldr	r2, [pc, #152]	; (80077ec <sine_model_configure_weights+0xd4>)
 8007752:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 64);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3340      	adds	r3, #64	; 0x40
 8007758:	4a24      	ldr	r2, [pc, #144]	; (80077ec <sine_model_configure_weights+0xd4>)
 800775a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800775c:	4b24      	ldr	r3, [pc, #144]	; (80077f0 <sine_model_configure_weights+0xd8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007764:	4a22      	ldr	r2, [pc, #136]	; (80077f0 <sine_model_configure_weights+0xd8>)
 8007766:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3380      	adds	r3, #128	; 0x80
 800776c:	4a20      	ldr	r2, [pc, #128]	; (80077f0 <sine_model_configure_weights+0xd8>)
 800776e:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3380      	adds	r3, #128	; 0x80
 8007774:	4a1e      	ldr	r2, [pc, #120]	; (80077f0 <sine_model_configure_weights+0xd8>)
 8007776:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007778:	4b1e      	ldr	r3, [pc, #120]	; (80077f4 <sine_model_configure_weights+0xdc>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007780:	4a1c      	ldr	r2, [pc, #112]	; (80077f4 <sine_model_configure_weights+0xdc>)
 8007782:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1152);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800778a:	4a1a      	ldr	r2, [pc, #104]	; (80077f4 <sine_model_configure_weights+0xdc>)
 800778c:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1152);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8007794:	4a17      	ldr	r2, [pc, #92]	; (80077f4 <sine_model_configure_weights+0xdc>)
 8007796:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8007798:	4b17      	ldr	r3, [pc, #92]	; (80077f8 <sine_model_configure_weights+0xe0>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077a0:	4a15      	ldr	r2, [pc, #84]	; (80077f8 <sine_model_configure_weights+0xe0>)
 80077a2:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1216);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80077aa:	4a13      	ldr	r2, [pc, #76]	; (80077f8 <sine_model_configure_weights+0xe0>)
 80077ac:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1216);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80077b4:	4a10      	ldr	r2, [pc, #64]	; (80077f8 <sine_model_configure_weights+0xe0>)
 80077b6:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80077b8:	4b10      	ldr	r3, [pc, #64]	; (80077fc <sine_model_configure_weights+0xe4>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077c0:	4a0e      	ldr	r2, [pc, #56]	; (80077fc <sine_model_configure_weights+0xe4>)
 80077c2:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1280);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ca:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <sine_model_configure_weights+0xe4>)
 80077cc:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1280);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077d4:	4a09      	ldr	r2, [pc, #36]	; (80077fc <sine_model_configure_weights+0xe4>)
 80077d6:	60d3      	str	r3, [r2, #12]
  }

  return true;
 80077d8:	2301      	movs	r3, #1
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	200000d0 	.word	0x200000d0
 80077ec:	200000e0 	.word	0x200000e0
 80077f0:	200000f0 	.word	0x200000f0
 80077f4:	20000100 	.word	0x20000100
 80077f8:	20000110 	.word	0x20000110
 80077fc:	20000120 	.word	0x20000120

08007800 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af02      	add	r7, sp, #8
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800780a:	2300      	movs	r3, #0
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	2304      	movs	r3, #4
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	2301      	movs	r3, #1
 8007814:	4a04      	ldr	r2, [pc, #16]	; (8007828 <ai_sine_model_create+0x28>)
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f881 	bl	8007920 <ai_platform_network_create>
 800781e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	2000000c 	.word	0x2000000c

0800782c <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f8e3 	bl	8007a04 <ai_platform_network_init>
 800783e:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <ai_sine_model_init+0x1e>
 8007846:	2300      	movs	r3, #0
 8007848:	e02b      	b.n	80078a2 <ai_sine_model_init+0x76>

  ai_bool ok = true;
 800784a:	2301      	movs	r3, #1
 800784c:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, &params->params);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	4619      	mov	r1, r3
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff ff60 	bl	8007718 <sine_model_configure_weights>
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	7afb      	ldrb	r3, [r7, #11]
 800785e:	4013      	ands	r3, r2
 8007860:	2b00      	cmp	r3, #0
 8007862:	bf14      	ite	ne
 8007864:	2301      	movne	r3, #1
 8007866:	2300      	moveq	r3, #0
 8007868:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, &params->activations);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	3318      	adds	r3, #24
 800786e:	4619      	mov	r1, r3
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7ff ff0d 	bl	8007690 <sine_model_configure_activations>
 8007876:	4603      	mov	r3, r0
 8007878:	461a      	mov	r2, r3
 800787a:	7afb      	ldrb	r3, [r7, #11]
 800787c:	4013      	ands	r3, r2
 800787e:	2b00      	cmp	r3, #0
 8007880:	bf14      	ite	ne
 8007882:	2301      	movne	r3, #1
 8007884:	2300      	moveq	r3, #0
 8007886:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f92d 	bl	8007ae8 <ai_platform_network_post_init>
 800788e:	4603      	mov	r3, r0
 8007890:	461a      	mov	r2, r3
 8007892:	7afb      	ldrb	r3, [r7, #11]
 8007894:	4013      	ands	r3, r2
 8007896:	2b00      	cmp	r3, #0
 8007898:	bf14      	ite	ne
 800789a:	2301      	movne	r3, #1
 800789c:	2300      	moveq	r3, #0
 800789e:	72fb      	strb	r3, [r7, #11]

  return ok;
 80078a0:	7afb      	ldrb	r3, [r7, #11]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	60f8      	str	r0, [r7, #12]
 80078b2:	60b9      	str	r1, [r7, #8]
 80078b4:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	68b9      	ldr	r1, [r7, #8]
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f960 	bl	8007b80 <ai_platform_network_process>
 80078c0:	4603      	mov	r3, r0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <ai_sine_model_data_weights_get>:
*/

#include "sine_model_data.h"

ai_handle ai_sine_model_data_weights_get(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
    0x3e, 0xd2, 0x08, 0xf0, 0x3f, 0x5a, 0x0b, 0x8c, 0xbe,
    0x38, 0x4f, 0x3f, 0xbe, 0xe1, 0x4e, 0x82, 0x3f, 0x51,
    0xa5, 0x30, 0x3f, 0x67, 0x38, 0x7f, 0x3f, 0xef, 0xff,
    0x7e, 0xbf, 0xcb, 0x37, 0xb6, 0xbe, 0xb8, 0x2a, 0x7d,
    0x3e, 0x0c, 0x07, 0x98, 0xbe, 0xa2, 0xad, 0x93, 0xbe  };
  return AI_HANDLE_PTR(s_sine_model_weights);
 80078d0:	4b02      	ldr	r3, [pc, #8]	; (80078dc <ai_sine_model_data_weights_get+0x10>)
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	0800cb60 	.word	0x0800cb60

080078e0 <_platform_network_state_setup.isra.1>:
 80078e0:	b430      	push	{r4, r5}
 80078e2:	68dd      	ldr	r5, [r3, #12]
 80078e4:	695c      	ldr	r4, [r3, #20]
 80078e6:	68ed      	ldr	r5, [r5, #12]
 80078e8:	68e4      	ldr	r4, [r4, #12]
 80078ea:	fb04 f405 	mul.w	r4, r4, r5
 80078ee:	6084      	str	r4, [r0, #8]
 80078f0:	8809      	ldrh	r1, [r1, #0]
 80078f2:	fb04 f401 	mul.w	r4, r4, r1
 80078f6:	60c4      	str	r4, [r0, #12]
 80078f8:	6811      	ldr	r1, [r2, #0]
 80078fa:	6041      	str	r1, [r0, #4]
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	4414      	add	r4, r2
 8007900:	6004      	str	r4, [r0, #0]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	6814      	ldr	r4, [r2, #0]
 8007906:	00a4      	lsls	r4, r4, #2
 8007908:	d407      	bmi.n	800791a <_platform_network_state_setup.isra.1+0x3a>
 800790a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800790e:	1b64      	subs	r4, r4, r5
 8007910:	4421      	add	r1, r4
 8007912:	6091      	str	r1, [r2, #8]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	6842      	ldr	r2, [r0, #4]
 8007918:	60da      	str	r2, [r3, #12]
 800791a:	bc30      	pop	{r4, r5}
 800791c:	4770      	bx	lr
	...

08007920 <ai_platform_network_create>:
 8007920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007924:	4f30      	ldr	r7, [pc, #192]	; (80079e8 <ai_platform_network_create+0xc8>)
 8007926:	4e31      	ldr	r6, [pc, #196]	; (80079ec <ai_platform_network_create+0xcc>)
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	b083      	sub	sp, #12
 800792c:	f021 0101 	bic.w	r1, r1, #1
 8007930:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8007934:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	2101      	movs	r1, #1
 800793c:	6031      	str	r1, [r6, #0]
 800793e:	6831      	ldr	r1, [r6, #0]
 8007940:	2900      	cmp	r1, #0
 8007942:	d1fc      	bne.n	800793e <ai_platform_network_create+0x1e>
 8007944:	492a      	ldr	r1, [pc, #168]	; (80079f0 <ai_platform_network_create+0xd0>)
 8007946:	4d2b      	ldr	r5, [pc, #172]	; (80079f4 <ai_platform_network_create+0xd4>)
 8007948:	600d      	str	r5, [r1, #0]
 800794a:	680d      	ldr	r5, [r1, #0]
 800794c:	492a      	ldr	r1, [pc, #168]	; (80079f8 <ai_platform_network_create+0xd8>)
 800794e:	428d      	cmp	r5, r1
 8007950:	d000      	beq.n	8007954 <ai_platform_network_create+0x34>
 8007952:	e7fe      	b.n	8007952 <ai_platform_network_create+0x32>
 8007954:	b1e0      	cbz	r0, 8007990 <ai_platform_network_create+0x70>
 8007956:	4680      	mov	r8, r0
 8007958:	461d      	mov	r5, r3
 800795a:	4b28      	ldr	r3, [pc, #160]	; (80079fc <ai_platform_network_create+0xdc>)
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	f8c8 2000 	str.w	r2, [r8]
 8007962:	4617      	mov	r7, r2
 8007964:	f000 fb16 	bl	8007f94 <core_init>
 8007968:	b1b8      	cbz	r0, 800799a <ai_platform_network_create+0x7a>
 800796a:	4a1f      	ldr	r2, [pc, #124]	; (80079e8 <ai_platform_network_create+0xc8>)
 800796c:	491f      	ldr	r1, [pc, #124]	; (80079ec <ai_platform_network_create+0xcc>)
 800796e:	6813      	ldr	r3, [r2, #0]
 8007970:	f023 0301 	bic.w	r3, r3, #1
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	2301      	movs	r3, #1
 8007978:	6033      	str	r3, [r6, #0]
 800797a:	680e      	ldr	r6, [r1, #0]
 800797c:	2e00      	cmp	r6, #0
 800797e:	d1fc      	bne.n	800797a <ai_platform_network_create+0x5a>
 8007980:	4b1b      	ldr	r3, [pc, #108]	; (80079f0 <ai_platform_network_create+0xd0>)
 8007982:	4a1c      	ldr	r2, [pc, #112]	; (80079f4 <ai_platform_network_create+0xd4>)
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <ai_platform_network_create+0xd8>)
 800798a:	429a      	cmp	r2, r3
 800798c:	d016      	beq.n	80079bc <ai_platform_network_create+0x9c>
 800798e:	e7fe      	b.n	800798e <ai_platform_network_create+0x6e>
 8007990:	f241 0010 	movw	r0, #4112	; 0x1010
 8007994:	b003      	add	sp, #12
 8007996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800799a:	062d      	lsls	r5, r5, #24
 800799c:	0424      	lsls	r4, r4, #16
 800799e:	2130      	movs	r1, #48	; 0x30
 80079a0:	2300      	movs	r3, #0
 80079a2:	f8c8 3000 	str.w	r3, [r8]
 80079a6:	2210      	movs	r2, #16
 80079a8:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 80079ac:	2000      	movs	r0, #0
 80079ae:	432b      	orrs	r3, r5
 80079b0:	f361 0007 	bfi	r0, r1, #0, #8
 80079b4:	663b      	str	r3, [r7, #96]	; 0x60
 80079b6:	f362 201f 	bfi	r0, r2, #8, #24
 80079ba:	e7eb      	b.n	8007994 <ai_platform_network_create+0x74>
 80079bc:	062d      	lsls	r5, r5, #24
 80079be:	0424      	lsls	r4, r4, #16
 80079c0:	ea45 0304 	orr.w	r3, r5, r4
 80079c4:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80079c8:	d001      	beq.n	80079ce <ai_platform_network_create+0xae>
 80079ca:	2101      	movs	r1, #1
 80079cc:	e7e8      	b.n	80079a0 <ai_platform_network_create+0x80>
 80079ce:	a802      	add	r0, sp, #8
 80079d0:	4b0b      	ldr	r3, [pc, #44]	; (8007a00 <ai_platform_network_create+0xe0>)
 80079d2:	f840 3d04 	str.w	r3, [r0, #-4]!
 80079d6:	f000 ffaf 	bl	8008938 <ai_check_custom_types>
 80079da:	b110      	cbz	r0, 80079e2 <ai_platform_network_create+0xc2>
 80079dc:	4632      	mov	r2, r6
 80079de:	4631      	mov	r1, r6
 80079e0:	e7e2      	b.n	80079a8 <ai_platform_network_create+0x88>
 80079e2:	2102      	movs	r1, #2
 80079e4:	e7dc      	b.n	80079a0 <ai_platform_network_create+0x80>
 80079e6:	bf00      	nop
 80079e8:	e0002000 	.word	0xe0002000
 80079ec:	40023008 	.word	0x40023008
 80079f0:	40023000 	.word	0x40023000
 80079f4:	f407a5c2 	.word	0xf407a5c2
 80079f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80079fc:	a1c00100 	.word	0xa1c00100
 8007a00:	84048403 	.word	0x84048403

08007a04 <ai_platform_network_init>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	460c      	mov	r4, r1
 8007a08:	4605      	mov	r5, r0
 8007a0a:	b120      	cbz	r0, 8007a16 <ai_platform_network_init+0x12>
 8007a0c:	4b30      	ldr	r3, [pc, #192]	; (8007ad0 <ai_platform_network_init+0xcc>)
 8007a0e:	6802      	ldr	r2, [r0, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	bf18      	it	ne
 8007a14:	2500      	movne	r5, #0
 8007a16:	492f      	ldr	r1, [pc, #188]	; (8007ad4 <ai_platform_network_init+0xd0>)
 8007a18:	4a2f      	ldr	r2, [pc, #188]	; (8007ad8 <ai_platform_network_init+0xd4>)
 8007a1a:	680b      	ldr	r3, [r1, #0]
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	f023 0301 	bic.w	r3, r3, #1
 8007a22:	600b      	str	r3, [r1, #0]
 8007a24:	4613      	mov	r3, r2
 8007a26:	6010      	str	r0, [r2, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	d1fc      	bne.n	8007a28 <ai_platform_network_init+0x24>
 8007a2e:	4b2b      	ldr	r3, [pc, #172]	; (8007adc <ai_platform_network_init+0xd8>)
 8007a30:	4a2b      	ldr	r2, [pc, #172]	; (8007ae0 <ai_platform_network_init+0xdc>)
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	4b2b      	ldr	r3, [pc, #172]	; (8007ae4 <ai_platform_network_init+0xe0>)
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d000      	beq.n	8007a3e <ai_platform_network_init+0x3a>
 8007a3c:	e7fe      	b.n	8007a3c <ai_platform_network_init+0x38>
 8007a3e:	b1dd      	cbz	r5, 8007a78 <ai_platform_network_init+0x74>
 8007a40:	b1e4      	cbz	r4, 8007a7c <ai_platform_network_init+0x78>
 8007a42:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8007a44:	6926      	ldr	r6, [r4, #16]
 8007a46:	b30f      	cbz	r7, 8007a8c <ai_platform_network_init+0x88>
 8007a48:	b38e      	cbz	r6, 8007aae <ai_platform_network_init+0xaa>
 8007a4a:	4627      	mov	r7, r4
 8007a4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007a4e:	f105 0618 	add.w	r6, r5, #24
 8007a52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007a54:	e897 0003 	ldmia.w	r7, {r0, r1}
 8007a58:	e886 0003 	stmia.w	r6, {r0, r1}
 8007a5c:	3418      	adds	r4, #24
 8007a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a60:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8007a64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007a66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e886 0003 	stmia.w	r6, {r0, r1}
 8007a70:	60eb      	str	r3, [r5, #12]
 8007a72:	4628      	mov	r0, r5
 8007a74:	f000 ff8a 	bl	800898c <ai_layers_init_all>
 8007a78:	4628      	mov	r0, r5
 8007a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a7c:	f105 0010 	add.w	r0, r5, #16
 8007a80:	2211      	movs	r2, #17
 8007a82:	2110      	movs	r1, #16
 8007a84:	4625      	mov	r5, r4
 8007a86:	f000 fa87 	bl	8007f98 <core_set_error>
 8007a8a:	e7f5      	b.n	8007a78 <ai_platform_network_init+0x74>
 8007a8c:	8c21      	ldrh	r1, [r4, #32]
 8007a8e:	8be2      	ldrh	r2, [r4, #30]
 8007a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a92:	fb02 f201 	mul.w	r2, r2, r1
 8007a96:	fb03 f302 	mul.w	r3, r3, r2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0d4      	beq.n	8007a48 <ai_platform_network_init+0x44>
 8007a9e:	f105 0010 	add.w	r0, r5, #16
 8007aa2:	2213      	movs	r2, #19
 8007aa4:	2110      	movs	r1, #16
 8007aa6:	463d      	mov	r5, r7
 8007aa8:	f000 fa76 	bl	8007f98 <core_set_error>
 8007aac:	e7e4      	b.n	8007a78 <ai_platform_network_init+0x74>
 8007aae:	8921      	ldrh	r1, [r4, #8]
 8007ab0:	88e2      	ldrh	r2, [r4, #6]
 8007ab2:	68e3      	ldr	r3, [r4, #12]
 8007ab4:	fb02 f201 	mul.w	r2, r2, r1
 8007ab8:	fb03 f302 	mul.w	r3, r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0c4      	beq.n	8007a4a <ai_platform_network_init+0x46>
 8007ac0:	f105 0010 	add.w	r0, r5, #16
 8007ac4:	2212      	movs	r2, #18
 8007ac6:	2110      	movs	r1, #16
 8007ac8:	4635      	mov	r5, r6
 8007aca:	f000 fa65 	bl	8007f98 <core_set_error>
 8007ace:	e7d3      	b.n	8007a78 <ai_platform_network_init+0x74>
 8007ad0:	a1c00100 	.word	0xa1c00100
 8007ad4:	e0002000 	.word	0xe0002000
 8007ad8:	40023008 	.word	0x40023008
 8007adc:	40023000 	.word	0x40023000
 8007ae0:	f407a5c2 	.word	0xf407a5c2
 8007ae4:	b5e8b5cd 	.word	0xb5e8b5cd

08007ae8 <ai_platform_network_post_init>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4604      	mov	r4, r0
 8007aec:	b120      	cbz	r0, 8007af8 <ai_platform_network_post_init+0x10>
 8007aee:	4b1e      	ldr	r3, [pc, #120]	; (8007b68 <ai_platform_network_post_init+0x80>)
 8007af0:	6802      	ldr	r2, [r0, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	bf18      	it	ne
 8007af6:	2400      	movne	r4, #0
 8007af8:	491c      	ldr	r1, [pc, #112]	; (8007b6c <ai_platform_network_post_init+0x84>)
 8007afa:	4a1d      	ldr	r2, [pc, #116]	; (8007b70 <ai_platform_network_post_init+0x88>)
 8007afc:	680b      	ldr	r3, [r1, #0]
 8007afe:	2001      	movs	r0, #1
 8007b00:	f023 0301 	bic.w	r3, r3, #1
 8007b04:	600b      	str	r3, [r1, #0]
 8007b06:	4613      	mov	r3, r2
 8007b08:	6010      	str	r0, [r2, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	2a00      	cmp	r2, #0
 8007b0e:	d1fc      	bne.n	8007b0a <ai_platform_network_post_init+0x22>
 8007b10:	4b18      	ldr	r3, [pc, #96]	; (8007b74 <ai_platform_network_post_init+0x8c>)
 8007b12:	4a19      	ldr	r2, [pc, #100]	; (8007b78 <ai_platform_network_post_init+0x90>)
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	4b18      	ldr	r3, [pc, #96]	; (8007b7c <ai_platform_network_post_init+0x94>)
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d000      	beq.n	8007b20 <ai_platform_network_post_init+0x38>
 8007b1e:	e7fe      	b.n	8007b1e <ai_platform_network_post_init+0x36>
 8007b20:	b1bc      	cbz	r4, 8007b52 <ai_platform_network_post_init+0x6a>
 8007b22:	68e3      	ldr	r3, [r4, #12]
 8007b24:	f013 0502 	ands.w	r5, r3, #2
 8007b28:	d015      	beq.n	8007b56 <ai_platform_network_post_init+0x6e>
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 ff42 	bl	80089b4 <ai_layers_post_init_all>
 8007b30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b32:	b163      	cbz	r3, 8007b4e <ai_platform_network_post_init+0x66>
 8007b34:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8007b36:	b91d      	cbnz	r5, 8007b40 <ai_platform_network_post_init+0x58>
 8007b38:	e009      	b.n	8007b4e <ai_platform_network_post_init+0x66>
 8007b3a:	461d      	mov	r5, r3
 8007b3c:	b13b      	cbz	r3, 8007b4e <ai_platform_network_post_init+0x66>
 8007b3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b40:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007b42:	4629      	mov	r1, r5
 8007b44:	2000      	movs	r0, #0
 8007b46:	4798      	blx	r3
 8007b48:	692b      	ldr	r3, [r5, #16]
 8007b4a:	42ab      	cmp	r3, r5
 8007b4c:	d1f5      	bne.n	8007b3a <ai_platform_network_post_init+0x52>
 8007b4e:	2001      	movs	r0, #1
 8007b50:	bd38      	pop	{r3, r4, r5, pc}
 8007b52:	4620      	mov	r0, r4
 8007b54:	bd38      	pop	{r3, r4, r5, pc}
 8007b56:	f104 0010 	add.w	r0, r4, #16
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	2111      	movs	r1, #17
 8007b5e:	f000 fa1b 	bl	8007f98 <core_set_error>
 8007b62:	4628      	mov	r0, r5
 8007b64:	bd38      	pop	{r3, r4, r5, pc}
 8007b66:	bf00      	nop
 8007b68:	a1c00100 	.word	0xa1c00100
 8007b6c:	e0002000 	.word	0xe0002000
 8007b70:	40023008 	.word	0x40023008
 8007b74:	40023000 	.word	0x40023000
 8007b78:	f407a5c2 	.word	0xf407a5c2
 8007b7c:	b5e8b5cd 	.word	0xb5e8b5cd

08007b80 <ai_platform_network_process>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	b083      	sub	sp, #12
 8007b86:	4604      	mov	r4, r0
 8007b88:	9201      	str	r2, [sp, #4]
 8007b8a:	b120      	cbz	r0, 8007b96 <ai_platform_network_process+0x16>
 8007b8c:	4ba5      	ldr	r3, [pc, #660]	; (8007e24 <ai_platform_network_process+0x2a4>)
 8007b8e:	6802      	ldr	r2, [r0, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	bf18      	it	ne
 8007b94:	2400      	movne	r4, #0
 8007b96:	48a4      	ldr	r0, [pc, #656]	; (8007e28 <ai_platform_network_process+0x2a8>)
 8007b98:	4ba4      	ldr	r3, [pc, #656]	; (8007e2c <ai_platform_network_process+0x2ac>)
 8007b9a:	6802      	ldr	r2, [r0, #0]
 8007b9c:	f022 0201 	bic.w	r2, r2, #1
 8007ba0:	6002      	str	r2, [r0, #0]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	2a00      	cmp	r2, #0
 8007baa:	d1fc      	bne.n	8007ba6 <ai_platform_network_process+0x26>
 8007bac:	4ba0      	ldr	r3, [pc, #640]	; (8007e30 <ai_platform_network_process+0x2b0>)
 8007bae:	4aa1      	ldr	r2, [pc, #644]	; (8007e34 <ai_platform_network_process+0x2b4>)
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	4ba0      	ldr	r3, [pc, #640]	; (8007e38 <ai_platform_network_process+0x2b8>)
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d000      	beq.n	8007bbc <ai_platform_network_process+0x3c>
 8007bba:	e7fe      	b.n	8007bba <ai_platform_network_process+0x3a>
 8007bbc:	2c00      	cmp	r4, #0
 8007bbe:	d066      	beq.n	8007c8e <ai_platform_network_process+0x10e>
 8007bc0:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8007bc4:	b107      	cbz	r7, 8007bc8 <ai_platform_network_process+0x48>
 8007bc6:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8007bc8:	68e3      	ldr	r3, [r4, #12]
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	2600      	movs	r6, #0
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	6166      	str	r6, [r4, #20]
 8007bd4:	f040 80fe 	bne.w	8007dd4 <ai_platform_network_process+0x254>
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	d07f      	beq.n	8007cdc <ai_platform_network_process+0x15c>
 8007bdc:	2f00      	cmp	r7, #0
 8007bde:	d07d      	beq.n	8007cdc <ai_platform_network_process+0x15c>
 8007be0:	883b      	ldrh	r3, [r7, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d07a      	beq.n	8007cdc <ai_platform_network_process+0x15c>
 8007be6:	460d      	mov	r5, r1
 8007be8:	46a0      	mov	r8, r4
 8007bea:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8007bee:	429e      	cmp	r6, r3
 8007bf0:	d27d      	bcs.n	8007cee <ai_platform_network_process+0x16e>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d07a      	beq.n	8007cee <ai_platform_network_process+0x16e>
 8007bf8:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8007bfc:	2c00      	cmp	r4, #0
 8007bfe:	d076      	beq.n	8007cee <ai_platform_network_process+0x16e>
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8007c08:	d067      	beq.n	8007cda <ai_platform_network_process+0x15a>
 8007c0a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8007c0e:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8007c12:	69a0      	ldr	r0, [r4, #24]
 8007c14:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8007c18:	6841      	ldr	r1, [r0, #4]
 8007c1a:	fb0b f30e 	mul.w	r3, fp, lr
 8007c1e:	fb0c f303 	mul.w	r3, ip, r3
 8007c22:	4299      	cmp	r1, r3
 8007c24:	d350      	bcc.n	8007cc8 <ai_platform_network_process+0x148>
 8007c26:	68e3      	ldr	r3, [r4, #12]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	455a      	cmp	r2, fp
 8007c2c:	d14c      	bne.n	8007cc8 <ai_platform_network_process+0x148>
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	4572      	cmp	r2, lr
 8007c32:	d149      	bne.n	8007cc8 <ai_platform_network_process+0x148>
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	459c      	cmp	ip, r3
 8007c38:	d146      	bne.n	8007cc8 <ai_platform_network_process+0x148>
 8007c3a:	6800      	ldr	r0, [r0, #0]
 8007c3c:	f000 ff6c 	bl	8008b18 <ai_array_get_byte_size>
 8007c40:	68e2      	ldr	r2, [r4, #12]
 8007c42:	6963      	ldr	r3, [r4, #20]
 8007c44:	68d2      	ldr	r2, [r2, #12]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	fb03 f302 	mul.w	r3, r3, r2
 8007c4c:	4298      	cmp	r0, r3
 8007c4e:	d33b      	bcc.n	8007cc8 <ai_platform_network_process+0x148>
 8007c50:	69a3      	ldr	r3, [r4, #24]
 8007c52:	6818      	ldr	r0, [r3, #0]
 8007c54:	f000 ff14 	bl	8008a80 <ai_array_to_buffer_fmt>
 8007c58:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007c5c:	4043      	eors	r3, r0
 8007c5e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007c62:	d128      	bne.n	8007cb6 <ai_platform_network_process+0x136>
 8007c64:	68eb      	ldr	r3, [r5, #12]
 8007c66:	b1f3      	cbz	r3, 8007ca6 <ai_platform_network_process+0x126>
 8007c68:	f8b5 b000 	ldrh.w	fp, [r5]
 8007c6c:	f1bb 0f00 	cmp.w	fp, #0
 8007c70:	d012      	beq.n	8007c98 <ai_platform_network_process+0x118>
 8007c72:	4623      	mov	r3, r4
 8007c74:	f105 020c 	add.w	r2, r5, #12
 8007c78:	4629      	mov	r1, r5
 8007c7a:	4650      	mov	r0, sl
 8007c7c:	f7ff fe30 	bl	80078e0 <_platform_network_state_setup.isra.1>
 8007c80:	45d9      	cmp	r9, fp
 8007c82:	883b      	ldrh	r3, [r7, #0]
 8007c84:	bf38      	it	cc
 8007c86:	46d9      	movcc	r9, fp
 8007c88:	3601      	adds	r6, #1
 8007c8a:	3518      	adds	r5, #24
 8007c8c:	e7af      	b.n	8007bee <ai_platform_network_process+0x6e>
 8007c8e:	46a3      	mov	fp, r4
 8007c90:	4658      	mov	r0, fp
 8007c92:	b003      	add	sp, #12
 8007c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c98:	f108 0010 	add.w	r0, r8, #16
 8007c9c:	2221      	movs	r2, #33	; 0x21
 8007c9e:	2112      	movs	r1, #18
 8007ca0:	f000 f97a 	bl	8007f98 <core_set_error>
 8007ca4:	e7f4      	b.n	8007c90 <ai_platform_network_process+0x110>
 8007ca6:	f108 0010 	add.w	r0, r8, #16
 8007caa:	2217      	movs	r2, #23
 8007cac:	2112      	movs	r1, #18
 8007cae:	469b      	mov	fp, r3
 8007cb0:	f000 f972 	bl	8007f98 <core_set_error>
 8007cb4:	e7ec      	b.n	8007c90 <ai_platform_network_process+0x110>
 8007cb6:	f108 0010 	add.w	r0, r8, #16
 8007cba:	2219      	movs	r2, #25
 8007cbc:	2112      	movs	r1, #18
 8007cbe:	f000 f96b 	bl	8007f98 <core_set_error>
 8007cc2:	f04f 0b00 	mov.w	fp, #0
 8007cc6:	e7e3      	b.n	8007c90 <ai_platform_network_process+0x110>
 8007cc8:	f108 0010 	add.w	r0, r8, #16
 8007ccc:	2218      	movs	r2, #24
 8007cce:	2112      	movs	r1, #18
 8007cd0:	f000 f962 	bl	8007f98 <core_set_error>
 8007cd4:	f04f 0b00 	mov.w	fp, #0
 8007cd8:	e7da      	b.n	8007c90 <ai_platform_network_process+0x110>
 8007cda:	4644      	mov	r4, r8
 8007cdc:	f104 0010 	add.w	r0, r4, #16
 8007ce0:	2217      	movs	r2, #23
 8007ce2:	2112      	movs	r1, #18
 8007ce4:	f000 f958 	bl	8007f98 <core_set_error>
 8007ce8:	f04f 0b00 	mov.w	fp, #0
 8007cec:	e7d0      	b.n	8007c90 <ai_platform_network_process+0x110>
 8007cee:	9a01      	ldr	r2, [sp, #4]
 8007cf0:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8007cf4:	4644      	mov	r4, r8
 8007cf6:	2a00      	cmp	r2, #0
 8007cf8:	f000 80a2 	beq.w	8007e40 <ai_platform_network_process+0x2c0>
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	f240 8140 	bls.w	8007f82 <ai_platform_network_process+0x402>
 8007d02:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8007d06:	f118 0f0c 	cmn.w	r8, #12
 8007d0a:	f000 813a 	beq.w	8007f82 <ai_platform_network_process+0x402>
 8007d0e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 8135 	beq.w	8007f82 <ai_platform_network_process+0x402>
 8007d18:	9d01      	ldr	r5, [sp, #4]
 8007d1a:	2700      	movs	r7, #0
 8007d1c:	3504      	adds	r5, #4
 8007d1e:	429f      	cmp	r7, r3
 8007d20:	f080 808c 	bcs.w	8007e3c <ai_platform_network_process+0x2bc>
 8007d24:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 8087 	beq.w	8007e3c <ai_platform_network_process+0x2bc>
 8007d2e:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8007d32:	2e00      	cmp	r6, #0
 8007d34:	f000 8082 	beq.w	8007e3c <ai_platform_network_process+0x2bc>
 8007d38:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8007d42:	d067      	beq.n	8007e14 <ai_platform_network_process+0x294>
 8007d44:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8007d48:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8007d4c:	69b0      	ldr	r0, [r6, #24]
 8007d4e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8007d52:	6841      	ldr	r1, [r0, #4]
 8007d54:	fb0b f30e 	mul.w	r3, fp, lr
 8007d58:	fb0c f303 	mul.w	r3, ip, r3
 8007d5c:	4299      	cmp	r1, r3
 8007d5e:	f0c0 8110 	bcc.w	8007f82 <ai_platform_network_process+0x402>
 8007d62:	68f3      	ldr	r3, [r6, #12]
 8007d64:	68da      	ldr	r2, [r3, #12]
 8007d66:	455a      	cmp	r2, fp
 8007d68:	f040 810b 	bne.w	8007f82 <ai_platform_network_process+0x402>
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	4572      	cmp	r2, lr
 8007d70:	f040 8107 	bne.w	8007f82 <ai_platform_network_process+0x402>
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	459c      	cmp	ip, r3
 8007d78:	f040 8103 	bne.w	8007f82 <ai_platform_network_process+0x402>
 8007d7c:	6800      	ldr	r0, [r0, #0]
 8007d7e:	f000 fecb 	bl	8008b18 <ai_array_get_byte_size>
 8007d82:	68f2      	ldr	r2, [r6, #12]
 8007d84:	6973      	ldr	r3, [r6, #20]
 8007d86:	68d2      	ldr	r2, [r2, #12]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	fb03 f302 	mul.w	r3, r3, r2
 8007d8e:	4298      	cmp	r0, r3
 8007d90:	f0c0 80f7 	bcc.w	8007f82 <ai_platform_network_process+0x402>
 8007d94:	69b3      	ldr	r3, [r6, #24]
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	f000 fe72 	bl	8008a80 <ai_array_to_buffer_fmt>
 8007d9c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007da0:	4043      	eors	r3, r0
 8007da2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007da6:	d12c      	bne.n	8007e02 <ai_platform_network_process+0x282>
 8007da8:	68eb      	ldr	r3, [r5, #12]
 8007daa:	b313      	cbz	r3, 8007df2 <ai_platform_network_process+0x272>
 8007dac:	f8b5 b000 	ldrh.w	fp, [r5]
 8007db0:	f1bb 0f00 	cmp.w	fp, #0
 8007db4:	d016      	beq.n	8007de4 <ai_platform_network_process+0x264>
 8007db6:	4633      	mov	r3, r6
 8007db8:	f105 020c 	add.w	r2, r5, #12
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	4650      	mov	r0, sl
 8007dc0:	f7ff fd8e 	bl	80078e0 <_platform_network_state_setup.isra.1>
 8007dc4:	45d9      	cmp	r9, fp
 8007dc6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007dca:	bf38      	it	cc
 8007dcc:	46d9      	movcc	r9, fp
 8007dce:	3701      	adds	r7, #1
 8007dd0:	3518      	adds	r5, #24
 8007dd2:	e7a4      	b.n	8007d1e <ai_platform_network_process+0x19e>
 8007dd4:	f104 0010 	add.w	r0, r4, #16
 8007dd8:	2230      	movs	r2, #48	; 0x30
 8007dda:	2111      	movs	r1, #17
 8007ddc:	f000 f8dc 	bl	8007f98 <core_set_error>
 8007de0:	46b3      	mov	fp, r6
 8007de2:	e755      	b.n	8007c90 <ai_platform_network_process+0x110>
 8007de4:	f104 0010 	add.w	r0, r4, #16
 8007de8:	2221      	movs	r2, #33	; 0x21
 8007dea:	2113      	movs	r1, #19
 8007dec:	f000 f8d4 	bl	8007f98 <core_set_error>
 8007df0:	e74e      	b.n	8007c90 <ai_platform_network_process+0x110>
 8007df2:	f104 0010 	add.w	r0, r4, #16
 8007df6:	2217      	movs	r2, #23
 8007df8:	2113      	movs	r1, #19
 8007dfa:	469b      	mov	fp, r3
 8007dfc:	f000 f8cc 	bl	8007f98 <core_set_error>
 8007e00:	e746      	b.n	8007c90 <ai_platform_network_process+0x110>
 8007e02:	f104 0010 	add.w	r0, r4, #16
 8007e06:	2219      	movs	r2, #25
 8007e08:	2113      	movs	r1, #19
 8007e0a:	f000 f8c5 	bl	8007f98 <core_set_error>
 8007e0e:	f04f 0b00 	mov.w	fp, #0
 8007e12:	e73d      	b.n	8007c90 <ai_platform_network_process+0x110>
 8007e14:	f104 0010 	add.w	r0, r4, #16
 8007e18:	2217      	movs	r2, #23
 8007e1a:	2113      	movs	r1, #19
 8007e1c:	f000 f8bc 	bl	8007f98 <core_set_error>
 8007e20:	46d3      	mov	fp, sl
 8007e22:	e735      	b.n	8007c90 <ai_platform_network_process+0x110>
 8007e24:	a1c00100 	.word	0xa1c00100
 8007e28:	e0002000 	.word	0xe0002000
 8007e2c:	40023008 	.word	0x40023008
 8007e30:	40023000 	.word	0x40023000
 8007e34:	f407a5c2 	.word	0xf407a5c2
 8007e38:	b5e8b5cd 	.word	0xb5e8b5cd
 8007e3c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8007e40:	f8a4 9014 	strh.w	r9, [r4, #20]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 8099 	beq.w	8007f7c <ai_platform_network_process+0x3fc>
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007e4e:	f240 8093 	bls.w	8007f78 <ai_platform_network_process+0x3f8>
 8007e52:	f105 070c 	add.w	r7, r5, #12
 8007e56:	8ae0      	ldrh	r0, [r4, #22]
 8007e58:	8aa3      	ldrh	r3, [r4, #20]
 8007e5a:	4283      	cmp	r3, r0
 8007e5c:	d977      	bls.n	8007f4e <ai_platform_network_process+0x3ce>
 8007e5e:	46a3      	mov	fp, r4
 8007e60:	2d00      	cmp	r5, #0
 8007e62:	d032      	beq.n	8007eca <ai_platform_network_process+0x34a>
 8007e64:	882b      	ldrh	r3, [r5, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d02f      	beq.n	8007eca <ai_platform_network_process+0x34a>
 8007e6a:	686b      	ldr	r3, [r5, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d02c      	beq.n	8007eca <ai_platform_network_process+0x34a>
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f04f 0800 	mov.w	r8, #0
 8007e76:	b343      	cbz	r3, 8007eca <ai_platform_network_process+0x34a>
 8007e78:	68a9      	ldr	r1, [r5, #8]
 8007e7a:	699a      	ldr	r2, [r3, #24]
 8007e7c:	f8d1 a000 	ldr.w	sl, [r1]
 8007e80:	6814      	ldr	r4, [r2, #0]
 8007e82:	6890      	ldr	r0, [r2, #8]
 8007e84:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007e88:	eb0a 0609 	add.w	r6, sl, r9
 8007e8c:	00a4      	lsls	r4, r4, #2
 8007e8e:	6871      	ldr	r1, [r6, #4]
 8007e90:	d45f      	bmi.n	8007f52 <ai_platform_network_process+0x3d2>
 8007e92:	68d4      	ldr	r4, [r2, #12]
 8007e94:	1b00      	subs	r0, r0, r4
 8007e96:	4401      	add	r1, r0
 8007e98:	6091      	str	r1, [r2, #8]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	6872      	ldr	r2, [r6, #4]
 8007e9e:	60da      	str	r2, [r3, #12]
 8007ea0:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007ea4:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007ea8:	440b      	add	r3, r1
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	bf24      	itt	cs
 8007eae:	68f3      	ldrcs	r3, [r6, #12]
 8007eb0:	1ad3      	subcs	r3, r2, r3
 8007eb2:	6073      	str	r3, [r6, #4]
 8007eb4:	882b      	ldrh	r3, [r5, #0]
 8007eb6:	f108 0801 	add.w	r8, r8, #1
 8007eba:	4598      	cmp	r8, r3
 8007ebc:	d205      	bcs.n	8007eca <ai_platform_network_process+0x34a>
 8007ebe:	686b      	ldr	r3, [r5, #4]
 8007ec0:	b11b      	cbz	r3, 8007eca <ai_platform_network_process+0x34a>
 8007ec2:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1d6      	bne.n	8007e78 <ai_platform_network_process+0x2f8>
 8007eca:	4658      	mov	r0, fp
 8007ecc:	f000 fd8a 	bl	80089e4 <ai_layers_forward_all>
 8007ed0:	2f00      	cmp	r7, #0
 8007ed2:	d032      	beq.n	8007f3a <ai_platform_network_process+0x3ba>
 8007ed4:	883b      	ldrh	r3, [r7, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d02f      	beq.n	8007f3a <ai_platform_network_process+0x3ba>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	b36b      	cbz	r3, 8007f3a <ai_platform_network_process+0x3ba>
 8007ede:	6818      	ldr	r0, [r3, #0]
 8007ee0:	b358      	cbz	r0, 8007f3a <ai_platform_network_process+0x3ba>
 8007ee2:	f04f 0800 	mov.w	r8, #0
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	6981      	ldr	r1, [r0, #24]
 8007eea:	f8d3 a000 	ldr.w	sl, [r3]
 8007eee:	680c      	ldr	r4, [r1, #0]
 8007ef0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007ef4:	eb0a 0609 	add.w	r6, sl, r9
 8007ef8:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8007efc:	00a4      	lsls	r4, r4, #2
 8007efe:	eb0c 0302 	add.w	r3, ip, r2
 8007f02:	d42a      	bmi.n	8007f5a <ai_platform_network_process+0x3da>
 8007f04:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	bf24      	itt	cs
 8007f0c:	68f3      	ldrcs	r3, [r6, #12]
 8007f0e:	1ad3      	subcs	r3, r2, r3
 8007f10:	6073      	str	r3, [r6, #4]
 8007f12:	6981      	ldr	r1, [r0, #24]
 8007f14:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8007f18:	1b12      	subs	r2, r2, r4
 8007f1a:	4413      	add	r3, r2
 8007f1c:	608b      	str	r3, [r1, #8]
 8007f1e:	6983      	ldr	r3, [r0, #24]
 8007f20:	6872      	ldr	r2, [r6, #4]
 8007f22:	60da      	str	r2, [r3, #12]
 8007f24:	883b      	ldrh	r3, [r7, #0]
 8007f26:	f108 0801 	add.w	r8, r8, #1
 8007f2a:	4598      	cmp	r8, r3
 8007f2c:	d205      	bcs.n	8007f3a <ai_platform_network_process+0x3ba>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	b11b      	cbz	r3, 8007f3a <ai_platform_network_process+0x3ba>
 8007f32:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d1d5      	bne.n	8007ee6 <ai_platform_network_process+0x366>
 8007f3a:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8007f3e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007f42:	3001      	adds	r0, #1
 8007f44:	b280      	uxth	r0, r0
 8007f46:	4283      	cmp	r3, r0
 8007f48:	f8ab 0016 	strh.w	r0, [fp, #22]
 8007f4c:	d888      	bhi.n	8007e60 <ai_platform_network_process+0x2e0>
 8007f4e:	4683      	mov	fp, r0
 8007f50:	e69e      	b.n	8007c90 <ai_platform_network_process+0x110>
 8007f52:	68b2      	ldr	r2, [r6, #8]
 8007f54:	f000 fe34 	bl	8008bc0 <memcpy>
 8007f58:	e7a2      	b.n	8007ea0 <ai_platform_network_process+0x320>
 8007f5a:	6889      	ldr	r1, [r1, #8]
 8007f5c:	4660      	mov	r0, ip
 8007f5e:	f000 fe2f 	bl	8008bc0 <memcpy>
 8007f62:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007f66:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007f6a:	440b      	add	r3, r1
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	bf24      	itt	cs
 8007f70:	68f3      	ldrcs	r3, [r6, #12]
 8007f72:	1ad3      	subcs	r3, r2, r3
 8007f74:	6073      	str	r3, [r6, #4]
 8007f76:	e7d5      	b.n	8007f24 <ai_platform_network_process+0x3a4>
 8007f78:	2700      	movs	r7, #0
 8007f7a:	e76c      	b.n	8007e56 <ai_platform_network_process+0x2d6>
 8007f7c:	461d      	mov	r5, r3
 8007f7e:	461f      	mov	r7, r3
 8007f80:	e769      	b.n	8007e56 <ai_platform_network_process+0x2d6>
 8007f82:	f104 0010 	add.w	r0, r4, #16
 8007f86:	2218      	movs	r2, #24
 8007f88:	2113      	movs	r1, #19
 8007f8a:	f000 f805 	bl	8007f98 <core_set_error>
 8007f8e:	f04f 0b00 	mov.w	fp, #0
 8007f92:	e67d      	b.n	8007c90 <ai_platform_network_process+0x110>

08007f94 <core_init>:
 8007f94:	2001      	movs	r0, #1
 8007f96:	4770      	bx	lr

08007f98 <core_set_error>:
 8007f98:	7803      	ldrb	r3, [r0, #0]
 8007f9a:	b933      	cbnz	r3, 8007faa <core_set_error+0x12>
 8007f9c:	7001      	strb	r1, [r0, #0]
 8007f9e:	6803      	ldr	r3, [r0, #0]
 8007fa0:	f362 231f 	bfi	r3, r2, #8, #24
 8007fa4:	6003      	str	r3, [r0, #0]
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	4770      	bx	lr
 8007faa:	2000      	movs	r0, #0
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop

08007fb0 <ai_dict8_dot_array_f32>:
 8007fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb4:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007fb8:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8007fbc:	f000 80c0 	beq.w	8008140 <ai_dict8_dot_array_f32+0x190>
 8007fc0:	f101 0408 	add.w	r4, r1, #8
 8007fc4:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8007fc8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8008148 <ai_dict8_dot_array_f32+0x198>
 8007fcc:	eb04 0e09 	add.w	lr, r4, r9
 8007fd0:	f103 0520 	add.w	r5, r3, #32
 8007fd4:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8007fd8:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8007fdc:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8007fe0:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8007fe4:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8007fe8:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8007fec:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8007ff0:	ed55 3a04 	vldr	s7, [r5, #-16]
 8007ff4:	ed55 4a03 	vldr	s9, [r5, #-12]
 8007ff8:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007ffc:	ed55 6a01 	vldr	s13, [r5, #-4]
 8008000:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008004:	edd6 7a00 	vldr	s15, [r6]
 8008008:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800800c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8008010:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008014:	ed9a 3a00 	vldr	s6, [sl]
 8008018:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800801c:	eee3 7a05 	vfma.f32	s15, s6, s10
 8008020:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008024:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008028:	ed97 3a00 	vldr	s6, [r7]
 800802c:	ed96 5a00 	vldr	s10, [r6]
 8008030:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8008034:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8008038:	eee3 7a04 	vfma.f32	s15, s6, s8
 800803c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8008040:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008044:	ed9a 3a00 	vldr	s6, [sl]
 8008048:	ed96 4a00 	vldr	s8, [r6]
 800804c:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8008050:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008054:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008058:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800805c:	ed97 5a00 	vldr	s10, [r7]
 8008060:	ed96 6a00 	vldr	s12, [r6]
 8008064:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008068:	3408      	adds	r4, #8
 800806a:	45a6      	cmp	lr, r4
 800806c:	f105 0520 	add.w	r5, r5, #32
 8008070:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008074:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008078:	eee6 7a26 	vfma.f32	s15, s12, s13
 800807c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008080:	d1a8      	bne.n	8007fd4 <ai_dict8_dot_array_f32+0x24>
 8008082:	4449      	add	r1, r9
 8008084:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8008088:	f01c 0c07 	ands.w	ip, ip, #7
 800808c:	d050      	beq.n	8008130 <ai_dict8_dot_array_f32+0x180>
 800808e:	780c      	ldrb	r4, [r1, #0]
 8008090:	edd3 6a00 	vldr	s13, [r3]
 8008094:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008098:	edd4 7a00 	vldr	s15, [r4]
 800809c:	f1bc 0f01 	cmp.w	ip, #1
 80080a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080a4:	d044      	beq.n	8008130 <ai_dict8_dot_array_f32+0x180>
 80080a6:	784c      	ldrb	r4, [r1, #1]
 80080a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80080ac:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80080b0:	edd4 7a00 	vldr	s15, [r4]
 80080b4:	f1bc 0f02 	cmp.w	ip, #2
 80080b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080bc:	d038      	beq.n	8008130 <ai_dict8_dot_array_f32+0x180>
 80080be:	788c      	ldrb	r4, [r1, #2]
 80080c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80080c4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80080c8:	edd4 7a00 	vldr	s15, [r4]
 80080cc:	f1bc 0f03 	cmp.w	ip, #3
 80080d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080d4:	d02c      	beq.n	8008130 <ai_dict8_dot_array_f32+0x180>
 80080d6:	78cc      	ldrb	r4, [r1, #3]
 80080d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80080dc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80080e0:	edd4 7a00 	vldr	s15, [r4]
 80080e4:	f1bc 0f04 	cmp.w	ip, #4
 80080e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080ec:	d020      	beq.n	8008130 <ai_dict8_dot_array_f32+0x180>
 80080ee:	790c      	ldrb	r4, [r1, #4]
 80080f0:	edd3 6a04 	vldr	s13, [r3, #16]
 80080f4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80080f8:	edd4 7a00 	vldr	s15, [r4]
 80080fc:	f1bc 0f05 	cmp.w	ip, #5
 8008100:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008104:	d014      	beq.n	8008130 <ai_dict8_dot_array_f32+0x180>
 8008106:	794c      	ldrb	r4, [r1, #5]
 8008108:	edd3 6a05 	vldr	s13, [r3, #20]
 800810c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008110:	edd4 7a00 	vldr	s15, [r4]
 8008114:	f1bc 0f06 	cmp.w	ip, #6
 8008118:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800811c:	d008      	beq.n	8008130 <ai_dict8_dot_array_f32+0x180>
 800811e:	7989      	ldrb	r1, [r1, #6]
 8008120:	edd3 7a06 	vldr	s15, [r3, #24]
 8008124:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008128:	edd2 6a00 	vldr	s13, [r2]
 800812c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008130:	edd0 7a00 	vldr	s15, [r0]
 8008134:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008138:	ed80 7a00 	vstr	s14, [r0]
 800813c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008140:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8008148 <ai_dict8_dot_array_f32+0x198>
 8008144:	e7a0      	b.n	8008088 <ai_dict8_dot_array_f32+0xd8>
 8008146:	bf00      	nop
 8008148:	00000000 	.word	0x00000000

0800814c <ai_dict4_dot_array_f32>:
 800814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008152:	f027 0c01 	bic.w	ip, r7, #1
 8008156:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800815a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800815e:	f000 80ae 	beq.w	80082be <ai_dict4_dot_array_f32+0x172>
 8008162:	1d0d      	adds	r5, r1, #4
 8008164:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8008168:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80082c4 <ai_dict4_dot_array_f32+0x178>
 800816c:	eb05 0e09 	add.w	lr, r5, r9
 8008170:	f103 0420 	add.w	r4, r3, #32
 8008174:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8008178:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800817c:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8008180:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8008184:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8008188:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800818c:	ed14 5a04 	vldr	s10, [r4, #-16]
 8008190:	ed54 5a03 	vldr	s11, [r4, #-12]
 8008194:	ed14 6a02 	vldr	s12, [r4, #-8]
 8008198:	ed54 6a01 	vldr	s13, [r4, #-4]
 800819c:	f006 0a0f 	and.w	sl, r6, #15
 80081a0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80081a4:	edda 7a00 	vldr	s15, [sl]
 80081a8:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 80081ac:	0936      	lsrs	r6, r6, #4
 80081ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80081b2:	ee67 7a83 	vmul.f32	s15, s15, s6
 80081b6:	ed96 3a00 	vldr	s6, [r6]
 80081ba:	ea4f 161b 	mov.w	r6, fp, lsr #4
 80081be:	eee3 7a23 	vfma.f32	s15, s6, s7
 80081c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80081c6:	f00b 0b0f 	and.w	fp, fp, #15
 80081ca:	edd6 3a00 	vldr	s7, [r6]
 80081ce:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 80081d2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80081d6:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80081da:	3504      	adds	r5, #4
 80081dc:	ed9b 4a00 	vldr	s8, [fp]
 80081e0:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80081e4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80081e8:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80081ec:	f00a 0a0f 	and.w	sl, sl, #15
 80081f0:	eddb 4a00 	vldr	s9, [fp]
 80081f4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80081f8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80081fc:	45ae      	cmp	lr, r5
 80081fe:	ed9a 5a00 	vldr	s10, [sl]
 8008202:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8008206:	eee5 7a25 	vfma.f32	s15, s10, s11
 800820a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800820e:	f006 060f 	and.w	r6, r6, #15
 8008212:	edda 5a00 	vldr	s11, [sl]
 8008216:	eee5 7a86 	vfma.f32	s15, s11, s12
 800821a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800821e:	f104 0420 	add.w	r4, r4, #32
 8008222:	ed96 6a00 	vldr	s12, [r6]
 8008226:	eee6 7a26 	vfma.f32	s15, s12, s13
 800822a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800822e:	d1a1      	bne.n	8008174 <ai_dict4_dot_array_f32+0x28>
 8008230:	4449      	add	r1, r9
 8008232:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8008236:	459c      	cmp	ip, r3
 8008238:	d92d      	bls.n	8008296 <ai_dict4_dot_array_f32+0x14a>
 800823a:	f10c 0c07 	add.w	ip, ip, #7
 800823e:	f103 0508 	add.w	r5, r3, #8
 8008242:	ebac 0c05 	sub.w	ip, ip, r5
 8008246:	f02c 0407 	bic.w	r4, ip, #7
 800824a:	f103 0810 	add.w	r8, r3, #16
 800824e:	44a0      	add	r8, r4
 8008250:	f101 3eff 	add.w	lr, r1, #4294967295
 8008254:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8008258:	ed15 6a01 	vldr	s12, [r5, #-4]
 800825c:	ed55 6a02 	vldr	s13, [r5, #-8]
 8008260:	f004 060f 	and.w	r6, r4, #15
 8008264:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008268:	0924      	lsrs	r4, r4, #4
 800826a:	edd6 7a00 	vldr	s15, [r6]
 800826e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008272:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008276:	ed94 6a00 	vldr	s12, [r4]
 800827a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800827e:	3508      	adds	r5, #8
 8008280:	45a8      	cmp	r8, r5
 8008282:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008286:	d1e5      	bne.n	8008254 <ai_dict4_dot_array_f32+0x108>
 8008288:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800828c:	f10c 0c01 	add.w	ip, ip, #1
 8008290:	4461      	add	r1, ip
 8008292:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8008296:	07fc      	lsls	r4, r7, #31
 8008298:	d509      	bpl.n	80082ae <ai_dict4_dot_array_f32+0x162>
 800829a:	7809      	ldrb	r1, [r1, #0]
 800829c:	edd3 7a00 	vldr	s15, [r3]
 80082a0:	090b      	lsrs	r3, r1, #4
 80082a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80082a6:	edd2 6a00 	vldr	s13, [r2]
 80082aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80082ae:	edd0 7a00 	vldr	s15, [r0]
 80082b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082b6:	ed80 7a00 	vstr	s14, [r0]
 80082ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082be:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80082c4 <ai_dict4_dot_array_f32+0x178>
 80082c2:	e7b8      	b.n	8008236 <ai_dict4_dot_array_f32+0xea>
 80082c4:	00000000 	.word	0x00000000

080082c8 <forward_dense>:
 80082c8:	6982      	ldr	r2, [r0, #24]
 80082ca:	8813      	ldrh	r3, [r2, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 81ca 	beq.w	8008666 <forward_dense+0x39e>
 80082d2:	6852      	ldr	r2, [r2, #4]
 80082d4:	6850      	ldr	r0, [r2, #4]
 80082d6:	b100      	cbz	r0, 80082da <forward_dense+0x12>
 80082d8:	6800      	ldr	r0, [r0, #0]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	f240 81c0 	bls.w	8008660 <forward_dense+0x398>
 80082e0:	6911      	ldr	r1, [r2, #16]
 80082e2:	b101      	cbz	r1, 80082e6 <forward_dense+0x1e>
 80082e4:	6809      	ldr	r1, [r1, #0]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	f000 81bf 	beq.w	800866a <forward_dense+0x3a2>
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	ed2d 8b10 	vpush	{d8-d15}
 80082f4:	69d3      	ldr	r3, [r2, #28]
 80082f6:	b091      	sub	sp, #68	; 0x44
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 820b 	beq.w	8008714 <forward_dense+0x44c>
 80082fe:	681c      	ldr	r4, [r3, #0]
 8008300:	9408      	str	r4, [sp, #32]
 8008302:	f112 0418 	adds.w	r4, r2, #24
 8008306:	f000 81df 	beq.w	80086c8 <forward_dense+0x400>
 800830a:	8b12      	ldrh	r2, [r2, #24]
 800830c:	2a01      	cmp	r2, #1
 800830e:	f240 81fe 	bls.w	800870e <forward_dense+0x446>
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 81da 	beq.w	80086cc <forward_dense+0x404>
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	9306      	str	r3, [sp, #24]
 800831c:	9b08      	ldr	r3, [sp, #32]
 800831e:	68cc      	ldr	r4, [r1, #12]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	68c5      	ldr	r5, [r0, #12]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800832a:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800832e:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8008332:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8008336:	fa4c f505 	asr.w	r5, ip, r5
 800833a:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800833e:	950b      	str	r5, [sp, #44]	; 0x2c
 8008340:	2a04      	cmp	r2, #4
 8008342:	fb07 f506 	mul.w	r5, r7, r6
 8008346:	6864      	ldr	r4, [r4, #4]
 8008348:	9507      	str	r5, [sp, #28]
 800834a:	f000 81dd 	beq.w	8008708 <forward_dense+0x440>
 800834e:	2a08      	cmp	r2, #8
 8008350:	f000 81da 	beq.w	8008708 <forward_dense+0x440>
 8008354:	f04f 0a00 	mov.w	sl, #0
 8008358:	698a      	ldr	r2, [r1, #24]
 800835a:	6981      	ldr	r1, [r0, #24]
 800835c:	6890      	ldr	r0, [r2, #8]
 800835e:	9a08      	ldr	r2, [sp, #32]
 8008360:	9004      	str	r0, [sp, #16]
 8008362:	6952      	ldr	r2, [r2, #20]
 8008364:	688f      	ldr	r7, [r1, #8]
 8008366:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800836a:	00a2      	lsls	r2, r4, #2
 800836c:	9209      	str	r2, [sp, #36]	; 0x24
 800836e:	1886      	adds	r6, r0, r2
 8008370:	9a07      	ldr	r2, [sp, #28]
 8008372:	2a00      	cmp	r2, #0
 8008374:	f000 81c3 	beq.w	80086fe <forward_dense+0x436>
 8008378:	f1a8 0210 	sub.w	r2, r8, #16
 800837c:	0912      	lsrs	r2, r2, #4
 800837e:	3201      	adds	r2, #1
 8008380:	0192      	lsls	r2, r2, #6
 8008382:	920c      	str	r2, [sp, #48]	; 0x30
 8008384:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8008388:	920a      	str	r2, [sp, #40]	; 0x28
 800838a:	689d      	ldr	r5, [r3, #8]
 800838c:	9b06      	ldr	r3, [sp, #24]
 800838e:	eddf aad0 	vldr	s21, [pc, #832]	; 80086d0 <forward_dense+0x408>
 8008392:	2200      	movs	r2, #0
 8008394:	9205      	str	r2, [sp, #20]
 8008396:	f008 020f 	and.w	r2, r8, #15
 800839a:	920d      	str	r2, [sp, #52]	; 0x34
 800839c:	2b00      	cmp	r3, #0
 800839e:	d043      	beq.n	8008428 <forward_dense+0x160>
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	689c      	ldr	r4, [r3, #8]
 80083a4:	9b04      	ldr	r3, [sp, #16]
 80083a6:	f1ba 0f00 	cmp.w	sl, #0
 80083aa:	d042      	beq.n	8008432 <forward_dense+0x16a>
 80083ac:	42b3      	cmp	r3, r6
 80083ae:	d22a      	bcs.n	8008406 <forward_dense+0x13e>
 80083b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083b2:	469b      	mov	fp, r3
 80083b4:	ab0f      	add	r3, sp, #60	; 0x3c
 80083b6:	9303      	str	r3, [sp, #12]
 80083b8:	2a04      	cmp	r2, #4
 80083ba:	4633      	mov	r3, r6
 80083bc:	4646      	mov	r6, r8
 80083be:	4698      	mov	r8, r3
 80083c0:	f000 8156 	beq.w	8008670 <forward_dense+0x3a8>
 80083c4:	2c00      	cmp	r4, #0
 80083c6:	f000 8185 	beq.w	80086d4 <forward_dense+0x40c>
 80083ca:	f8d4 c000 	ldr.w	ip, [r4]
 80083ce:	9803      	ldr	r0, [sp, #12]
 80083d0:	9600      	str	r6, [sp, #0]
 80083d2:	463b      	mov	r3, r7
 80083d4:	4629      	mov	r1, r5
 80083d6:	4652      	mov	r2, sl
 80083d8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80083dc:	f7ff fde8 	bl	8007fb0 <ai_dict8_dot_array_f32>
 80083e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083e2:	f84b 3b04 	str.w	r3, [fp], #4
 80083e6:	45c3      	cmp	fp, r8
 80083e8:	f104 0404 	add.w	r4, r4, #4
 80083ec:	444d      	add	r5, r9
 80083ee:	d3e9      	bcc.n	80083c4 <forward_dense+0xfc>
 80083f0:	4643      	mov	r3, r8
 80083f2:	46b0      	mov	r8, r6
 80083f4:	461e      	mov	r6, r3
 80083f6:	9a04      	ldr	r2, [sp, #16]
 80083f8:	43d3      	mvns	r3, r2
 80083fa:	4433      	add	r3, r6
 80083fc:	f023 0303 	bic.w	r3, r3, #3
 8008400:	3304      	adds	r3, #4
 8008402:	18d3      	adds	r3, r2, r3
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008408:	9b05      	ldr	r3, [sp, #20]
 800840a:	4417      	add	r7, r2
 800840c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800840e:	4416      	add	r6, r2
 8008410:	9a07      	ldr	r2, [sp, #28]
 8008412:	3301      	adds	r3, #1
 8008414:	4293      	cmp	r3, r2
 8008416:	9305      	str	r3, [sp, #20]
 8008418:	f000 8171 	beq.w	80086fe <forward_dense+0x436>
 800841c:	9b08      	ldr	r3, [sp, #32]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	689d      	ldr	r5, [r3, #8]
 8008422:	9b06      	ldr	r3, [sp, #24]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1bb      	bne.n	80083a0 <forward_dense+0xd8>
 8008428:	461c      	mov	r4, r3
 800842a:	9b04      	ldr	r3, [sp, #16]
 800842c:	f1ba 0f00 	cmp.w	sl, #0
 8008430:	d1bc      	bne.n	80083ac <forward_dense+0xe4>
 8008432:	42b3      	cmp	r3, r6
 8008434:	d2e7      	bcs.n	8008406 <forward_dense+0x13e>
 8008436:	4618      	mov	r0, r3
 8008438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800843a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800843e:	eb07 0c03 	add.w	ip, r7, r3
 8008442:	469e      	mov	lr, r3
 8008444:	2c00      	cmp	r4, #0
 8008446:	f000 80ff 	beq.w	8008648 <forward_dense+0x380>
 800844a:	f1b8 0f0f 	cmp.w	r8, #15
 800844e:	edd4 fa00 	vldr	s31, [r4]
 8008452:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80086d0 <forward_dense+0x408>
 8008456:	f104 0404 	add.w	r4, r4, #4
 800845a:	f240 80fd 	bls.w	8008658 <forward_dense+0x390>
 800845e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008462:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8008466:	4641      	mov	r1, r8
 8008468:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800846c:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008470:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8008474:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8008478:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800847c:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8008480:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8008484:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8008488:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800848c:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8008490:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8008494:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8008498:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800849c:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 80084a0:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 80084a4:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 80084a8:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 80084ac:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 80084b0:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 80084b4:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 80084b8:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 80084bc:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 80084c0:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 80084c4:	ed13 4a04 	vldr	s8, [r3, #-16]
 80084c8:	ed52 4a04 	vldr	s9, [r2, #-16]
 80084cc:	ed12 5a03 	vldr	s10, [r2, #-12]
 80084d0:	ed53 5a03 	vldr	s11, [r3, #-12]
 80084d4:	ed12 6a02 	vldr	s12, [r2, #-8]
 80084d8:	ed13 7a02 	vldr	s14, [r3, #-8]
 80084dc:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80084e0:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80084e4:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80084e8:	3910      	subs	r1, #16
 80084ea:	290f      	cmp	r1, #15
 80084ec:	ed53 ea01 	vldr	s29, [r3, #-4]
 80084f0:	ed12 ea01 	vldr	s28, [r2, #-4]
 80084f4:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80084f8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80084fc:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008500:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8008504:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8008508:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800850c:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008510:	eee8 7a88 	vfma.f32	s15, s17, s16
 8008514:	eee0 7a20 	vfma.f32	s15, s0, s1
 8008518:	eee1 7a21 	vfma.f32	s15, s2, s3
 800851c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008520:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008524:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008528:	eee5 7a25 	vfma.f32	s15, s10, s11
 800852c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008530:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8008534:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008538:	d896      	bhi.n	8008468 <forward_dense+0x1a0>
 800853a:	eb05 010e 	add.w	r1, r5, lr
 800853e:	465b      	mov	r3, fp
 8008540:	4662      	mov	r2, ip
 8008542:	2b00      	cmp	r3, #0
 8008544:	d075      	beq.n	8008632 <forward_dense+0x36a>
 8008546:	ed91 7a00 	vldr	s14, [r1]
 800854a:	edd2 7a00 	vldr	s15, [r2]
 800854e:	2b01      	cmp	r3, #1
 8008550:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008554:	d06d      	beq.n	8008632 <forward_dense+0x36a>
 8008556:	ed91 7a01 	vldr	s14, [r1, #4]
 800855a:	edd2 7a01 	vldr	s15, [r2, #4]
 800855e:	2b02      	cmp	r3, #2
 8008560:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008564:	d065      	beq.n	8008632 <forward_dense+0x36a>
 8008566:	ed91 7a02 	vldr	s14, [r1, #8]
 800856a:	edd2 7a02 	vldr	s15, [r2, #8]
 800856e:	2b03      	cmp	r3, #3
 8008570:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008574:	d05d      	beq.n	8008632 <forward_dense+0x36a>
 8008576:	ed91 7a03 	vldr	s14, [r1, #12]
 800857a:	edd2 7a03 	vldr	s15, [r2, #12]
 800857e:	2b04      	cmp	r3, #4
 8008580:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008584:	d055      	beq.n	8008632 <forward_dense+0x36a>
 8008586:	ed91 7a04 	vldr	s14, [r1, #16]
 800858a:	edd2 7a04 	vldr	s15, [r2, #16]
 800858e:	2b05      	cmp	r3, #5
 8008590:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008594:	d04d      	beq.n	8008632 <forward_dense+0x36a>
 8008596:	ed91 7a05 	vldr	s14, [r1, #20]
 800859a:	edd2 7a05 	vldr	s15, [r2, #20]
 800859e:	2b06      	cmp	r3, #6
 80085a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80085a4:	d045      	beq.n	8008632 <forward_dense+0x36a>
 80085a6:	ed91 7a06 	vldr	s14, [r1, #24]
 80085aa:	edd2 7a06 	vldr	s15, [r2, #24]
 80085ae:	2b07      	cmp	r3, #7
 80085b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80085b4:	d03d      	beq.n	8008632 <forward_dense+0x36a>
 80085b6:	ed91 7a07 	vldr	s14, [r1, #28]
 80085ba:	edd2 7a07 	vldr	s15, [r2, #28]
 80085be:	2b08      	cmp	r3, #8
 80085c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80085c4:	d035      	beq.n	8008632 <forward_dense+0x36a>
 80085c6:	ed91 7a08 	vldr	s14, [r1, #32]
 80085ca:	edd2 7a08 	vldr	s15, [r2, #32]
 80085ce:	2b09      	cmp	r3, #9
 80085d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80085d4:	d02d      	beq.n	8008632 <forward_dense+0x36a>
 80085d6:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80085da:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80085de:	2b0a      	cmp	r3, #10
 80085e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80085e4:	d025      	beq.n	8008632 <forward_dense+0x36a>
 80085e6:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80085ea:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80085ee:	2b0b      	cmp	r3, #11
 80085f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80085f4:	d01d      	beq.n	8008632 <forward_dense+0x36a>
 80085f6:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80085fa:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80085fe:	2b0c      	cmp	r3, #12
 8008600:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008604:	d015      	beq.n	8008632 <forward_dense+0x36a>
 8008606:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800860a:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800860e:	2b0d      	cmp	r3, #13
 8008610:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008614:	d00d      	beq.n	8008632 <forward_dense+0x36a>
 8008616:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800861a:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800861e:	2b0e      	cmp	r3, #14
 8008620:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008624:	d005      	beq.n	8008632 <forward_dense+0x36a>
 8008626:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800862a:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800862e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008632:	444d      	add	r5, r9
 8008634:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8008638:	ece0 6a01 	vstmia	r0!, {s13}
 800863c:	42b0      	cmp	r0, r6
 800863e:	f4bf aeda 	bcs.w	80083f6 <forward_dense+0x12e>
 8008642:	2c00      	cmp	r4, #0
 8008644:	f47f af01 	bne.w	800844a <forward_dense+0x182>
 8008648:	f1b8 0f0f 	cmp.w	r8, #15
 800864c:	eef0 fa6a 	vmov.f32	s31, s21
 8008650:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80086d0 <forward_dense+0x408>
 8008654:	f63f af03 	bhi.w	800845e <forward_dense+0x196>
 8008658:	4643      	mov	r3, r8
 800865a:	4629      	mov	r1, r5
 800865c:	463a      	mov	r2, r7
 800865e:	e770      	b.n	8008542 <forward_dense+0x27a>
 8008660:	2300      	movs	r3, #0
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	deff      	udf	#255	; 0xff
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	deff      	udf	#255	; 0xff
 800866a:	2300      	movs	r3, #0
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	deff      	udf	#255	; 0xff
 8008670:	b1ac      	cbz	r4, 800869e <forward_dense+0x3d6>
 8008672:	f8d4 c000 	ldr.w	ip, [r4]
 8008676:	9803      	ldr	r0, [sp, #12]
 8008678:	9600      	str	r6, [sp, #0]
 800867a:	463b      	mov	r3, r7
 800867c:	4629      	mov	r1, r5
 800867e:	4652      	mov	r2, sl
 8008680:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8008684:	f7ff fd62 	bl	800814c <ai_dict4_dot_array_f32>
 8008688:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800868a:	f84b 3b04 	str.w	r3, [fp], #4
 800868e:	45c3      	cmp	fp, r8
 8008690:	f104 0404 	add.w	r4, r4, #4
 8008694:	444d      	add	r5, r9
 8008696:	f4bf aeab 	bcs.w	80083f0 <forward_dense+0x128>
 800869a:	2c00      	cmp	r4, #0
 800869c:	d1e9      	bne.n	8008672 <forward_dense+0x3aa>
 800869e:	4634      	mov	r4, r6
 80086a0:	4646      	mov	r6, r8
 80086a2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80086a6:	9400      	str	r4, [sp, #0]
 80086a8:	463b      	mov	r3, r7
 80086aa:	4629      	mov	r1, r5
 80086ac:	4652      	mov	r2, sl
 80086ae:	4640      	mov	r0, r8
 80086b0:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80086b4:	f7ff fd4a 	bl	800814c <ai_dict4_dot_array_f32>
 80086b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086ba:	f84b 3b04 	str.w	r3, [fp], #4
 80086be:	45b3      	cmp	fp, r6
 80086c0:	444d      	add	r5, r9
 80086c2:	d3f0      	bcc.n	80086a6 <forward_dense+0x3de>
 80086c4:	46a0      	mov	r8, r4
 80086c6:	e696      	b.n	80083f6 <forward_dense+0x12e>
 80086c8:	9406      	str	r4, [sp, #24]
 80086ca:	e627      	b.n	800831c <forward_dense+0x54>
 80086cc:	9306      	str	r3, [sp, #24]
 80086ce:	e625      	b.n	800831c <forward_dense+0x54>
 80086d0:	00000000 	.word	0x00000000
 80086d4:	4634      	mov	r4, r6
 80086d6:	4646      	mov	r6, r8
 80086d8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80086dc:	9400      	str	r4, [sp, #0]
 80086de:	463b      	mov	r3, r7
 80086e0:	4629      	mov	r1, r5
 80086e2:	4652      	mov	r2, sl
 80086e4:	4640      	mov	r0, r8
 80086e6:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80086ea:	f7ff fc61 	bl	8007fb0 <ai_dict8_dot_array_f32>
 80086ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086f0:	f84b 3b04 	str.w	r3, [fp], #4
 80086f4:	45b3      	cmp	fp, r6
 80086f6:	444d      	add	r5, r9
 80086f8:	d3f0      	bcc.n	80086dc <forward_dense+0x414>
 80086fa:	46a0      	mov	r8, r4
 80086fc:	e67b      	b.n	80083f6 <forward_dense+0x12e>
 80086fe:	b011      	add	sp, #68	; 0x44
 8008700:	ecbd 8b10 	vpop	{d8-d15}
 8008704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008708:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800870c:	e624      	b.n	8008358 <forward_dense+0x90>
 800870e:	2300      	movs	r3, #0
 8008710:	9306      	str	r3, [sp, #24]
 8008712:	e603      	b.n	800831c <forward_dense+0x54>
 8008714:	9308      	str	r3, [sp, #32]
 8008716:	e5f4      	b.n	8008302 <forward_dense+0x3a>

08008718 <nl_func_relu_generic_array_f32>:
 8008718:	b430      	push	{r4, r5}
 800871a:	6989      	ldr	r1, [r1, #24]
 800871c:	6980      	ldr	r0, [r0, #24]
 800871e:	edd3 6a02 	vldr	s13, [r3, #8]
 8008722:	688c      	ldr	r4, [r1, #8]
 8008724:	6880      	ldr	r0, [r0, #8]
 8008726:	ed93 7a00 	vldr	s14, [r3]
 800872a:	ed93 6a01 	vldr	s12, [r3, #4]
 800872e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008732:	3a01      	subs	r2, #1
 8008734:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008738:	0092      	lsls	r2, r2, #2
 800873a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800873e:	4410      	add	r0, r2
 8008740:	4422      	add	r2, r4
 8008742:	d421      	bmi.n	8008788 <nl_func_relu_generic_array_f32+0x70>
 8008744:	4294      	cmp	r4, r2
 8008746:	d83d      	bhi.n	80087c4 <nl_func_relu_generic_array_f32+0xac>
 8008748:	1d13      	adds	r3, r2, #4
 800874a:	1d02      	adds	r2, r0, #4
 800874c:	e010      	b.n	8008770 <nl_func_relu_generic_array_f32+0x58>
 800874e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008756:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800875a:	d501      	bpl.n	8008760 <nl_func_relu_generic_array_f32+0x48>
 800875c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8008760:	ed62 7a01 	vstmdb	r2!, {s15}
 8008764:	6888      	ldr	r0, [r1, #8]
 8008766:	f1a3 0408 	sub.w	r4, r3, #8
 800876a:	4284      	cmp	r4, r0
 800876c:	462b      	mov	r3, r5
 800876e:	d329      	bcc.n	80087c4 <nl_func_relu_generic_array_f32+0xac>
 8008770:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008774:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800877c:	f1a3 0504 	sub.w	r5, r3, #4
 8008780:	d4e5      	bmi.n	800874e <nl_func_relu_generic_array_f32+0x36>
 8008782:	eef0 7a66 	vmov.f32	s15, s13
 8008786:	e7eb      	b.n	8008760 <nl_func_relu_generic_array_f32+0x48>
 8008788:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800878c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008790:	d01a      	beq.n	80087c8 <nl_func_relu_generic_array_f32+0xb0>
 8008792:	4294      	cmp	r4, r2
 8008794:	d816      	bhi.n	80087c4 <nl_func_relu_generic_array_f32+0xac>
 8008796:	1d13      	adds	r3, r2, #4
 8008798:	1d02      	adds	r2, r0, #4
 800879a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800879e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80087a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087a6:	f1a3 0408 	sub.w	r4, r3, #8
 80087aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ae:	f1a3 0004 	sub.w	r0, r3, #4
 80087b2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80087b6:	4623      	mov	r3, r4
 80087b8:	d51e      	bpl.n	80087f8 <nl_func_relu_generic_array_f32+0xe0>
 80087ba:	ed62 6a01 	vstmdb	r2!, {s13}
 80087be:	688b      	ldr	r3, [r1, #8]
 80087c0:	42a3      	cmp	r3, r4
 80087c2:	d91e      	bls.n	8008802 <nl_func_relu_generic_array_f32+0xea>
 80087c4:	bc30      	pop	{r4, r5}
 80087c6:	4770      	bx	lr
 80087c8:	4294      	cmp	r4, r2
 80087ca:	d8fb      	bhi.n	80087c4 <nl_func_relu_generic_array_f32+0xac>
 80087cc:	1d13      	adds	r3, r2, #4
 80087ce:	2500      	movs	r5, #0
 80087d0:	1d02      	adds	r2, r0, #4
 80087d2:	ed53 7a01 	vldr	s15, [r3, #-4]
 80087d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087da:	f1a3 0408 	sub.w	r4, r3, #8
 80087de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e2:	f1a3 0004 	sub.w	r0, r3, #4
 80087e6:	4623      	mov	r3, r4
 80087e8:	db0d      	blt.n	8008806 <nl_func_relu_generic_array_f32+0xee>
 80087ea:	ed62 7a01 	vstmdb	r2!, {s15}
 80087ee:	688b      	ldr	r3, [r1, #8]
 80087f0:	42a3      	cmp	r3, r4
 80087f2:	d8e7      	bhi.n	80087c4 <nl_func_relu_generic_array_f32+0xac>
 80087f4:	4603      	mov	r3, r0
 80087f6:	e7ec      	b.n	80087d2 <nl_func_relu_generic_array_f32+0xba>
 80087f8:	ed62 7a01 	vstmdb	r2!, {s15}
 80087fc:	688c      	ldr	r4, [r1, #8]
 80087fe:	429c      	cmp	r4, r3
 8008800:	d8e0      	bhi.n	80087c4 <nl_func_relu_generic_array_f32+0xac>
 8008802:	4603      	mov	r3, r0
 8008804:	e7c9      	b.n	800879a <nl_func_relu_generic_array_f32+0x82>
 8008806:	f842 5d04 	str.w	r5, [r2, #-4]!
 800880a:	688c      	ldr	r4, [r1, #8]
 800880c:	429c      	cmp	r4, r3
 800880e:	d8d9      	bhi.n	80087c4 <nl_func_relu_generic_array_f32+0xac>
 8008810:	4603      	mov	r3, r0
 8008812:	e7de      	b.n	80087d2 <nl_func_relu_generic_array_f32+0xba>

08008814 <forward_relu>:
 8008814:	6982      	ldr	r2, [r0, #24]
 8008816:	8813      	ldrh	r3, [r2, #0]
 8008818:	b333      	cbz	r3, 8008868 <forward_relu+0x54>
 800881a:	6852      	ldr	r2, [r2, #4]
 800881c:	6851      	ldr	r1, [r2, #4]
 800881e:	b101      	cbz	r1, 8008822 <forward_relu+0xe>
 8008820:	6809      	ldr	r1, [r1, #0]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d91d      	bls.n	8008862 <forward_relu+0x4e>
 8008826:	b4f0      	push	{r4, r5, r6, r7}
 8008828:	6917      	ldr	r7, [r2, #16]
 800882a:	b107      	cbz	r7, 800882e <forward_relu+0x1a>
 800882c:	683f      	ldr	r7, [r7, #0]
 800882e:	688c      	ldr	r4, [r1, #8]
 8008830:	69c3      	ldr	r3, [r0, #28]
 8008832:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8008836:	2b00      	cmp	r3, #0
 8008838:	d044      	beq.n	80088c4 <forward_relu+0xb0>
 800883a:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800883e:	2d01      	cmp	r5, #1
 8008840:	d014      	beq.n	800886c <forward_relu+0x58>
 8008842:	2c00      	cmp	r4, #0
 8008844:	d074      	beq.n	8008930 <forward_relu+0x11c>
 8008846:	68ce      	ldr	r6, [r1, #12]
 8008848:	2201      	movs	r2, #1
 800884a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800884e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008852:	42a6      	cmp	r6, r4
 8008854:	fb05 f202 	mul.w	r2, r5, r2
 8008858:	d1f9      	bne.n	800884e <forward_relu+0x3a>
 800885a:	4638      	mov	r0, r7
 800885c:	bcf0      	pop	{r4, r5, r6, r7}
 800885e:	f7ff bf5b 	b.w	8008718 <nl_func_relu_generic_array_f32>
 8008862:	2300      	movs	r3, #0
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	deff      	udf	#255	; 0xff
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	deff      	udf	#255	; 0xff
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	6988      	ldr	r0, [r1, #24]
 8008870:	6896      	ldr	r6, [r2, #8]
 8008872:	ed93 7a00 	vldr	s14, [r3]
 8008876:	6882      	ldr	r2, [r0, #8]
 8008878:	b184      	cbz	r4, 800889c <forward_relu+0x88>
 800887a:	68cf      	ldr	r7, [r1, #12]
 800887c:	462b      	mov	r3, r5
 800887e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8008882:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8008886:	42a7      	cmp	r7, r4
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	d1f9      	bne.n	8008882 <forward_relu+0x6e>
 800888e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008892:	3b01      	subs	r3, #1
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	18d2      	adds	r2, r2, r3
 8008898:	441e      	add	r6, r3
 800889a:	d23f      	bcs.n	800891c <forward_relu+0x108>
 800889c:	1d13      	adds	r3, r2, #4
 800889e:	2500      	movs	r5, #0
 80088a0:	1d32      	adds	r2, r6, #4
 80088a2:	ed53 7a01 	vldr	s15, [r3, #-4]
 80088a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ae:	f1a3 0104 	sub.w	r1, r3, #4
 80088b2:	d835      	bhi.n	8008920 <forward_relu+0x10c>
 80088b4:	ed62 7a01 	vstmdb	r2!, {s15}
 80088b8:	6884      	ldr	r4, [r0, #8]
 80088ba:	3b08      	subs	r3, #8
 80088bc:	429c      	cmp	r4, r3
 80088be:	d82d      	bhi.n	800891c <forward_relu+0x108>
 80088c0:	460b      	mov	r3, r1
 80088c2:	e7ee      	b.n	80088a2 <forward_relu+0x8e>
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	698d      	ldr	r5, [r1, #24]
 80088c8:	6898      	ldr	r0, [r3, #8]
 80088ca:	68ab      	ldr	r3, [r5, #8]
 80088cc:	b184      	cbz	r4, 80088f0 <forward_relu+0xdc>
 80088ce:	68ce      	ldr	r6, [r1, #12]
 80088d0:	2201      	movs	r2, #1
 80088d2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80088d6:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80088da:	42a6      	cmp	r6, r4
 80088dc:	fb01 f202 	mul.w	r2, r1, r2
 80088e0:	d1f9      	bne.n	80088d6 <forward_relu+0xc2>
 80088e2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80088e6:	3a01      	subs	r2, #1
 80088e8:	0092      	lsls	r2, r2, #2
 80088ea:	189b      	adds	r3, r3, r2
 80088ec:	4410      	add	r0, r2
 80088ee:	d215      	bcs.n	800891c <forward_relu+0x108>
 80088f0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008934 <forward_relu+0x120>
 80088f4:	3304      	adds	r3, #4
 80088f6:	1d01      	adds	r1, r0, #4
 80088f8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80088fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008904:	bfb8      	it	lt
 8008906:	eef0 7a47 	vmovlt.f32	s15, s14
 800890a:	ed61 7a01 	vstmdb	r1!, {s15}
 800890e:	68a8      	ldr	r0, [r5, #8]
 8008910:	f1a3 0208 	sub.w	r2, r3, #8
 8008914:	4290      	cmp	r0, r2
 8008916:	f1a3 0304 	sub.w	r3, r3, #4
 800891a:	d9ed      	bls.n	80088f8 <forward_relu+0xe4>
 800891c:	bcf0      	pop	{r4, r5, r6, r7}
 800891e:	4770      	bx	lr
 8008920:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008924:	6884      	ldr	r4, [r0, #8]
 8008926:	3b08      	subs	r3, #8
 8008928:	429c      	cmp	r4, r3
 800892a:	d8f7      	bhi.n	800891c <forward_relu+0x108>
 800892c:	460b      	mov	r3, r1
 800892e:	e7b8      	b.n	80088a2 <forward_relu+0x8e>
 8008930:	2201      	movs	r2, #1
 8008932:	e792      	b.n	800885a <forward_relu+0x46>
 8008934:	00000000 	.word	0x00000000

08008938 <ai_check_custom_types>:
 8008938:	4b13      	ldr	r3, [pc, #76]	; (8008988 <ai_check_custom_types+0x50>)
 800893a:	b082      	sub	sp, #8
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	b118      	cbz	r0, 800894a <ai_check_custom_types+0x12>
 8008942:	7803      	ldrb	r3, [r0, #0]
 8008944:	2b03      	cmp	r3, #3
 8008946:	d002      	beq.n	800894e <ai_check_custom_types+0x16>
 8008948:	2000      	movs	r0, #0
 800894a:	b002      	add	sp, #8
 800894c:	4770      	bx	lr
 800894e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008952:	4293      	cmp	r3, r2
 8008954:	d004      	beq.n	8008960 <ai_check_custom_types+0x28>
 8008956:	2001      	movs	r0, #1
 8008958:	f080 0001 	eor.w	r0, r0, #1
 800895c:	b002      	add	sp, #8
 800895e:	4770      	bx	lr
 8008960:	7842      	ldrb	r2, [r0, #1]
 8008962:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008966:	429a      	cmp	r2, r3
 8008968:	f100 0001 	add.w	r0, r0, #1
 800896c:	d1f3      	bne.n	8008956 <ai_check_custom_types+0x1e>
 800896e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008972:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008976:	429a      	cmp	r2, r3
 8008978:	d1ed      	bne.n	8008956 <ai_check_custom_types+0x1e>
 800897a:	7842      	ldrb	r2, [r0, #1]
 800897c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008980:	429a      	cmp	r2, r3
 8008982:	d1e8      	bne.n	8008956 <ai_check_custom_types+0x1e>
 8008984:	2000      	movs	r0, #0
 8008986:	e7e7      	b.n	8008958 <ai_check_custom_types+0x20>
 8008988:	0800cabc 	.word	0x0800cabc

0800898c <ai_layers_init_all>:
 800898c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800898e:	b17a      	cbz	r2, 80089b0 <ai_layers_init_all+0x24>
 8008990:	6913      	ldr	r3, [r2, #16]
 8008992:	60d0      	str	r0, [r2, #12]
 8008994:	429a      	cmp	r2, r3
 8008996:	f04f 0201 	mov.w	r2, #1
 800899a:	d009      	beq.n	80089b0 <ai_layers_init_all+0x24>
 800899c:	b143      	cbz	r3, 80089b0 <ai_layers_init_all+0x24>
 800899e:	6919      	ldr	r1, [r3, #16]
 80089a0:	60d8      	str	r0, [r3, #12]
 80089a2:	4299      	cmp	r1, r3
 80089a4:	f102 0201 	add.w	r2, r2, #1
 80089a8:	d002      	beq.n	80089b0 <ai_layers_init_all+0x24>
 80089aa:	460b      	mov	r3, r1
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1f6      	bne.n	800899e <ai_layers_init_all+0x12>
 80089b0:	4610      	mov	r0, r2
 80089b2:	4770      	bx	lr

080089b4 <ai_layers_post_init_all>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80089b8:	b18c      	cbz	r4, 80089de <ai_layers_post_init_all+0x2a>
 80089ba:	2500      	movs	r5, #0
 80089bc:	6863      	ldr	r3, [r4, #4]
 80089be:	f013 0f01 	tst.w	r3, #1
 80089c2:	4620      	mov	r0, r4
 80089c4:	d003      	beq.n	80089ce <ai_layers_post_init_all+0x1a>
 80089c6:	6a23      	ldr	r3, [r4, #32]
 80089c8:	b10b      	cbz	r3, 80089ce <ai_layers_post_init_all+0x1a>
 80089ca:	4798      	blx	r3
 80089cc:	3501      	adds	r5, #1
 80089ce:	6923      	ldr	r3, [r4, #16]
 80089d0:	42a3      	cmp	r3, r4
 80089d2:	d002      	beq.n	80089da <ai_layers_post_init_all+0x26>
 80089d4:	461c      	mov	r4, r3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1f0      	bne.n	80089bc <ai_layers_post_init_all+0x8>
 80089da:	4628      	mov	r0, r5
 80089dc:	bd38      	pop	{r3, r4, r5, pc}
 80089de:	4625      	mov	r5, r4
 80089e0:	e7fb      	b.n	80089da <ai_layers_post_init_all+0x26>
 80089e2:	bf00      	nop

080089e4 <ai_layers_forward_all>:
 80089e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e8:	6d87      	ldr	r7, [r0, #88]	; 0x58
 80089ea:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80089ec:	4604      	mov	r4, r0
 80089ee:	2f00      	cmp	r7, #0
 80089f0:	d02c      	beq.n	8008a4c <ai_layers_forward_all+0x68>
 80089f2:	2d00      	cmp	r5, #0
 80089f4:	d03f      	beq.n	8008a76 <ai_layers_forward_all+0x92>
 80089f6:	6545      	str	r5, [r0, #84]	; 0x54
 80089f8:	4629      	mov	r1, r5
 80089fa:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80089fc:	2001      	movs	r0, #1
 80089fe:	47b8      	blx	r7
 8008a00:	2600      	movs	r6, #0
 8008a02:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008a04:	46b0      	mov	r8, r6
 8008a06:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008a08:	2002      	movs	r0, #2
 8008a0a:	47b8      	blx	r7
 8008a0c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8008a0e:	696b      	ldr	r3, [r5, #20]
 8008a10:	4628      	mov	r0, r5
 8008a12:	4798      	blx	r3
 8008a14:	692b      	ldr	r3, [r5, #16]
 8008a16:	429d      	cmp	r5, r3
 8008a18:	f04f 0003 	mov.w	r0, #3
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	d009      	beq.n	8008a34 <ai_layers_forward_all+0x50>
 8008a20:	6563      	str	r3, [r4, #84]	; 0x54
 8008a22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008a24:	47b8      	blx	r7
 8008a26:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008a28:	3601      	adds	r6, #1
 8008a2a:	2900      	cmp	r1, #0
 8008a2c:	d1eb      	bne.n	8008a06 <ai_layers_forward_all+0x22>
 8008a2e:	4630      	mov	r0, r6
 8008a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a34:	2100      	movs	r1, #0
 8008a36:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 8008a3a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008a3c:	47b8      	blx	r7
 8008a3e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008a40:	3601      	adds	r6, #1
 8008a42:	2900      	cmp	r1, #0
 8008a44:	d1df      	bne.n	8008a06 <ai_layers_forward_all+0x22>
 8008a46:	4630      	mov	r0, r6
 8008a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a4c:	b19d      	cbz	r5, 8008a76 <ai_layers_forward_all+0x92>
 8008a4e:	6545      	str	r5, [r0, #84]	; 0x54
 8008a50:	463e      	mov	r6, r7
 8008a52:	696b      	ldr	r3, [r5, #20]
 8008a54:	4628      	mov	r0, r5
 8008a56:	4798      	blx	r3
 8008a58:	692b      	ldr	r3, [r5, #16]
 8008a5a:	42ab      	cmp	r3, r5
 8008a5c:	f106 0601 	add.w	r6, r6, #1
 8008a60:	d004      	beq.n	8008a6c <ai_layers_forward_all+0x88>
 8008a62:	6563      	str	r3, [r4, #84]	; 0x54
 8008a64:	461d      	mov	r5, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1f3      	bne.n	8008a52 <ai_layers_forward_all+0x6e>
 8008a6a:	e7e0      	b.n	8008a2e <ai_layers_forward_all+0x4a>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	6563      	str	r3, [r4, #84]	; 0x54
 8008a70:	4630      	mov	r0, r6
 8008a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a76:	462e      	mov	r6, r5
 8008a78:	4630      	mov	r0, r6
 8008a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a7e:	bf00      	nop

08008a80 <ai_array_to_buffer_fmt>:
 8008a80:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d02e      	beq.n	8008ae6 <ai_array_to_buffer_fmt+0x66>
 8008a88:	4a1b      	ldr	r2, [pc, #108]	; (8008af8 <ai_array_to_buffer_fmt+0x78>)
 8008a8a:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d00e      	beq.n	8008ab0 <ai_array_to_buffer_fmt+0x30>
 8008a92:	dd11      	ble.n	8008ab8 <ai_array_to_buffer_fmt+0x38>
 8008a94:	4a19      	ldr	r2, [pc, #100]	; (8008afc <ai_array_to_buffer_fmt+0x7c>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00a      	beq.n	8008ab0 <ai_array_to_buffer_fmt+0x30>
 8008a9a:	dd18      	ble.n	8008ace <ai_array_to_buffer_fmt+0x4e>
 8008a9c:	4a18      	ldr	r2, [pc, #96]	; (8008b00 <ai_array_to_buffer_fmt+0x80>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d006      	beq.n	8008ab0 <ai_array_to_buffer_fmt+0x30>
 8008aa2:	4a18      	ldr	r2, [pc, #96]	; (8008b04 <ai_array_to_buffer_fmt+0x84>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d003      	beq.n	8008ab0 <ai_array_to_buffer_fmt+0x30>
 8008aa8:	4a17      	ldr	r2, [pc, #92]	; (8008b08 <ai_array_to_buffer_fmt+0x88>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d000      	beq.n	8008ab0 <ai_array_to_buffer_fmt+0x30>
 8008aae:	2340      	movs	r3, #64	; 0x40
 8008ab0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008ab4:	4318      	orrs	r0, r3
 8008ab6:	4770      	bx	lr
 8008ab8:	4a14      	ldr	r2, [pc, #80]	; (8008b0c <ai_array_to_buffer_fmt+0x8c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d0f8      	beq.n	8008ab0 <ai_array_to_buffer_fmt+0x30>
 8008abe:	dd06      	ble.n	8008ace <ai_array_to_buffer_fmt+0x4e>
 8008ac0:	4a13      	ldr	r2, [pc, #76]	; (8008b10 <ai_array_to_buffer_fmt+0x90>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d0f4      	beq.n	8008ab0 <ai_array_to_buffer_fmt+0x30>
 8008ac6:	320f      	adds	r2, #15
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d0f1      	beq.n	8008ab0 <ai_array_to_buffer_fmt+0x30>
 8008acc:	e7ef      	b.n	8008aae <ai_array_to_buffer_fmt+0x2e>
 8008ace:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d0ec      	beq.n	8008ab0 <ai_array_to_buffer_fmt+0x30>
 8008ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d1e7      	bne.n	8008aae <ai_array_to_buffer_fmt+0x2e>
 8008ade:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008ae2:	4318      	orrs	r0, r3
 8008ae4:	4770      	bx	lr
 8008ae6:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <ai_array_to_buffer_fmt+0x94>)
 8008ae8:	4003      	ands	r3, r0
 8008aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008aee:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008af2:	4318      	orrs	r0, r3
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	00060440 	.word	0x00060440
 8008afc:	00840447 	.word	0x00840447
 8008b00:	0084084f 	.word	0x0084084f
 8008b04:	01821040 	.word	0x01821040
 8008b08:	00840840 	.word	0x00840840
 8008b0c:	00040447 	.word	0x00040447
 8008b10:	00040840 	.word	0x00040840
 8008b14:	00803fff 	.word	0x00803fff

08008b18 <ai_array_get_byte_size>:
 8008b18:	b1c1      	cbz	r1, 8008b4c <ai_array_get_byte_size+0x34>
 8008b1a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8008b1e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008b22:	4413      	add	r3, r2
 8008b24:	fb01 f103 	mul.w	r1, r1, r3
 8008b28:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8008b2c:	3107      	adds	r1, #7
 8008b2e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8008b32:	f021 0107 	bic.w	r1, r1, #7
 8008b36:	2804      	cmp	r0, #4
 8008b38:	fa21 f102 	lsr.w	r1, r1, r2
 8008b3c:	d008      	beq.n	8008b50 <ai_array_get_byte_size+0x38>
 8008b3e:	2808      	cmp	r0, #8
 8008b40:	d101      	bne.n	8008b46 <ai_array_get_byte_size+0x2e>
 8008b42:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8008b46:	3107      	adds	r1, #7
 8008b48:	08c8      	lsrs	r0, r1, #3
 8008b4a:	4770      	bx	lr
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	4770      	bx	lr
 8008b50:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8008b54:	3107      	adds	r1, #7
 8008b56:	08c8      	lsrs	r0, r1, #3
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop

08008b5c <__errno>:
 8008b5c:	4b01      	ldr	r3, [pc, #4]	; (8008b64 <__errno+0x8>)
 8008b5e:	6818      	ldr	r0, [r3, #0]
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	200005fc 	.word	0x200005fc

08008b68 <__libc_init_array>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	4d0d      	ldr	r5, [pc, #52]	; (8008ba0 <__libc_init_array+0x38>)
 8008b6c:	4c0d      	ldr	r4, [pc, #52]	; (8008ba4 <__libc_init_array+0x3c>)
 8008b6e:	1b64      	subs	r4, r4, r5
 8008b70:	10a4      	asrs	r4, r4, #2
 8008b72:	2600      	movs	r6, #0
 8008b74:	42a6      	cmp	r6, r4
 8008b76:	d109      	bne.n	8008b8c <__libc_init_array+0x24>
 8008b78:	4d0b      	ldr	r5, [pc, #44]	; (8008ba8 <__libc_init_array+0x40>)
 8008b7a:	4c0c      	ldr	r4, [pc, #48]	; (8008bac <__libc_init_array+0x44>)
 8008b7c:	f003 ff1e 	bl	800c9bc <_init>
 8008b80:	1b64      	subs	r4, r4, r5
 8008b82:	10a4      	asrs	r4, r4, #2
 8008b84:	2600      	movs	r6, #0
 8008b86:	42a6      	cmp	r6, r4
 8008b88:	d105      	bne.n	8008b96 <__libc_init_array+0x2e>
 8008b8a:	bd70      	pop	{r4, r5, r6, pc}
 8008b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b90:	4798      	blx	r3
 8008b92:	3601      	adds	r6, #1
 8008b94:	e7ee      	b.n	8008b74 <__libc_init_array+0xc>
 8008b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b9a:	4798      	blx	r3
 8008b9c:	3601      	adds	r6, #1
 8008b9e:	e7f2      	b.n	8008b86 <__libc_init_array+0x1e>
 8008ba0:	0800d628 	.word	0x0800d628
 8008ba4:	0800d628 	.word	0x0800d628
 8008ba8:	0800d628 	.word	0x0800d628
 8008bac:	0800d62c 	.word	0x0800d62c

08008bb0 <malloc>:
 8008bb0:	4b02      	ldr	r3, [pc, #8]	; (8008bbc <malloc+0xc>)
 8008bb2:	4601      	mov	r1, r0
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	f000 b869 	b.w	8008c8c <_malloc_r>
 8008bba:	bf00      	nop
 8008bbc:	200005fc 	.word	0x200005fc

08008bc0 <memcpy>:
 8008bc0:	440a      	add	r2, r1
 8008bc2:	4291      	cmp	r1, r2
 8008bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bc8:	d100      	bne.n	8008bcc <memcpy+0xc>
 8008bca:	4770      	bx	lr
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bd6:	4291      	cmp	r1, r2
 8008bd8:	d1f9      	bne.n	8008bce <memcpy+0xe>
 8008bda:	bd10      	pop	{r4, pc}

08008bdc <memset>:
 8008bdc:	4402      	add	r2, r0
 8008bde:	4603      	mov	r3, r0
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d100      	bne.n	8008be6 <memset+0xa>
 8008be4:	4770      	bx	lr
 8008be6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bea:	e7f9      	b.n	8008be0 <memset+0x4>

08008bec <_free_r>:
 8008bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bee:	2900      	cmp	r1, #0
 8008bf0:	d048      	beq.n	8008c84 <_free_r+0x98>
 8008bf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf6:	9001      	str	r0, [sp, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f1a1 0404 	sub.w	r4, r1, #4
 8008bfe:	bfb8      	it	lt
 8008c00:	18e4      	addlt	r4, r4, r3
 8008c02:	f001 fbe9 	bl	800a3d8 <__malloc_lock>
 8008c06:	4a20      	ldr	r2, [pc, #128]	; (8008c88 <_free_r+0x9c>)
 8008c08:	9801      	ldr	r0, [sp, #4]
 8008c0a:	6813      	ldr	r3, [r2, #0]
 8008c0c:	4615      	mov	r5, r2
 8008c0e:	b933      	cbnz	r3, 8008c1e <_free_r+0x32>
 8008c10:	6063      	str	r3, [r4, #4]
 8008c12:	6014      	str	r4, [r2, #0]
 8008c14:	b003      	add	sp, #12
 8008c16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c1a:	f001 bbe3 	b.w	800a3e4 <__malloc_unlock>
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	d90b      	bls.n	8008c3a <_free_r+0x4e>
 8008c22:	6821      	ldr	r1, [r4, #0]
 8008c24:	1862      	adds	r2, r4, r1
 8008c26:	4293      	cmp	r3, r2
 8008c28:	bf04      	itt	eq
 8008c2a:	681a      	ldreq	r2, [r3, #0]
 8008c2c:	685b      	ldreq	r3, [r3, #4]
 8008c2e:	6063      	str	r3, [r4, #4]
 8008c30:	bf04      	itt	eq
 8008c32:	1852      	addeq	r2, r2, r1
 8008c34:	6022      	streq	r2, [r4, #0]
 8008c36:	602c      	str	r4, [r5, #0]
 8008c38:	e7ec      	b.n	8008c14 <_free_r+0x28>
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	b10b      	cbz	r3, 8008c44 <_free_r+0x58>
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	d9fa      	bls.n	8008c3a <_free_r+0x4e>
 8008c44:	6811      	ldr	r1, [r2, #0]
 8008c46:	1855      	adds	r5, r2, r1
 8008c48:	42a5      	cmp	r5, r4
 8008c4a:	d10b      	bne.n	8008c64 <_free_r+0x78>
 8008c4c:	6824      	ldr	r4, [r4, #0]
 8008c4e:	4421      	add	r1, r4
 8008c50:	1854      	adds	r4, r2, r1
 8008c52:	42a3      	cmp	r3, r4
 8008c54:	6011      	str	r1, [r2, #0]
 8008c56:	d1dd      	bne.n	8008c14 <_free_r+0x28>
 8008c58:	681c      	ldr	r4, [r3, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	6053      	str	r3, [r2, #4]
 8008c5e:	4421      	add	r1, r4
 8008c60:	6011      	str	r1, [r2, #0]
 8008c62:	e7d7      	b.n	8008c14 <_free_r+0x28>
 8008c64:	d902      	bls.n	8008c6c <_free_r+0x80>
 8008c66:	230c      	movs	r3, #12
 8008c68:	6003      	str	r3, [r0, #0]
 8008c6a:	e7d3      	b.n	8008c14 <_free_r+0x28>
 8008c6c:	6825      	ldr	r5, [r4, #0]
 8008c6e:	1961      	adds	r1, r4, r5
 8008c70:	428b      	cmp	r3, r1
 8008c72:	bf04      	itt	eq
 8008c74:	6819      	ldreq	r1, [r3, #0]
 8008c76:	685b      	ldreq	r3, [r3, #4]
 8008c78:	6063      	str	r3, [r4, #4]
 8008c7a:	bf04      	itt	eq
 8008c7c:	1949      	addeq	r1, r1, r5
 8008c7e:	6021      	streq	r1, [r4, #0]
 8008c80:	6054      	str	r4, [r2, #4]
 8008c82:	e7c7      	b.n	8008c14 <_free_r+0x28>
 8008c84:	b003      	add	sp, #12
 8008c86:	bd30      	pop	{r4, r5, pc}
 8008c88:	20000890 	.word	0x20000890

08008c8c <_malloc_r>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	1ccd      	adds	r5, r1, #3
 8008c90:	f025 0503 	bic.w	r5, r5, #3
 8008c94:	3508      	adds	r5, #8
 8008c96:	2d0c      	cmp	r5, #12
 8008c98:	bf38      	it	cc
 8008c9a:	250c      	movcc	r5, #12
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	db01      	blt.n	8008ca6 <_malloc_r+0x1a>
 8008ca2:	42a9      	cmp	r1, r5
 8008ca4:	d903      	bls.n	8008cae <_malloc_r+0x22>
 8008ca6:	230c      	movs	r3, #12
 8008ca8:	6033      	str	r3, [r6, #0]
 8008caa:	2000      	movs	r0, #0
 8008cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cae:	f001 fb93 	bl	800a3d8 <__malloc_lock>
 8008cb2:	4921      	ldr	r1, [pc, #132]	; (8008d38 <_malloc_r+0xac>)
 8008cb4:	680a      	ldr	r2, [r1, #0]
 8008cb6:	4614      	mov	r4, r2
 8008cb8:	b99c      	cbnz	r4, 8008ce2 <_malloc_r+0x56>
 8008cba:	4f20      	ldr	r7, [pc, #128]	; (8008d3c <_malloc_r+0xb0>)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	b923      	cbnz	r3, 8008cca <_malloc_r+0x3e>
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f000 fca6 	bl	8009614 <_sbrk_r>
 8008cc8:	6038      	str	r0, [r7, #0]
 8008cca:	4629      	mov	r1, r5
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f000 fca1 	bl	8009614 <_sbrk_r>
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	d123      	bne.n	8008d1e <_malloc_r+0x92>
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	6033      	str	r3, [r6, #0]
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f001 fb82 	bl	800a3e4 <__malloc_unlock>
 8008ce0:	e7e3      	b.n	8008caa <_malloc_r+0x1e>
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	1b5b      	subs	r3, r3, r5
 8008ce6:	d417      	bmi.n	8008d18 <_malloc_r+0x8c>
 8008ce8:	2b0b      	cmp	r3, #11
 8008cea:	d903      	bls.n	8008cf4 <_malloc_r+0x68>
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	441c      	add	r4, r3
 8008cf0:	6025      	str	r5, [r4, #0]
 8008cf2:	e004      	b.n	8008cfe <_malloc_r+0x72>
 8008cf4:	6863      	ldr	r3, [r4, #4]
 8008cf6:	42a2      	cmp	r2, r4
 8008cf8:	bf0c      	ite	eq
 8008cfa:	600b      	streq	r3, [r1, #0]
 8008cfc:	6053      	strne	r3, [r2, #4]
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f001 fb70 	bl	800a3e4 <__malloc_unlock>
 8008d04:	f104 000b 	add.w	r0, r4, #11
 8008d08:	1d23      	adds	r3, r4, #4
 8008d0a:	f020 0007 	bic.w	r0, r0, #7
 8008d0e:	1ac2      	subs	r2, r0, r3
 8008d10:	d0cc      	beq.n	8008cac <_malloc_r+0x20>
 8008d12:	1a1b      	subs	r3, r3, r0
 8008d14:	50a3      	str	r3, [r4, r2]
 8008d16:	e7c9      	b.n	8008cac <_malloc_r+0x20>
 8008d18:	4622      	mov	r2, r4
 8008d1a:	6864      	ldr	r4, [r4, #4]
 8008d1c:	e7cc      	b.n	8008cb8 <_malloc_r+0x2c>
 8008d1e:	1cc4      	adds	r4, r0, #3
 8008d20:	f024 0403 	bic.w	r4, r4, #3
 8008d24:	42a0      	cmp	r0, r4
 8008d26:	d0e3      	beq.n	8008cf0 <_malloc_r+0x64>
 8008d28:	1a21      	subs	r1, r4, r0
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f000 fc72 	bl	8009614 <_sbrk_r>
 8008d30:	3001      	adds	r0, #1
 8008d32:	d1dd      	bne.n	8008cf0 <_malloc_r+0x64>
 8008d34:	e7cf      	b.n	8008cd6 <_malloc_r+0x4a>
 8008d36:	bf00      	nop
 8008d38:	20000890 	.word	0x20000890
 8008d3c:	20000894 	.word	0x20000894

08008d40 <__cvt>:
 8008d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d44:	ec55 4b10 	vmov	r4, r5, d0
 8008d48:	2d00      	cmp	r5, #0
 8008d4a:	460e      	mov	r6, r1
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	462b      	mov	r3, r5
 8008d50:	bfbb      	ittet	lt
 8008d52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d56:	461d      	movlt	r5, r3
 8008d58:	2300      	movge	r3, #0
 8008d5a:	232d      	movlt	r3, #45	; 0x2d
 8008d5c:	700b      	strb	r3, [r1, #0]
 8008d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d64:	4691      	mov	r9, r2
 8008d66:	f023 0820 	bic.w	r8, r3, #32
 8008d6a:	bfbc      	itt	lt
 8008d6c:	4622      	movlt	r2, r4
 8008d6e:	4614      	movlt	r4, r2
 8008d70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d74:	d005      	beq.n	8008d82 <__cvt+0x42>
 8008d76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d7a:	d100      	bne.n	8008d7e <__cvt+0x3e>
 8008d7c:	3601      	adds	r6, #1
 8008d7e:	2102      	movs	r1, #2
 8008d80:	e000      	b.n	8008d84 <__cvt+0x44>
 8008d82:	2103      	movs	r1, #3
 8008d84:	ab03      	add	r3, sp, #12
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	ab02      	add	r3, sp, #8
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	ec45 4b10 	vmov	d0, r4, r5
 8008d90:	4653      	mov	r3, sl
 8008d92:	4632      	mov	r2, r6
 8008d94:	f000 fd30 	bl	80097f8 <_dtoa_r>
 8008d98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	d102      	bne.n	8008da6 <__cvt+0x66>
 8008da0:	f019 0f01 	tst.w	r9, #1
 8008da4:	d022      	beq.n	8008dec <__cvt+0xac>
 8008da6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008daa:	eb07 0906 	add.w	r9, r7, r6
 8008dae:	d110      	bne.n	8008dd2 <__cvt+0x92>
 8008db0:	783b      	ldrb	r3, [r7, #0]
 8008db2:	2b30      	cmp	r3, #48	; 0x30
 8008db4:	d10a      	bne.n	8008dcc <__cvt+0x8c>
 8008db6:	2200      	movs	r2, #0
 8008db8:	2300      	movs	r3, #0
 8008dba:	4620      	mov	r0, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7f7 fe9b 	bl	8000af8 <__aeabi_dcmpeq>
 8008dc2:	b918      	cbnz	r0, 8008dcc <__cvt+0x8c>
 8008dc4:	f1c6 0601 	rsb	r6, r6, #1
 8008dc8:	f8ca 6000 	str.w	r6, [sl]
 8008dcc:	f8da 3000 	ldr.w	r3, [sl]
 8008dd0:	4499      	add	r9, r3
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	4629      	mov	r1, r5
 8008dda:	f7f7 fe8d 	bl	8000af8 <__aeabi_dcmpeq>
 8008dde:	b108      	cbz	r0, 8008de4 <__cvt+0xa4>
 8008de0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008de4:	2230      	movs	r2, #48	; 0x30
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	454b      	cmp	r3, r9
 8008dea:	d307      	bcc.n	8008dfc <__cvt+0xbc>
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008df0:	1bdb      	subs	r3, r3, r7
 8008df2:	4638      	mov	r0, r7
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	b004      	add	sp, #16
 8008df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfc:	1c59      	adds	r1, r3, #1
 8008dfe:	9103      	str	r1, [sp, #12]
 8008e00:	701a      	strb	r2, [r3, #0]
 8008e02:	e7f0      	b.n	8008de6 <__cvt+0xa6>

08008e04 <__exponent>:
 8008e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e06:	4603      	mov	r3, r0
 8008e08:	2900      	cmp	r1, #0
 8008e0a:	bfb8      	it	lt
 8008e0c:	4249      	neglt	r1, r1
 8008e0e:	f803 2b02 	strb.w	r2, [r3], #2
 8008e12:	bfb4      	ite	lt
 8008e14:	222d      	movlt	r2, #45	; 0x2d
 8008e16:	222b      	movge	r2, #43	; 0x2b
 8008e18:	2909      	cmp	r1, #9
 8008e1a:	7042      	strb	r2, [r0, #1]
 8008e1c:	dd2a      	ble.n	8008e74 <__exponent+0x70>
 8008e1e:	f10d 0407 	add.w	r4, sp, #7
 8008e22:	46a4      	mov	ip, r4
 8008e24:	270a      	movs	r7, #10
 8008e26:	46a6      	mov	lr, r4
 8008e28:	460a      	mov	r2, r1
 8008e2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e2e:	fb07 1516 	mls	r5, r7, r6, r1
 8008e32:	3530      	adds	r5, #48	; 0x30
 8008e34:	2a63      	cmp	r2, #99	; 0x63
 8008e36:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e3e:	4631      	mov	r1, r6
 8008e40:	dcf1      	bgt.n	8008e26 <__exponent+0x22>
 8008e42:	3130      	adds	r1, #48	; 0x30
 8008e44:	f1ae 0502 	sub.w	r5, lr, #2
 8008e48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e4c:	1c44      	adds	r4, r0, #1
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4561      	cmp	r1, ip
 8008e52:	d30a      	bcc.n	8008e6a <__exponent+0x66>
 8008e54:	f10d 0209 	add.w	r2, sp, #9
 8008e58:	eba2 020e 	sub.w	r2, r2, lr
 8008e5c:	4565      	cmp	r5, ip
 8008e5e:	bf88      	it	hi
 8008e60:	2200      	movhi	r2, #0
 8008e62:	4413      	add	r3, r2
 8008e64:	1a18      	subs	r0, r3, r0
 8008e66:	b003      	add	sp, #12
 8008e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e72:	e7ed      	b.n	8008e50 <__exponent+0x4c>
 8008e74:	2330      	movs	r3, #48	; 0x30
 8008e76:	3130      	adds	r1, #48	; 0x30
 8008e78:	7083      	strb	r3, [r0, #2]
 8008e7a:	70c1      	strb	r1, [r0, #3]
 8008e7c:	1d03      	adds	r3, r0, #4
 8008e7e:	e7f1      	b.n	8008e64 <__exponent+0x60>

08008e80 <_printf_float>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	ed2d 8b02 	vpush	{d8}
 8008e88:	b08d      	sub	sp, #52	; 0x34
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e90:	4616      	mov	r6, r2
 8008e92:	461f      	mov	r7, r3
 8008e94:	4605      	mov	r5, r0
 8008e96:	f001 fa9b 	bl	800a3d0 <_localeconv_r>
 8008e9a:	f8d0 a000 	ldr.w	sl, [r0]
 8008e9e:	4650      	mov	r0, sl
 8008ea0:	f7f7 f9ae 	bl	8000200 <strlen>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	9305      	str	r3, [sp, #20]
 8008eac:	f8d8 3000 	ldr.w	r3, [r8]
 8008eb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008eb4:	3307      	adds	r3, #7
 8008eb6:	f023 0307 	bic.w	r3, r3, #7
 8008eba:	f103 0208 	add.w	r2, r3, #8
 8008ebe:	f8c8 2000 	str.w	r2, [r8]
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008eca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008ece:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ed2:	9307      	str	r3, [sp, #28]
 8008ed4:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ed8:	ee08 0a10 	vmov	s16, r0
 8008edc:	4b9f      	ldr	r3, [pc, #636]	; (800915c <_printf_float+0x2dc>)
 8008ede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee6:	f7f7 fe39 	bl	8000b5c <__aeabi_dcmpun>
 8008eea:	bb88      	cbnz	r0, 8008f50 <_printf_float+0xd0>
 8008eec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ef0:	4b9a      	ldr	r3, [pc, #616]	; (800915c <_printf_float+0x2dc>)
 8008ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef6:	f7f7 fe13 	bl	8000b20 <__aeabi_dcmple>
 8008efa:	bb48      	cbnz	r0, 8008f50 <_printf_float+0xd0>
 8008efc:	2200      	movs	r2, #0
 8008efe:	2300      	movs	r3, #0
 8008f00:	4640      	mov	r0, r8
 8008f02:	4649      	mov	r1, r9
 8008f04:	f7f7 fe02 	bl	8000b0c <__aeabi_dcmplt>
 8008f08:	b110      	cbz	r0, 8008f10 <_printf_float+0x90>
 8008f0a:	232d      	movs	r3, #45	; 0x2d
 8008f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f10:	4b93      	ldr	r3, [pc, #588]	; (8009160 <_printf_float+0x2e0>)
 8008f12:	4894      	ldr	r0, [pc, #592]	; (8009164 <_printf_float+0x2e4>)
 8008f14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008f18:	bf94      	ite	ls
 8008f1a:	4698      	movls	r8, r3
 8008f1c:	4680      	movhi	r8, r0
 8008f1e:	2303      	movs	r3, #3
 8008f20:	6123      	str	r3, [r4, #16]
 8008f22:	9b05      	ldr	r3, [sp, #20]
 8008f24:	f023 0204 	bic.w	r2, r3, #4
 8008f28:	6022      	str	r2, [r4, #0]
 8008f2a:	f04f 0900 	mov.w	r9, #0
 8008f2e:	9700      	str	r7, [sp, #0]
 8008f30:	4633      	mov	r3, r6
 8008f32:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f34:	4621      	mov	r1, r4
 8008f36:	4628      	mov	r0, r5
 8008f38:	f000 f9d8 	bl	80092ec <_printf_common>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	f040 8090 	bne.w	8009062 <_printf_float+0x1e2>
 8008f42:	f04f 30ff 	mov.w	r0, #4294967295
 8008f46:	b00d      	add	sp, #52	; 0x34
 8008f48:	ecbd 8b02 	vpop	{d8}
 8008f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f50:	4642      	mov	r2, r8
 8008f52:	464b      	mov	r3, r9
 8008f54:	4640      	mov	r0, r8
 8008f56:	4649      	mov	r1, r9
 8008f58:	f7f7 fe00 	bl	8000b5c <__aeabi_dcmpun>
 8008f5c:	b140      	cbz	r0, 8008f70 <_printf_float+0xf0>
 8008f5e:	464b      	mov	r3, r9
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	bfbc      	itt	lt
 8008f64:	232d      	movlt	r3, #45	; 0x2d
 8008f66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f6a:	487f      	ldr	r0, [pc, #508]	; (8009168 <_printf_float+0x2e8>)
 8008f6c:	4b7f      	ldr	r3, [pc, #508]	; (800916c <_printf_float+0x2ec>)
 8008f6e:	e7d1      	b.n	8008f14 <_printf_float+0x94>
 8008f70:	6863      	ldr	r3, [r4, #4]
 8008f72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f76:	9206      	str	r2, [sp, #24]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	d13f      	bne.n	8008ffc <_printf_float+0x17c>
 8008f7c:	2306      	movs	r3, #6
 8008f7e:	6063      	str	r3, [r4, #4]
 8008f80:	9b05      	ldr	r3, [sp, #20]
 8008f82:	6861      	ldr	r1, [r4, #4]
 8008f84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9303      	str	r3, [sp, #12]
 8008f8c:	ab0a      	add	r3, sp, #40	; 0x28
 8008f8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f92:	ab09      	add	r3, sp, #36	; 0x24
 8008f94:	ec49 8b10 	vmov	d0, r8, r9
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	6022      	str	r2, [r4, #0]
 8008f9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f7ff fecd 	bl	8008d40 <__cvt>
 8008fa6:	9b06      	ldr	r3, [sp, #24]
 8008fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008faa:	2b47      	cmp	r3, #71	; 0x47
 8008fac:	4680      	mov	r8, r0
 8008fae:	d108      	bne.n	8008fc2 <_printf_float+0x142>
 8008fb0:	1cc8      	adds	r0, r1, #3
 8008fb2:	db02      	blt.n	8008fba <_printf_float+0x13a>
 8008fb4:	6863      	ldr	r3, [r4, #4]
 8008fb6:	4299      	cmp	r1, r3
 8008fb8:	dd41      	ble.n	800903e <_printf_float+0x1be>
 8008fba:	f1ab 0b02 	sub.w	fp, fp, #2
 8008fbe:	fa5f fb8b 	uxtb.w	fp, fp
 8008fc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008fc6:	d820      	bhi.n	800900a <_printf_float+0x18a>
 8008fc8:	3901      	subs	r1, #1
 8008fca:	465a      	mov	r2, fp
 8008fcc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008fd0:	9109      	str	r1, [sp, #36]	; 0x24
 8008fd2:	f7ff ff17 	bl	8008e04 <__exponent>
 8008fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fd8:	1813      	adds	r3, r2, r0
 8008fda:	2a01      	cmp	r2, #1
 8008fdc:	4681      	mov	r9, r0
 8008fde:	6123      	str	r3, [r4, #16]
 8008fe0:	dc02      	bgt.n	8008fe8 <_printf_float+0x168>
 8008fe2:	6822      	ldr	r2, [r4, #0]
 8008fe4:	07d2      	lsls	r2, r2, #31
 8008fe6:	d501      	bpl.n	8008fec <_printf_float+0x16c>
 8008fe8:	3301      	adds	r3, #1
 8008fea:	6123      	str	r3, [r4, #16]
 8008fec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d09c      	beq.n	8008f2e <_printf_float+0xae>
 8008ff4:	232d      	movs	r3, #45	; 0x2d
 8008ff6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ffa:	e798      	b.n	8008f2e <_printf_float+0xae>
 8008ffc:	9a06      	ldr	r2, [sp, #24]
 8008ffe:	2a47      	cmp	r2, #71	; 0x47
 8009000:	d1be      	bne.n	8008f80 <_printf_float+0x100>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1bc      	bne.n	8008f80 <_printf_float+0x100>
 8009006:	2301      	movs	r3, #1
 8009008:	e7b9      	b.n	8008f7e <_printf_float+0xfe>
 800900a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800900e:	d118      	bne.n	8009042 <_printf_float+0x1c2>
 8009010:	2900      	cmp	r1, #0
 8009012:	6863      	ldr	r3, [r4, #4]
 8009014:	dd0b      	ble.n	800902e <_printf_float+0x1ae>
 8009016:	6121      	str	r1, [r4, #16]
 8009018:	b913      	cbnz	r3, 8009020 <_printf_float+0x1a0>
 800901a:	6822      	ldr	r2, [r4, #0]
 800901c:	07d0      	lsls	r0, r2, #31
 800901e:	d502      	bpl.n	8009026 <_printf_float+0x1a6>
 8009020:	3301      	adds	r3, #1
 8009022:	440b      	add	r3, r1
 8009024:	6123      	str	r3, [r4, #16]
 8009026:	65a1      	str	r1, [r4, #88]	; 0x58
 8009028:	f04f 0900 	mov.w	r9, #0
 800902c:	e7de      	b.n	8008fec <_printf_float+0x16c>
 800902e:	b913      	cbnz	r3, 8009036 <_printf_float+0x1b6>
 8009030:	6822      	ldr	r2, [r4, #0]
 8009032:	07d2      	lsls	r2, r2, #31
 8009034:	d501      	bpl.n	800903a <_printf_float+0x1ba>
 8009036:	3302      	adds	r3, #2
 8009038:	e7f4      	b.n	8009024 <_printf_float+0x1a4>
 800903a:	2301      	movs	r3, #1
 800903c:	e7f2      	b.n	8009024 <_printf_float+0x1a4>
 800903e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009044:	4299      	cmp	r1, r3
 8009046:	db05      	blt.n	8009054 <_printf_float+0x1d4>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	6121      	str	r1, [r4, #16]
 800904c:	07d8      	lsls	r0, r3, #31
 800904e:	d5ea      	bpl.n	8009026 <_printf_float+0x1a6>
 8009050:	1c4b      	adds	r3, r1, #1
 8009052:	e7e7      	b.n	8009024 <_printf_float+0x1a4>
 8009054:	2900      	cmp	r1, #0
 8009056:	bfd4      	ite	le
 8009058:	f1c1 0202 	rsble	r2, r1, #2
 800905c:	2201      	movgt	r2, #1
 800905e:	4413      	add	r3, r2
 8009060:	e7e0      	b.n	8009024 <_printf_float+0x1a4>
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	055a      	lsls	r2, r3, #21
 8009066:	d407      	bmi.n	8009078 <_printf_float+0x1f8>
 8009068:	6923      	ldr	r3, [r4, #16]
 800906a:	4642      	mov	r2, r8
 800906c:	4631      	mov	r1, r6
 800906e:	4628      	mov	r0, r5
 8009070:	47b8      	blx	r7
 8009072:	3001      	adds	r0, #1
 8009074:	d12c      	bne.n	80090d0 <_printf_float+0x250>
 8009076:	e764      	b.n	8008f42 <_printf_float+0xc2>
 8009078:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800907c:	f240 80e0 	bls.w	8009240 <_printf_float+0x3c0>
 8009080:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009084:	2200      	movs	r2, #0
 8009086:	2300      	movs	r3, #0
 8009088:	f7f7 fd36 	bl	8000af8 <__aeabi_dcmpeq>
 800908c:	2800      	cmp	r0, #0
 800908e:	d034      	beq.n	80090fa <_printf_float+0x27a>
 8009090:	4a37      	ldr	r2, [pc, #220]	; (8009170 <_printf_float+0x2f0>)
 8009092:	2301      	movs	r3, #1
 8009094:	4631      	mov	r1, r6
 8009096:	4628      	mov	r0, r5
 8009098:	47b8      	blx	r7
 800909a:	3001      	adds	r0, #1
 800909c:	f43f af51 	beq.w	8008f42 <_printf_float+0xc2>
 80090a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090a4:	429a      	cmp	r2, r3
 80090a6:	db02      	blt.n	80090ae <_printf_float+0x22e>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	07d8      	lsls	r0, r3, #31
 80090ac:	d510      	bpl.n	80090d0 <_printf_float+0x250>
 80090ae:	ee18 3a10 	vmov	r3, s16
 80090b2:	4652      	mov	r2, sl
 80090b4:	4631      	mov	r1, r6
 80090b6:	4628      	mov	r0, r5
 80090b8:	47b8      	blx	r7
 80090ba:	3001      	adds	r0, #1
 80090bc:	f43f af41 	beq.w	8008f42 <_printf_float+0xc2>
 80090c0:	f04f 0800 	mov.w	r8, #0
 80090c4:	f104 091a 	add.w	r9, r4, #26
 80090c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ca:	3b01      	subs	r3, #1
 80090cc:	4543      	cmp	r3, r8
 80090ce:	dc09      	bgt.n	80090e4 <_printf_float+0x264>
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	079b      	lsls	r3, r3, #30
 80090d4:	f100 8105 	bmi.w	80092e2 <_printf_float+0x462>
 80090d8:	68e0      	ldr	r0, [r4, #12]
 80090da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090dc:	4298      	cmp	r0, r3
 80090de:	bfb8      	it	lt
 80090e0:	4618      	movlt	r0, r3
 80090e2:	e730      	b.n	8008f46 <_printf_float+0xc6>
 80090e4:	2301      	movs	r3, #1
 80090e6:	464a      	mov	r2, r9
 80090e8:	4631      	mov	r1, r6
 80090ea:	4628      	mov	r0, r5
 80090ec:	47b8      	blx	r7
 80090ee:	3001      	adds	r0, #1
 80090f0:	f43f af27 	beq.w	8008f42 <_printf_float+0xc2>
 80090f4:	f108 0801 	add.w	r8, r8, #1
 80090f8:	e7e6      	b.n	80090c8 <_printf_float+0x248>
 80090fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	dc39      	bgt.n	8009174 <_printf_float+0x2f4>
 8009100:	4a1b      	ldr	r2, [pc, #108]	; (8009170 <_printf_float+0x2f0>)
 8009102:	2301      	movs	r3, #1
 8009104:	4631      	mov	r1, r6
 8009106:	4628      	mov	r0, r5
 8009108:	47b8      	blx	r7
 800910a:	3001      	adds	r0, #1
 800910c:	f43f af19 	beq.w	8008f42 <_printf_float+0xc2>
 8009110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009114:	4313      	orrs	r3, r2
 8009116:	d102      	bne.n	800911e <_printf_float+0x29e>
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	07d9      	lsls	r1, r3, #31
 800911c:	d5d8      	bpl.n	80090d0 <_printf_float+0x250>
 800911e:	ee18 3a10 	vmov	r3, s16
 8009122:	4652      	mov	r2, sl
 8009124:	4631      	mov	r1, r6
 8009126:	4628      	mov	r0, r5
 8009128:	47b8      	blx	r7
 800912a:	3001      	adds	r0, #1
 800912c:	f43f af09 	beq.w	8008f42 <_printf_float+0xc2>
 8009130:	f04f 0900 	mov.w	r9, #0
 8009134:	f104 0a1a 	add.w	sl, r4, #26
 8009138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800913a:	425b      	negs	r3, r3
 800913c:	454b      	cmp	r3, r9
 800913e:	dc01      	bgt.n	8009144 <_printf_float+0x2c4>
 8009140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009142:	e792      	b.n	800906a <_printf_float+0x1ea>
 8009144:	2301      	movs	r3, #1
 8009146:	4652      	mov	r2, sl
 8009148:	4631      	mov	r1, r6
 800914a:	4628      	mov	r0, r5
 800914c:	47b8      	blx	r7
 800914e:	3001      	adds	r0, #1
 8009150:	f43f aef7 	beq.w	8008f42 <_printf_float+0xc2>
 8009154:	f109 0901 	add.w	r9, r9, #1
 8009158:	e7ee      	b.n	8009138 <_printf_float+0x2b8>
 800915a:	bf00      	nop
 800915c:	7fefffff 	.word	0x7fefffff
 8009160:	0800d068 	.word	0x0800d068
 8009164:	0800d06c 	.word	0x0800d06c
 8009168:	0800d074 	.word	0x0800d074
 800916c:	0800d070 	.word	0x0800d070
 8009170:	0800d078 	.word	0x0800d078
 8009174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009176:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009178:	429a      	cmp	r2, r3
 800917a:	bfa8      	it	ge
 800917c:	461a      	movge	r2, r3
 800917e:	2a00      	cmp	r2, #0
 8009180:	4691      	mov	r9, r2
 8009182:	dc37      	bgt.n	80091f4 <_printf_float+0x374>
 8009184:	f04f 0b00 	mov.w	fp, #0
 8009188:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800918c:	f104 021a 	add.w	r2, r4, #26
 8009190:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	eba3 0309 	sub.w	r3, r3, r9
 8009198:	455b      	cmp	r3, fp
 800919a:	dc33      	bgt.n	8009204 <_printf_float+0x384>
 800919c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091a0:	429a      	cmp	r2, r3
 80091a2:	db3b      	blt.n	800921c <_printf_float+0x39c>
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	07da      	lsls	r2, r3, #31
 80091a8:	d438      	bmi.n	800921c <_printf_float+0x39c>
 80091aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ac:	9b05      	ldr	r3, [sp, #20]
 80091ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	eba2 0901 	sub.w	r9, r2, r1
 80091b6:	4599      	cmp	r9, r3
 80091b8:	bfa8      	it	ge
 80091ba:	4699      	movge	r9, r3
 80091bc:	f1b9 0f00 	cmp.w	r9, #0
 80091c0:	dc35      	bgt.n	800922e <_printf_float+0x3ae>
 80091c2:	f04f 0800 	mov.w	r8, #0
 80091c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091ca:	f104 0a1a 	add.w	sl, r4, #26
 80091ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091d2:	1a9b      	subs	r3, r3, r2
 80091d4:	eba3 0309 	sub.w	r3, r3, r9
 80091d8:	4543      	cmp	r3, r8
 80091da:	f77f af79 	ble.w	80090d0 <_printf_float+0x250>
 80091de:	2301      	movs	r3, #1
 80091e0:	4652      	mov	r2, sl
 80091e2:	4631      	mov	r1, r6
 80091e4:	4628      	mov	r0, r5
 80091e6:	47b8      	blx	r7
 80091e8:	3001      	adds	r0, #1
 80091ea:	f43f aeaa 	beq.w	8008f42 <_printf_float+0xc2>
 80091ee:	f108 0801 	add.w	r8, r8, #1
 80091f2:	e7ec      	b.n	80091ce <_printf_float+0x34e>
 80091f4:	4613      	mov	r3, r2
 80091f6:	4631      	mov	r1, r6
 80091f8:	4642      	mov	r2, r8
 80091fa:	4628      	mov	r0, r5
 80091fc:	47b8      	blx	r7
 80091fe:	3001      	adds	r0, #1
 8009200:	d1c0      	bne.n	8009184 <_printf_float+0x304>
 8009202:	e69e      	b.n	8008f42 <_printf_float+0xc2>
 8009204:	2301      	movs	r3, #1
 8009206:	4631      	mov	r1, r6
 8009208:	4628      	mov	r0, r5
 800920a:	9205      	str	r2, [sp, #20]
 800920c:	47b8      	blx	r7
 800920e:	3001      	adds	r0, #1
 8009210:	f43f ae97 	beq.w	8008f42 <_printf_float+0xc2>
 8009214:	9a05      	ldr	r2, [sp, #20]
 8009216:	f10b 0b01 	add.w	fp, fp, #1
 800921a:	e7b9      	b.n	8009190 <_printf_float+0x310>
 800921c:	ee18 3a10 	vmov	r3, s16
 8009220:	4652      	mov	r2, sl
 8009222:	4631      	mov	r1, r6
 8009224:	4628      	mov	r0, r5
 8009226:	47b8      	blx	r7
 8009228:	3001      	adds	r0, #1
 800922a:	d1be      	bne.n	80091aa <_printf_float+0x32a>
 800922c:	e689      	b.n	8008f42 <_printf_float+0xc2>
 800922e:	9a05      	ldr	r2, [sp, #20]
 8009230:	464b      	mov	r3, r9
 8009232:	4442      	add	r2, r8
 8009234:	4631      	mov	r1, r6
 8009236:	4628      	mov	r0, r5
 8009238:	47b8      	blx	r7
 800923a:	3001      	adds	r0, #1
 800923c:	d1c1      	bne.n	80091c2 <_printf_float+0x342>
 800923e:	e680      	b.n	8008f42 <_printf_float+0xc2>
 8009240:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009242:	2a01      	cmp	r2, #1
 8009244:	dc01      	bgt.n	800924a <_printf_float+0x3ca>
 8009246:	07db      	lsls	r3, r3, #31
 8009248:	d538      	bpl.n	80092bc <_printf_float+0x43c>
 800924a:	2301      	movs	r3, #1
 800924c:	4642      	mov	r2, r8
 800924e:	4631      	mov	r1, r6
 8009250:	4628      	mov	r0, r5
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	f43f ae74 	beq.w	8008f42 <_printf_float+0xc2>
 800925a:	ee18 3a10 	vmov	r3, s16
 800925e:	4652      	mov	r2, sl
 8009260:	4631      	mov	r1, r6
 8009262:	4628      	mov	r0, r5
 8009264:	47b8      	blx	r7
 8009266:	3001      	adds	r0, #1
 8009268:	f43f ae6b 	beq.w	8008f42 <_printf_float+0xc2>
 800926c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009270:	2200      	movs	r2, #0
 8009272:	2300      	movs	r3, #0
 8009274:	f7f7 fc40 	bl	8000af8 <__aeabi_dcmpeq>
 8009278:	b9d8      	cbnz	r0, 80092b2 <_printf_float+0x432>
 800927a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800927c:	f108 0201 	add.w	r2, r8, #1
 8009280:	3b01      	subs	r3, #1
 8009282:	4631      	mov	r1, r6
 8009284:	4628      	mov	r0, r5
 8009286:	47b8      	blx	r7
 8009288:	3001      	adds	r0, #1
 800928a:	d10e      	bne.n	80092aa <_printf_float+0x42a>
 800928c:	e659      	b.n	8008f42 <_printf_float+0xc2>
 800928e:	2301      	movs	r3, #1
 8009290:	4652      	mov	r2, sl
 8009292:	4631      	mov	r1, r6
 8009294:	4628      	mov	r0, r5
 8009296:	47b8      	blx	r7
 8009298:	3001      	adds	r0, #1
 800929a:	f43f ae52 	beq.w	8008f42 <_printf_float+0xc2>
 800929e:	f108 0801 	add.w	r8, r8, #1
 80092a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a4:	3b01      	subs	r3, #1
 80092a6:	4543      	cmp	r3, r8
 80092a8:	dcf1      	bgt.n	800928e <_printf_float+0x40e>
 80092aa:	464b      	mov	r3, r9
 80092ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092b0:	e6dc      	b.n	800906c <_printf_float+0x1ec>
 80092b2:	f04f 0800 	mov.w	r8, #0
 80092b6:	f104 0a1a 	add.w	sl, r4, #26
 80092ba:	e7f2      	b.n	80092a2 <_printf_float+0x422>
 80092bc:	2301      	movs	r3, #1
 80092be:	4642      	mov	r2, r8
 80092c0:	e7df      	b.n	8009282 <_printf_float+0x402>
 80092c2:	2301      	movs	r3, #1
 80092c4:	464a      	mov	r2, r9
 80092c6:	4631      	mov	r1, r6
 80092c8:	4628      	mov	r0, r5
 80092ca:	47b8      	blx	r7
 80092cc:	3001      	adds	r0, #1
 80092ce:	f43f ae38 	beq.w	8008f42 <_printf_float+0xc2>
 80092d2:	f108 0801 	add.w	r8, r8, #1
 80092d6:	68e3      	ldr	r3, [r4, #12]
 80092d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092da:	1a5b      	subs	r3, r3, r1
 80092dc:	4543      	cmp	r3, r8
 80092de:	dcf0      	bgt.n	80092c2 <_printf_float+0x442>
 80092e0:	e6fa      	b.n	80090d8 <_printf_float+0x258>
 80092e2:	f04f 0800 	mov.w	r8, #0
 80092e6:	f104 0919 	add.w	r9, r4, #25
 80092ea:	e7f4      	b.n	80092d6 <_printf_float+0x456>

080092ec <_printf_common>:
 80092ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f0:	4616      	mov	r6, r2
 80092f2:	4699      	mov	r9, r3
 80092f4:	688a      	ldr	r2, [r1, #8]
 80092f6:	690b      	ldr	r3, [r1, #16]
 80092f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092fc:	4293      	cmp	r3, r2
 80092fe:	bfb8      	it	lt
 8009300:	4613      	movlt	r3, r2
 8009302:	6033      	str	r3, [r6, #0]
 8009304:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009308:	4607      	mov	r7, r0
 800930a:	460c      	mov	r4, r1
 800930c:	b10a      	cbz	r2, 8009312 <_printf_common+0x26>
 800930e:	3301      	adds	r3, #1
 8009310:	6033      	str	r3, [r6, #0]
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	0699      	lsls	r1, r3, #26
 8009316:	bf42      	ittt	mi
 8009318:	6833      	ldrmi	r3, [r6, #0]
 800931a:	3302      	addmi	r3, #2
 800931c:	6033      	strmi	r3, [r6, #0]
 800931e:	6825      	ldr	r5, [r4, #0]
 8009320:	f015 0506 	ands.w	r5, r5, #6
 8009324:	d106      	bne.n	8009334 <_printf_common+0x48>
 8009326:	f104 0a19 	add.w	sl, r4, #25
 800932a:	68e3      	ldr	r3, [r4, #12]
 800932c:	6832      	ldr	r2, [r6, #0]
 800932e:	1a9b      	subs	r3, r3, r2
 8009330:	42ab      	cmp	r3, r5
 8009332:	dc26      	bgt.n	8009382 <_printf_common+0x96>
 8009334:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009338:	1e13      	subs	r3, r2, #0
 800933a:	6822      	ldr	r2, [r4, #0]
 800933c:	bf18      	it	ne
 800933e:	2301      	movne	r3, #1
 8009340:	0692      	lsls	r2, r2, #26
 8009342:	d42b      	bmi.n	800939c <_printf_common+0xb0>
 8009344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009348:	4649      	mov	r1, r9
 800934a:	4638      	mov	r0, r7
 800934c:	47c0      	blx	r8
 800934e:	3001      	adds	r0, #1
 8009350:	d01e      	beq.n	8009390 <_printf_common+0xa4>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	68e5      	ldr	r5, [r4, #12]
 8009356:	6832      	ldr	r2, [r6, #0]
 8009358:	f003 0306 	and.w	r3, r3, #6
 800935c:	2b04      	cmp	r3, #4
 800935e:	bf08      	it	eq
 8009360:	1aad      	subeq	r5, r5, r2
 8009362:	68a3      	ldr	r3, [r4, #8]
 8009364:	6922      	ldr	r2, [r4, #16]
 8009366:	bf0c      	ite	eq
 8009368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800936c:	2500      	movne	r5, #0
 800936e:	4293      	cmp	r3, r2
 8009370:	bfc4      	itt	gt
 8009372:	1a9b      	subgt	r3, r3, r2
 8009374:	18ed      	addgt	r5, r5, r3
 8009376:	2600      	movs	r6, #0
 8009378:	341a      	adds	r4, #26
 800937a:	42b5      	cmp	r5, r6
 800937c:	d11a      	bne.n	80093b4 <_printf_common+0xc8>
 800937e:	2000      	movs	r0, #0
 8009380:	e008      	b.n	8009394 <_printf_common+0xa8>
 8009382:	2301      	movs	r3, #1
 8009384:	4652      	mov	r2, sl
 8009386:	4649      	mov	r1, r9
 8009388:	4638      	mov	r0, r7
 800938a:	47c0      	blx	r8
 800938c:	3001      	adds	r0, #1
 800938e:	d103      	bne.n	8009398 <_printf_common+0xac>
 8009390:	f04f 30ff 	mov.w	r0, #4294967295
 8009394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009398:	3501      	adds	r5, #1
 800939a:	e7c6      	b.n	800932a <_printf_common+0x3e>
 800939c:	18e1      	adds	r1, r4, r3
 800939e:	1c5a      	adds	r2, r3, #1
 80093a0:	2030      	movs	r0, #48	; 0x30
 80093a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093a6:	4422      	add	r2, r4
 80093a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093b0:	3302      	adds	r3, #2
 80093b2:	e7c7      	b.n	8009344 <_printf_common+0x58>
 80093b4:	2301      	movs	r3, #1
 80093b6:	4622      	mov	r2, r4
 80093b8:	4649      	mov	r1, r9
 80093ba:	4638      	mov	r0, r7
 80093bc:	47c0      	blx	r8
 80093be:	3001      	adds	r0, #1
 80093c0:	d0e6      	beq.n	8009390 <_printf_common+0xa4>
 80093c2:	3601      	adds	r6, #1
 80093c4:	e7d9      	b.n	800937a <_printf_common+0x8e>
	...

080093c8 <_printf_i>:
 80093c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093cc:	460c      	mov	r4, r1
 80093ce:	4691      	mov	r9, r2
 80093d0:	7e27      	ldrb	r7, [r4, #24]
 80093d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093d4:	2f78      	cmp	r7, #120	; 0x78
 80093d6:	4680      	mov	r8, r0
 80093d8:	469a      	mov	sl, r3
 80093da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093de:	d807      	bhi.n	80093f0 <_printf_i+0x28>
 80093e0:	2f62      	cmp	r7, #98	; 0x62
 80093e2:	d80a      	bhi.n	80093fa <_printf_i+0x32>
 80093e4:	2f00      	cmp	r7, #0
 80093e6:	f000 80d8 	beq.w	800959a <_printf_i+0x1d2>
 80093ea:	2f58      	cmp	r7, #88	; 0x58
 80093ec:	f000 80a3 	beq.w	8009536 <_printf_i+0x16e>
 80093f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093f8:	e03a      	b.n	8009470 <_printf_i+0xa8>
 80093fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093fe:	2b15      	cmp	r3, #21
 8009400:	d8f6      	bhi.n	80093f0 <_printf_i+0x28>
 8009402:	a001      	add	r0, pc, #4	; (adr r0, 8009408 <_printf_i+0x40>)
 8009404:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009408:	08009461 	.word	0x08009461
 800940c:	08009475 	.word	0x08009475
 8009410:	080093f1 	.word	0x080093f1
 8009414:	080093f1 	.word	0x080093f1
 8009418:	080093f1 	.word	0x080093f1
 800941c:	080093f1 	.word	0x080093f1
 8009420:	08009475 	.word	0x08009475
 8009424:	080093f1 	.word	0x080093f1
 8009428:	080093f1 	.word	0x080093f1
 800942c:	080093f1 	.word	0x080093f1
 8009430:	080093f1 	.word	0x080093f1
 8009434:	08009581 	.word	0x08009581
 8009438:	080094a5 	.word	0x080094a5
 800943c:	08009563 	.word	0x08009563
 8009440:	080093f1 	.word	0x080093f1
 8009444:	080093f1 	.word	0x080093f1
 8009448:	080095a3 	.word	0x080095a3
 800944c:	080093f1 	.word	0x080093f1
 8009450:	080094a5 	.word	0x080094a5
 8009454:	080093f1 	.word	0x080093f1
 8009458:	080093f1 	.word	0x080093f1
 800945c:	0800956b 	.word	0x0800956b
 8009460:	680b      	ldr	r3, [r1, #0]
 8009462:	1d1a      	adds	r2, r3, #4
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	600a      	str	r2, [r1, #0]
 8009468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800946c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009470:	2301      	movs	r3, #1
 8009472:	e0a3      	b.n	80095bc <_printf_i+0x1f4>
 8009474:	6825      	ldr	r5, [r4, #0]
 8009476:	6808      	ldr	r0, [r1, #0]
 8009478:	062e      	lsls	r6, r5, #24
 800947a:	f100 0304 	add.w	r3, r0, #4
 800947e:	d50a      	bpl.n	8009496 <_printf_i+0xce>
 8009480:	6805      	ldr	r5, [r0, #0]
 8009482:	600b      	str	r3, [r1, #0]
 8009484:	2d00      	cmp	r5, #0
 8009486:	da03      	bge.n	8009490 <_printf_i+0xc8>
 8009488:	232d      	movs	r3, #45	; 0x2d
 800948a:	426d      	negs	r5, r5
 800948c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009490:	485e      	ldr	r0, [pc, #376]	; (800960c <_printf_i+0x244>)
 8009492:	230a      	movs	r3, #10
 8009494:	e019      	b.n	80094ca <_printf_i+0x102>
 8009496:	f015 0f40 	tst.w	r5, #64	; 0x40
 800949a:	6805      	ldr	r5, [r0, #0]
 800949c:	600b      	str	r3, [r1, #0]
 800949e:	bf18      	it	ne
 80094a0:	b22d      	sxthne	r5, r5
 80094a2:	e7ef      	b.n	8009484 <_printf_i+0xbc>
 80094a4:	680b      	ldr	r3, [r1, #0]
 80094a6:	6825      	ldr	r5, [r4, #0]
 80094a8:	1d18      	adds	r0, r3, #4
 80094aa:	6008      	str	r0, [r1, #0]
 80094ac:	0628      	lsls	r0, r5, #24
 80094ae:	d501      	bpl.n	80094b4 <_printf_i+0xec>
 80094b0:	681d      	ldr	r5, [r3, #0]
 80094b2:	e002      	b.n	80094ba <_printf_i+0xf2>
 80094b4:	0669      	lsls	r1, r5, #25
 80094b6:	d5fb      	bpl.n	80094b0 <_printf_i+0xe8>
 80094b8:	881d      	ldrh	r5, [r3, #0]
 80094ba:	4854      	ldr	r0, [pc, #336]	; (800960c <_printf_i+0x244>)
 80094bc:	2f6f      	cmp	r7, #111	; 0x6f
 80094be:	bf0c      	ite	eq
 80094c0:	2308      	moveq	r3, #8
 80094c2:	230a      	movne	r3, #10
 80094c4:	2100      	movs	r1, #0
 80094c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094ca:	6866      	ldr	r6, [r4, #4]
 80094cc:	60a6      	str	r6, [r4, #8]
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	bfa2      	ittt	ge
 80094d2:	6821      	ldrge	r1, [r4, #0]
 80094d4:	f021 0104 	bicge.w	r1, r1, #4
 80094d8:	6021      	strge	r1, [r4, #0]
 80094da:	b90d      	cbnz	r5, 80094e0 <_printf_i+0x118>
 80094dc:	2e00      	cmp	r6, #0
 80094de:	d04d      	beq.n	800957c <_printf_i+0x1b4>
 80094e0:	4616      	mov	r6, r2
 80094e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80094e6:	fb03 5711 	mls	r7, r3, r1, r5
 80094ea:	5dc7      	ldrb	r7, [r0, r7]
 80094ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094f0:	462f      	mov	r7, r5
 80094f2:	42bb      	cmp	r3, r7
 80094f4:	460d      	mov	r5, r1
 80094f6:	d9f4      	bls.n	80094e2 <_printf_i+0x11a>
 80094f8:	2b08      	cmp	r3, #8
 80094fa:	d10b      	bne.n	8009514 <_printf_i+0x14c>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	07df      	lsls	r7, r3, #31
 8009500:	d508      	bpl.n	8009514 <_printf_i+0x14c>
 8009502:	6923      	ldr	r3, [r4, #16]
 8009504:	6861      	ldr	r1, [r4, #4]
 8009506:	4299      	cmp	r1, r3
 8009508:	bfde      	ittt	le
 800950a:	2330      	movle	r3, #48	; 0x30
 800950c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009510:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009514:	1b92      	subs	r2, r2, r6
 8009516:	6122      	str	r2, [r4, #16]
 8009518:	f8cd a000 	str.w	sl, [sp]
 800951c:	464b      	mov	r3, r9
 800951e:	aa03      	add	r2, sp, #12
 8009520:	4621      	mov	r1, r4
 8009522:	4640      	mov	r0, r8
 8009524:	f7ff fee2 	bl	80092ec <_printf_common>
 8009528:	3001      	adds	r0, #1
 800952a:	d14c      	bne.n	80095c6 <_printf_i+0x1fe>
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	b004      	add	sp, #16
 8009532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009536:	4835      	ldr	r0, [pc, #212]	; (800960c <_printf_i+0x244>)
 8009538:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	680e      	ldr	r6, [r1, #0]
 8009540:	061f      	lsls	r7, r3, #24
 8009542:	f856 5b04 	ldr.w	r5, [r6], #4
 8009546:	600e      	str	r6, [r1, #0]
 8009548:	d514      	bpl.n	8009574 <_printf_i+0x1ac>
 800954a:	07d9      	lsls	r1, r3, #31
 800954c:	bf44      	itt	mi
 800954e:	f043 0320 	orrmi.w	r3, r3, #32
 8009552:	6023      	strmi	r3, [r4, #0]
 8009554:	b91d      	cbnz	r5, 800955e <_printf_i+0x196>
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	f023 0320 	bic.w	r3, r3, #32
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	2310      	movs	r3, #16
 8009560:	e7b0      	b.n	80094c4 <_printf_i+0xfc>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	f043 0320 	orr.w	r3, r3, #32
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	2378      	movs	r3, #120	; 0x78
 800956c:	4828      	ldr	r0, [pc, #160]	; (8009610 <_printf_i+0x248>)
 800956e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009572:	e7e3      	b.n	800953c <_printf_i+0x174>
 8009574:	065e      	lsls	r6, r3, #25
 8009576:	bf48      	it	mi
 8009578:	b2ad      	uxthmi	r5, r5
 800957a:	e7e6      	b.n	800954a <_printf_i+0x182>
 800957c:	4616      	mov	r6, r2
 800957e:	e7bb      	b.n	80094f8 <_printf_i+0x130>
 8009580:	680b      	ldr	r3, [r1, #0]
 8009582:	6826      	ldr	r6, [r4, #0]
 8009584:	6960      	ldr	r0, [r4, #20]
 8009586:	1d1d      	adds	r5, r3, #4
 8009588:	600d      	str	r5, [r1, #0]
 800958a:	0635      	lsls	r5, r6, #24
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	d501      	bpl.n	8009594 <_printf_i+0x1cc>
 8009590:	6018      	str	r0, [r3, #0]
 8009592:	e002      	b.n	800959a <_printf_i+0x1d2>
 8009594:	0671      	lsls	r1, r6, #25
 8009596:	d5fb      	bpl.n	8009590 <_printf_i+0x1c8>
 8009598:	8018      	strh	r0, [r3, #0]
 800959a:	2300      	movs	r3, #0
 800959c:	6123      	str	r3, [r4, #16]
 800959e:	4616      	mov	r6, r2
 80095a0:	e7ba      	b.n	8009518 <_printf_i+0x150>
 80095a2:	680b      	ldr	r3, [r1, #0]
 80095a4:	1d1a      	adds	r2, r3, #4
 80095a6:	600a      	str	r2, [r1, #0]
 80095a8:	681e      	ldr	r6, [r3, #0]
 80095aa:	6862      	ldr	r2, [r4, #4]
 80095ac:	2100      	movs	r1, #0
 80095ae:	4630      	mov	r0, r6
 80095b0:	f7f6 fe2e 	bl	8000210 <memchr>
 80095b4:	b108      	cbz	r0, 80095ba <_printf_i+0x1f2>
 80095b6:	1b80      	subs	r0, r0, r6
 80095b8:	6060      	str	r0, [r4, #4]
 80095ba:	6863      	ldr	r3, [r4, #4]
 80095bc:	6123      	str	r3, [r4, #16]
 80095be:	2300      	movs	r3, #0
 80095c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095c4:	e7a8      	b.n	8009518 <_printf_i+0x150>
 80095c6:	6923      	ldr	r3, [r4, #16]
 80095c8:	4632      	mov	r2, r6
 80095ca:	4649      	mov	r1, r9
 80095cc:	4640      	mov	r0, r8
 80095ce:	47d0      	blx	sl
 80095d0:	3001      	adds	r0, #1
 80095d2:	d0ab      	beq.n	800952c <_printf_i+0x164>
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	079b      	lsls	r3, r3, #30
 80095d8:	d413      	bmi.n	8009602 <_printf_i+0x23a>
 80095da:	68e0      	ldr	r0, [r4, #12]
 80095dc:	9b03      	ldr	r3, [sp, #12]
 80095de:	4298      	cmp	r0, r3
 80095e0:	bfb8      	it	lt
 80095e2:	4618      	movlt	r0, r3
 80095e4:	e7a4      	b.n	8009530 <_printf_i+0x168>
 80095e6:	2301      	movs	r3, #1
 80095e8:	4632      	mov	r2, r6
 80095ea:	4649      	mov	r1, r9
 80095ec:	4640      	mov	r0, r8
 80095ee:	47d0      	blx	sl
 80095f0:	3001      	adds	r0, #1
 80095f2:	d09b      	beq.n	800952c <_printf_i+0x164>
 80095f4:	3501      	adds	r5, #1
 80095f6:	68e3      	ldr	r3, [r4, #12]
 80095f8:	9903      	ldr	r1, [sp, #12]
 80095fa:	1a5b      	subs	r3, r3, r1
 80095fc:	42ab      	cmp	r3, r5
 80095fe:	dcf2      	bgt.n	80095e6 <_printf_i+0x21e>
 8009600:	e7eb      	b.n	80095da <_printf_i+0x212>
 8009602:	2500      	movs	r5, #0
 8009604:	f104 0619 	add.w	r6, r4, #25
 8009608:	e7f5      	b.n	80095f6 <_printf_i+0x22e>
 800960a:	bf00      	nop
 800960c:	0800d07a 	.word	0x0800d07a
 8009610:	0800d08b 	.word	0x0800d08b

08009614 <_sbrk_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	4d06      	ldr	r5, [pc, #24]	; (8009630 <_sbrk_r+0x1c>)
 8009618:	2300      	movs	r3, #0
 800961a:	4604      	mov	r4, r0
 800961c:	4608      	mov	r0, r1
 800961e:	602b      	str	r3, [r5, #0]
 8009620:	f7f9 f842 	bl	80026a8 <_sbrk>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d102      	bne.n	800962e <_sbrk_r+0x1a>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	b103      	cbz	r3, 800962e <_sbrk_r+0x1a>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	20000d9c 	.word	0x20000d9c

08009634 <sniprintf>:
 8009634:	b40c      	push	{r2, r3}
 8009636:	b530      	push	{r4, r5, lr}
 8009638:	4b17      	ldr	r3, [pc, #92]	; (8009698 <sniprintf+0x64>)
 800963a:	1e0c      	subs	r4, r1, #0
 800963c:	681d      	ldr	r5, [r3, #0]
 800963e:	b09d      	sub	sp, #116	; 0x74
 8009640:	da08      	bge.n	8009654 <sniprintf+0x20>
 8009642:	238b      	movs	r3, #139	; 0x8b
 8009644:	602b      	str	r3, [r5, #0]
 8009646:	f04f 30ff 	mov.w	r0, #4294967295
 800964a:	b01d      	add	sp, #116	; 0x74
 800964c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009650:	b002      	add	sp, #8
 8009652:	4770      	bx	lr
 8009654:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009658:	f8ad 3014 	strh.w	r3, [sp, #20]
 800965c:	bf14      	ite	ne
 800965e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009662:	4623      	moveq	r3, r4
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	9307      	str	r3, [sp, #28]
 8009668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800966c:	9002      	str	r0, [sp, #8]
 800966e:	9006      	str	r0, [sp, #24]
 8009670:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009674:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009676:	ab21      	add	r3, sp, #132	; 0x84
 8009678:	a902      	add	r1, sp, #8
 800967a:	4628      	mov	r0, r5
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	f001 fac5 	bl	800ac0c <_svfiprintf_r>
 8009682:	1c43      	adds	r3, r0, #1
 8009684:	bfbc      	itt	lt
 8009686:	238b      	movlt	r3, #139	; 0x8b
 8009688:	602b      	strlt	r3, [r5, #0]
 800968a:	2c00      	cmp	r4, #0
 800968c:	d0dd      	beq.n	800964a <sniprintf+0x16>
 800968e:	9b02      	ldr	r3, [sp, #8]
 8009690:	2200      	movs	r2, #0
 8009692:	701a      	strb	r2, [r3, #0]
 8009694:	e7d9      	b.n	800964a <sniprintf+0x16>
 8009696:	bf00      	nop
 8009698:	200005fc 	.word	0x200005fc

0800969c <siprintf>:
 800969c:	b40e      	push	{r1, r2, r3}
 800969e:	b500      	push	{lr}
 80096a0:	b09c      	sub	sp, #112	; 0x70
 80096a2:	ab1d      	add	r3, sp, #116	; 0x74
 80096a4:	9002      	str	r0, [sp, #8]
 80096a6:	9006      	str	r0, [sp, #24]
 80096a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096ac:	4809      	ldr	r0, [pc, #36]	; (80096d4 <siprintf+0x38>)
 80096ae:	9107      	str	r1, [sp, #28]
 80096b0:	9104      	str	r1, [sp, #16]
 80096b2:	4909      	ldr	r1, [pc, #36]	; (80096d8 <siprintf+0x3c>)
 80096b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b8:	9105      	str	r1, [sp, #20]
 80096ba:	6800      	ldr	r0, [r0, #0]
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	a902      	add	r1, sp, #8
 80096c0:	f001 faa4 	bl	800ac0c <_svfiprintf_r>
 80096c4:	9b02      	ldr	r3, [sp, #8]
 80096c6:	2200      	movs	r2, #0
 80096c8:	701a      	strb	r2, [r3, #0]
 80096ca:	b01c      	add	sp, #112	; 0x70
 80096cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80096d0:	b003      	add	sp, #12
 80096d2:	4770      	bx	lr
 80096d4:	200005fc 	.word	0x200005fc
 80096d8:	ffff0208 	.word	0xffff0208

080096dc <quorem>:
 80096dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e0:	6903      	ldr	r3, [r0, #16]
 80096e2:	690c      	ldr	r4, [r1, #16]
 80096e4:	42a3      	cmp	r3, r4
 80096e6:	4607      	mov	r7, r0
 80096e8:	f2c0 8081 	blt.w	80097ee <quorem+0x112>
 80096ec:	3c01      	subs	r4, #1
 80096ee:	f101 0814 	add.w	r8, r1, #20
 80096f2:	f100 0514 	add.w	r5, r0, #20
 80096f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096fa:	9301      	str	r3, [sp, #4]
 80096fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009700:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009704:	3301      	adds	r3, #1
 8009706:	429a      	cmp	r2, r3
 8009708:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800970c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009710:	fbb2 f6f3 	udiv	r6, r2, r3
 8009714:	d331      	bcc.n	800977a <quorem+0x9e>
 8009716:	f04f 0e00 	mov.w	lr, #0
 800971a:	4640      	mov	r0, r8
 800971c:	46ac      	mov	ip, r5
 800971e:	46f2      	mov	sl, lr
 8009720:	f850 2b04 	ldr.w	r2, [r0], #4
 8009724:	b293      	uxth	r3, r2
 8009726:	fb06 e303 	mla	r3, r6, r3, lr
 800972a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800972e:	b29b      	uxth	r3, r3
 8009730:	ebaa 0303 	sub.w	r3, sl, r3
 8009734:	0c12      	lsrs	r2, r2, #16
 8009736:	f8dc a000 	ldr.w	sl, [ip]
 800973a:	fb06 e202 	mla	r2, r6, r2, lr
 800973e:	fa13 f38a 	uxtah	r3, r3, sl
 8009742:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009746:	fa1f fa82 	uxth.w	sl, r2
 800974a:	f8dc 2000 	ldr.w	r2, [ip]
 800974e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009752:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009756:	b29b      	uxth	r3, r3
 8009758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800975c:	4581      	cmp	r9, r0
 800975e:	f84c 3b04 	str.w	r3, [ip], #4
 8009762:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009766:	d2db      	bcs.n	8009720 <quorem+0x44>
 8009768:	f855 300b 	ldr.w	r3, [r5, fp]
 800976c:	b92b      	cbnz	r3, 800977a <quorem+0x9e>
 800976e:	9b01      	ldr	r3, [sp, #4]
 8009770:	3b04      	subs	r3, #4
 8009772:	429d      	cmp	r5, r3
 8009774:	461a      	mov	r2, r3
 8009776:	d32e      	bcc.n	80097d6 <quorem+0xfa>
 8009778:	613c      	str	r4, [r7, #16]
 800977a:	4638      	mov	r0, r7
 800977c:	f001 f8b6 	bl	800a8ec <__mcmp>
 8009780:	2800      	cmp	r0, #0
 8009782:	db24      	blt.n	80097ce <quorem+0xf2>
 8009784:	3601      	adds	r6, #1
 8009786:	4628      	mov	r0, r5
 8009788:	f04f 0c00 	mov.w	ip, #0
 800978c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009790:	f8d0 e000 	ldr.w	lr, [r0]
 8009794:	b293      	uxth	r3, r2
 8009796:	ebac 0303 	sub.w	r3, ip, r3
 800979a:	0c12      	lsrs	r2, r2, #16
 800979c:	fa13 f38e 	uxtah	r3, r3, lr
 80097a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ae:	45c1      	cmp	r9, r8
 80097b0:	f840 3b04 	str.w	r3, [r0], #4
 80097b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097b8:	d2e8      	bcs.n	800978c <quorem+0xb0>
 80097ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097c2:	b922      	cbnz	r2, 80097ce <quorem+0xf2>
 80097c4:	3b04      	subs	r3, #4
 80097c6:	429d      	cmp	r5, r3
 80097c8:	461a      	mov	r2, r3
 80097ca:	d30a      	bcc.n	80097e2 <quorem+0x106>
 80097cc:	613c      	str	r4, [r7, #16]
 80097ce:	4630      	mov	r0, r6
 80097d0:	b003      	add	sp, #12
 80097d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d6:	6812      	ldr	r2, [r2, #0]
 80097d8:	3b04      	subs	r3, #4
 80097da:	2a00      	cmp	r2, #0
 80097dc:	d1cc      	bne.n	8009778 <quorem+0x9c>
 80097de:	3c01      	subs	r4, #1
 80097e0:	e7c7      	b.n	8009772 <quorem+0x96>
 80097e2:	6812      	ldr	r2, [r2, #0]
 80097e4:	3b04      	subs	r3, #4
 80097e6:	2a00      	cmp	r2, #0
 80097e8:	d1f0      	bne.n	80097cc <quorem+0xf0>
 80097ea:	3c01      	subs	r4, #1
 80097ec:	e7eb      	b.n	80097c6 <quorem+0xea>
 80097ee:	2000      	movs	r0, #0
 80097f0:	e7ee      	b.n	80097d0 <quorem+0xf4>
 80097f2:	0000      	movs	r0, r0
 80097f4:	0000      	movs	r0, r0
	...

080097f8 <_dtoa_r>:
 80097f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	ed2d 8b02 	vpush	{d8}
 8009800:	ec57 6b10 	vmov	r6, r7, d0
 8009804:	b095      	sub	sp, #84	; 0x54
 8009806:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009808:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800980c:	9105      	str	r1, [sp, #20]
 800980e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009812:	4604      	mov	r4, r0
 8009814:	9209      	str	r2, [sp, #36]	; 0x24
 8009816:	930f      	str	r3, [sp, #60]	; 0x3c
 8009818:	b975      	cbnz	r5, 8009838 <_dtoa_r+0x40>
 800981a:	2010      	movs	r0, #16
 800981c:	f7ff f9c8 	bl	8008bb0 <malloc>
 8009820:	4602      	mov	r2, r0
 8009822:	6260      	str	r0, [r4, #36]	; 0x24
 8009824:	b920      	cbnz	r0, 8009830 <_dtoa_r+0x38>
 8009826:	4bb2      	ldr	r3, [pc, #712]	; (8009af0 <_dtoa_r+0x2f8>)
 8009828:	21ea      	movs	r1, #234	; 0xea
 800982a:	48b2      	ldr	r0, [pc, #712]	; (8009af4 <_dtoa_r+0x2fc>)
 800982c:	f001 faee 	bl	800ae0c <__assert_func>
 8009830:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009834:	6005      	str	r5, [r0, #0]
 8009836:	60c5      	str	r5, [r0, #12]
 8009838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800983a:	6819      	ldr	r1, [r3, #0]
 800983c:	b151      	cbz	r1, 8009854 <_dtoa_r+0x5c>
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	604a      	str	r2, [r1, #4]
 8009842:	2301      	movs	r3, #1
 8009844:	4093      	lsls	r3, r2
 8009846:	608b      	str	r3, [r1, #8]
 8009848:	4620      	mov	r0, r4
 800984a:	f000 fe11 	bl	800a470 <_Bfree>
 800984e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009850:	2200      	movs	r2, #0
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	1e3b      	subs	r3, r7, #0
 8009856:	bfb9      	ittee	lt
 8009858:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800985c:	9303      	strlt	r3, [sp, #12]
 800985e:	2300      	movge	r3, #0
 8009860:	f8c8 3000 	strge.w	r3, [r8]
 8009864:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009868:	4ba3      	ldr	r3, [pc, #652]	; (8009af8 <_dtoa_r+0x300>)
 800986a:	bfbc      	itt	lt
 800986c:	2201      	movlt	r2, #1
 800986e:	f8c8 2000 	strlt.w	r2, [r8]
 8009872:	ea33 0309 	bics.w	r3, r3, r9
 8009876:	d11b      	bne.n	80098b0 <_dtoa_r+0xb8>
 8009878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800987a:	f242 730f 	movw	r3, #9999	; 0x270f
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009884:	4333      	orrs	r3, r6
 8009886:	f000 857a 	beq.w	800a37e <_dtoa_r+0xb86>
 800988a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800988c:	b963      	cbnz	r3, 80098a8 <_dtoa_r+0xb0>
 800988e:	4b9b      	ldr	r3, [pc, #620]	; (8009afc <_dtoa_r+0x304>)
 8009890:	e024      	b.n	80098dc <_dtoa_r+0xe4>
 8009892:	4b9b      	ldr	r3, [pc, #620]	; (8009b00 <_dtoa_r+0x308>)
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	3308      	adds	r3, #8
 8009898:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	9800      	ldr	r0, [sp, #0]
 800989e:	b015      	add	sp, #84	; 0x54
 80098a0:	ecbd 8b02 	vpop	{d8}
 80098a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a8:	4b94      	ldr	r3, [pc, #592]	; (8009afc <_dtoa_r+0x304>)
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	3303      	adds	r3, #3
 80098ae:	e7f3      	b.n	8009898 <_dtoa_r+0xa0>
 80098b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098b4:	2200      	movs	r2, #0
 80098b6:	ec51 0b17 	vmov	r0, r1, d7
 80098ba:	2300      	movs	r3, #0
 80098bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80098c0:	f7f7 f91a 	bl	8000af8 <__aeabi_dcmpeq>
 80098c4:	4680      	mov	r8, r0
 80098c6:	b158      	cbz	r0, 80098e0 <_dtoa_r+0xe8>
 80098c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098ca:	2301      	movs	r3, #1
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 8551 	beq.w	800a378 <_dtoa_r+0xb80>
 80098d6:	488b      	ldr	r0, [pc, #556]	; (8009b04 <_dtoa_r+0x30c>)
 80098d8:	6018      	str	r0, [r3, #0]
 80098da:	1e43      	subs	r3, r0, #1
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	e7dd      	b.n	800989c <_dtoa_r+0xa4>
 80098e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80098e4:	aa12      	add	r2, sp, #72	; 0x48
 80098e6:	a913      	add	r1, sp, #76	; 0x4c
 80098e8:	4620      	mov	r0, r4
 80098ea:	f001 f8a3 	bl	800aa34 <__d2b>
 80098ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098f2:	4683      	mov	fp, r0
 80098f4:	2d00      	cmp	r5, #0
 80098f6:	d07c      	beq.n	80099f2 <_dtoa_r+0x1fa>
 80098f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80098fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009902:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009906:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800990a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800990e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009912:	4b7d      	ldr	r3, [pc, #500]	; (8009b08 <_dtoa_r+0x310>)
 8009914:	2200      	movs	r2, #0
 8009916:	4630      	mov	r0, r6
 8009918:	4639      	mov	r1, r7
 800991a:	f7f6 fccd 	bl	80002b8 <__aeabi_dsub>
 800991e:	a36e      	add	r3, pc, #440	; (adr r3, 8009ad8 <_dtoa_r+0x2e0>)
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	f7f6 fe80 	bl	8000628 <__aeabi_dmul>
 8009928:	a36d      	add	r3, pc, #436	; (adr r3, 8009ae0 <_dtoa_r+0x2e8>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f6 fcc5 	bl	80002bc <__adddf3>
 8009932:	4606      	mov	r6, r0
 8009934:	4628      	mov	r0, r5
 8009936:	460f      	mov	r7, r1
 8009938:	f7f6 fe0c 	bl	8000554 <__aeabi_i2d>
 800993c:	a36a      	add	r3, pc, #424	; (adr r3, 8009ae8 <_dtoa_r+0x2f0>)
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	f7f6 fe71 	bl	8000628 <__aeabi_dmul>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4630      	mov	r0, r6
 800994c:	4639      	mov	r1, r7
 800994e:	f7f6 fcb5 	bl	80002bc <__adddf3>
 8009952:	4606      	mov	r6, r0
 8009954:	460f      	mov	r7, r1
 8009956:	f7f7 f917 	bl	8000b88 <__aeabi_d2iz>
 800995a:	2200      	movs	r2, #0
 800995c:	4682      	mov	sl, r0
 800995e:	2300      	movs	r3, #0
 8009960:	4630      	mov	r0, r6
 8009962:	4639      	mov	r1, r7
 8009964:	f7f7 f8d2 	bl	8000b0c <__aeabi_dcmplt>
 8009968:	b148      	cbz	r0, 800997e <_dtoa_r+0x186>
 800996a:	4650      	mov	r0, sl
 800996c:	f7f6 fdf2 	bl	8000554 <__aeabi_i2d>
 8009970:	4632      	mov	r2, r6
 8009972:	463b      	mov	r3, r7
 8009974:	f7f7 f8c0 	bl	8000af8 <__aeabi_dcmpeq>
 8009978:	b908      	cbnz	r0, 800997e <_dtoa_r+0x186>
 800997a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800997e:	f1ba 0f16 	cmp.w	sl, #22
 8009982:	d854      	bhi.n	8009a2e <_dtoa_r+0x236>
 8009984:	4b61      	ldr	r3, [pc, #388]	; (8009b0c <_dtoa_r+0x314>)
 8009986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009992:	f7f7 f8bb 	bl	8000b0c <__aeabi_dcmplt>
 8009996:	2800      	cmp	r0, #0
 8009998:	d04b      	beq.n	8009a32 <_dtoa_r+0x23a>
 800999a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800999e:	2300      	movs	r3, #0
 80099a0:	930e      	str	r3, [sp, #56]	; 0x38
 80099a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099a4:	1b5d      	subs	r5, r3, r5
 80099a6:	1e6b      	subs	r3, r5, #1
 80099a8:	9304      	str	r3, [sp, #16]
 80099aa:	bf43      	ittte	mi
 80099ac:	2300      	movmi	r3, #0
 80099ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80099b2:	9304      	strmi	r3, [sp, #16]
 80099b4:	f04f 0800 	movpl.w	r8, #0
 80099b8:	f1ba 0f00 	cmp.w	sl, #0
 80099bc:	db3b      	blt.n	8009a36 <_dtoa_r+0x23e>
 80099be:	9b04      	ldr	r3, [sp, #16]
 80099c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80099c4:	4453      	add	r3, sl
 80099c6:	9304      	str	r3, [sp, #16]
 80099c8:	2300      	movs	r3, #0
 80099ca:	9306      	str	r3, [sp, #24]
 80099cc:	9b05      	ldr	r3, [sp, #20]
 80099ce:	2b09      	cmp	r3, #9
 80099d0:	d869      	bhi.n	8009aa6 <_dtoa_r+0x2ae>
 80099d2:	2b05      	cmp	r3, #5
 80099d4:	bfc4      	itt	gt
 80099d6:	3b04      	subgt	r3, #4
 80099d8:	9305      	strgt	r3, [sp, #20]
 80099da:	9b05      	ldr	r3, [sp, #20]
 80099dc:	f1a3 0302 	sub.w	r3, r3, #2
 80099e0:	bfcc      	ite	gt
 80099e2:	2500      	movgt	r5, #0
 80099e4:	2501      	movle	r5, #1
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d869      	bhi.n	8009abe <_dtoa_r+0x2c6>
 80099ea:	e8df f003 	tbb	[pc, r3]
 80099ee:	4e2c      	.short	0x4e2c
 80099f0:	5a4c      	.short	0x5a4c
 80099f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80099f6:	441d      	add	r5, r3
 80099f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099fc:	2b20      	cmp	r3, #32
 80099fe:	bfc1      	itttt	gt
 8009a00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a08:	fa09 f303 	lslgt.w	r3, r9, r3
 8009a0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a10:	bfda      	itte	le
 8009a12:	f1c3 0320 	rsble	r3, r3, #32
 8009a16:	fa06 f003 	lslle.w	r0, r6, r3
 8009a1a:	4318      	orrgt	r0, r3
 8009a1c:	f7f6 fd8a 	bl	8000534 <__aeabi_ui2d>
 8009a20:	2301      	movs	r3, #1
 8009a22:	4606      	mov	r6, r0
 8009a24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a28:	3d01      	subs	r5, #1
 8009a2a:	9310      	str	r3, [sp, #64]	; 0x40
 8009a2c:	e771      	b.n	8009912 <_dtoa_r+0x11a>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e7b6      	b.n	80099a0 <_dtoa_r+0x1a8>
 8009a32:	900e      	str	r0, [sp, #56]	; 0x38
 8009a34:	e7b5      	b.n	80099a2 <_dtoa_r+0x1aa>
 8009a36:	f1ca 0300 	rsb	r3, sl, #0
 8009a3a:	9306      	str	r3, [sp, #24]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	eba8 080a 	sub.w	r8, r8, sl
 8009a42:	930d      	str	r3, [sp, #52]	; 0x34
 8009a44:	e7c2      	b.n	80099cc <_dtoa_r+0x1d4>
 8009a46:	2300      	movs	r3, #0
 8009a48:	9308      	str	r3, [sp, #32]
 8009a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	dc39      	bgt.n	8009ac4 <_dtoa_r+0x2cc>
 8009a50:	f04f 0901 	mov.w	r9, #1
 8009a54:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a58:	464b      	mov	r3, r9
 8009a5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a60:	2200      	movs	r2, #0
 8009a62:	6042      	str	r2, [r0, #4]
 8009a64:	2204      	movs	r2, #4
 8009a66:	f102 0614 	add.w	r6, r2, #20
 8009a6a:	429e      	cmp	r6, r3
 8009a6c:	6841      	ldr	r1, [r0, #4]
 8009a6e:	d92f      	bls.n	8009ad0 <_dtoa_r+0x2d8>
 8009a70:	4620      	mov	r0, r4
 8009a72:	f000 fcbd 	bl	800a3f0 <_Balloc>
 8009a76:	9000      	str	r0, [sp, #0]
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d14b      	bne.n	8009b14 <_dtoa_r+0x31c>
 8009a7c:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <_dtoa_r+0x318>)
 8009a7e:	4602      	mov	r2, r0
 8009a80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a84:	e6d1      	b.n	800982a <_dtoa_r+0x32>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e7de      	b.n	8009a48 <_dtoa_r+0x250>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	9308      	str	r3, [sp, #32]
 8009a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a90:	eb0a 0903 	add.w	r9, sl, r3
 8009a94:	f109 0301 	add.w	r3, r9, #1
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	9301      	str	r3, [sp, #4]
 8009a9c:	bfb8      	it	lt
 8009a9e:	2301      	movlt	r3, #1
 8009aa0:	e7dd      	b.n	8009a5e <_dtoa_r+0x266>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e7f2      	b.n	8009a8c <_dtoa_r+0x294>
 8009aa6:	2501      	movs	r5, #1
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	9305      	str	r3, [sp, #20]
 8009aac:	9508      	str	r5, [sp, #32]
 8009aae:	f04f 39ff 	mov.w	r9, #4294967295
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ab8:	2312      	movs	r3, #18
 8009aba:	9209      	str	r2, [sp, #36]	; 0x24
 8009abc:	e7cf      	b.n	8009a5e <_dtoa_r+0x266>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	9308      	str	r3, [sp, #32]
 8009ac2:	e7f4      	b.n	8009aae <_dtoa_r+0x2b6>
 8009ac4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009ac8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009acc:	464b      	mov	r3, r9
 8009ace:	e7c6      	b.n	8009a5e <_dtoa_r+0x266>
 8009ad0:	3101      	adds	r1, #1
 8009ad2:	6041      	str	r1, [r0, #4]
 8009ad4:	0052      	lsls	r2, r2, #1
 8009ad6:	e7c6      	b.n	8009a66 <_dtoa_r+0x26e>
 8009ad8:	636f4361 	.word	0x636f4361
 8009adc:	3fd287a7 	.word	0x3fd287a7
 8009ae0:	8b60c8b3 	.word	0x8b60c8b3
 8009ae4:	3fc68a28 	.word	0x3fc68a28
 8009ae8:	509f79fb 	.word	0x509f79fb
 8009aec:	3fd34413 	.word	0x3fd34413
 8009af0:	0800d0a9 	.word	0x0800d0a9
 8009af4:	0800d0c0 	.word	0x0800d0c0
 8009af8:	7ff00000 	.word	0x7ff00000
 8009afc:	0800d0a5 	.word	0x0800d0a5
 8009b00:	0800d09c 	.word	0x0800d09c
 8009b04:	0800d079 	.word	0x0800d079
 8009b08:	3ff80000 	.word	0x3ff80000
 8009b0c:	0800d1b8 	.word	0x0800d1b8
 8009b10:	0800d11f 	.word	0x0800d11f
 8009b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b16:	9a00      	ldr	r2, [sp, #0]
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	9b01      	ldr	r3, [sp, #4]
 8009b1c:	2b0e      	cmp	r3, #14
 8009b1e:	f200 80ad 	bhi.w	8009c7c <_dtoa_r+0x484>
 8009b22:	2d00      	cmp	r5, #0
 8009b24:	f000 80aa 	beq.w	8009c7c <_dtoa_r+0x484>
 8009b28:	f1ba 0f00 	cmp.w	sl, #0
 8009b2c:	dd36      	ble.n	8009b9c <_dtoa_r+0x3a4>
 8009b2e:	4ac3      	ldr	r2, [pc, #780]	; (8009e3c <_dtoa_r+0x644>)
 8009b30:	f00a 030f 	and.w	r3, sl, #15
 8009b34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b38:	ed93 7b00 	vldr	d7, [r3]
 8009b3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009b40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009b44:	eeb0 8a47 	vmov.f32	s16, s14
 8009b48:	eef0 8a67 	vmov.f32	s17, s15
 8009b4c:	d016      	beq.n	8009b7c <_dtoa_r+0x384>
 8009b4e:	4bbc      	ldr	r3, [pc, #752]	; (8009e40 <_dtoa_r+0x648>)
 8009b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b58:	f7f6 fe90 	bl	800087c <__aeabi_ddiv>
 8009b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b60:	f007 070f 	and.w	r7, r7, #15
 8009b64:	2503      	movs	r5, #3
 8009b66:	4eb6      	ldr	r6, [pc, #728]	; (8009e40 <_dtoa_r+0x648>)
 8009b68:	b957      	cbnz	r7, 8009b80 <_dtoa_r+0x388>
 8009b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b6e:	ec53 2b18 	vmov	r2, r3, d8
 8009b72:	f7f6 fe83 	bl	800087c <__aeabi_ddiv>
 8009b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b7a:	e029      	b.n	8009bd0 <_dtoa_r+0x3d8>
 8009b7c:	2502      	movs	r5, #2
 8009b7e:	e7f2      	b.n	8009b66 <_dtoa_r+0x36e>
 8009b80:	07f9      	lsls	r1, r7, #31
 8009b82:	d508      	bpl.n	8009b96 <_dtoa_r+0x39e>
 8009b84:	ec51 0b18 	vmov	r0, r1, d8
 8009b88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b8c:	f7f6 fd4c 	bl	8000628 <__aeabi_dmul>
 8009b90:	ec41 0b18 	vmov	d8, r0, r1
 8009b94:	3501      	adds	r5, #1
 8009b96:	107f      	asrs	r7, r7, #1
 8009b98:	3608      	adds	r6, #8
 8009b9a:	e7e5      	b.n	8009b68 <_dtoa_r+0x370>
 8009b9c:	f000 80a6 	beq.w	8009cec <_dtoa_r+0x4f4>
 8009ba0:	f1ca 0600 	rsb	r6, sl, #0
 8009ba4:	4ba5      	ldr	r3, [pc, #660]	; (8009e3c <_dtoa_r+0x644>)
 8009ba6:	4fa6      	ldr	r7, [pc, #664]	; (8009e40 <_dtoa_r+0x648>)
 8009ba8:	f006 020f 	and.w	r2, r6, #15
 8009bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bb8:	f7f6 fd36 	bl	8000628 <__aeabi_dmul>
 8009bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bc0:	1136      	asrs	r6, r6, #4
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	2502      	movs	r5, #2
 8009bc6:	2e00      	cmp	r6, #0
 8009bc8:	f040 8085 	bne.w	8009cd6 <_dtoa_r+0x4de>
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1d2      	bne.n	8009b76 <_dtoa_r+0x37e>
 8009bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 808c 	beq.w	8009cf0 <_dtoa_r+0x4f8>
 8009bd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009bdc:	4b99      	ldr	r3, [pc, #612]	; (8009e44 <_dtoa_r+0x64c>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	4630      	mov	r0, r6
 8009be2:	4639      	mov	r1, r7
 8009be4:	f7f6 ff92 	bl	8000b0c <__aeabi_dcmplt>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	f000 8081 	beq.w	8009cf0 <_dtoa_r+0x4f8>
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d07d      	beq.n	8009cf0 <_dtoa_r+0x4f8>
 8009bf4:	f1b9 0f00 	cmp.w	r9, #0
 8009bf8:	dd3c      	ble.n	8009c74 <_dtoa_r+0x47c>
 8009bfa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009bfe:	9307      	str	r3, [sp, #28]
 8009c00:	2200      	movs	r2, #0
 8009c02:	4b91      	ldr	r3, [pc, #580]	; (8009e48 <_dtoa_r+0x650>)
 8009c04:	4630      	mov	r0, r6
 8009c06:	4639      	mov	r1, r7
 8009c08:	f7f6 fd0e 	bl	8000628 <__aeabi_dmul>
 8009c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c10:	3501      	adds	r5, #1
 8009c12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009c16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f7f6 fc9a 	bl	8000554 <__aeabi_i2d>
 8009c20:	4632      	mov	r2, r6
 8009c22:	463b      	mov	r3, r7
 8009c24:	f7f6 fd00 	bl	8000628 <__aeabi_dmul>
 8009c28:	4b88      	ldr	r3, [pc, #544]	; (8009e4c <_dtoa_r+0x654>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f7f6 fb46 	bl	80002bc <__adddf3>
 8009c30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c38:	9303      	str	r3, [sp, #12]
 8009c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d15c      	bne.n	8009cfa <_dtoa_r+0x502>
 8009c40:	4b83      	ldr	r3, [pc, #524]	; (8009e50 <_dtoa_r+0x658>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7f6 fb36 	bl	80002b8 <__aeabi_dsub>
 8009c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c50:	4606      	mov	r6, r0
 8009c52:	460f      	mov	r7, r1
 8009c54:	f7f6 ff78 	bl	8000b48 <__aeabi_dcmpgt>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	f040 8296 	bne.w	800a18a <_dtoa_r+0x992>
 8009c5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c62:	4630      	mov	r0, r6
 8009c64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c68:	4639      	mov	r1, r7
 8009c6a:	f7f6 ff4f 	bl	8000b0c <__aeabi_dcmplt>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	f040 8288 	bne.w	800a184 <_dtoa_r+0x98c>
 8009c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f2c0 8158 	blt.w	8009f34 <_dtoa_r+0x73c>
 8009c84:	f1ba 0f0e 	cmp.w	sl, #14
 8009c88:	f300 8154 	bgt.w	8009f34 <_dtoa_r+0x73c>
 8009c8c:	4b6b      	ldr	r3, [pc, #428]	; (8009e3c <_dtoa_r+0x644>)
 8009c8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f280 80e3 	bge.w	8009e64 <_dtoa_r+0x66c>
 8009c9e:	9b01      	ldr	r3, [sp, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f300 80df 	bgt.w	8009e64 <_dtoa_r+0x66c>
 8009ca6:	f040 826d 	bne.w	800a184 <_dtoa_r+0x98c>
 8009caa:	4b69      	ldr	r3, [pc, #420]	; (8009e50 <_dtoa_r+0x658>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	4640      	mov	r0, r8
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	f7f6 fcb9 	bl	8000628 <__aeabi_dmul>
 8009cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cba:	f7f6 ff3b 	bl	8000b34 <__aeabi_dcmpge>
 8009cbe:	9e01      	ldr	r6, [sp, #4]
 8009cc0:	4637      	mov	r7, r6
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	f040 8243 	bne.w	800a14e <_dtoa_r+0x956>
 8009cc8:	9d00      	ldr	r5, [sp, #0]
 8009cca:	2331      	movs	r3, #49	; 0x31
 8009ccc:	f805 3b01 	strb.w	r3, [r5], #1
 8009cd0:	f10a 0a01 	add.w	sl, sl, #1
 8009cd4:	e23f      	b.n	800a156 <_dtoa_r+0x95e>
 8009cd6:	07f2      	lsls	r2, r6, #31
 8009cd8:	d505      	bpl.n	8009ce6 <_dtoa_r+0x4ee>
 8009cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cde:	f7f6 fca3 	bl	8000628 <__aeabi_dmul>
 8009ce2:	3501      	adds	r5, #1
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	1076      	asrs	r6, r6, #1
 8009ce8:	3708      	adds	r7, #8
 8009cea:	e76c      	b.n	8009bc6 <_dtoa_r+0x3ce>
 8009cec:	2502      	movs	r5, #2
 8009cee:	e76f      	b.n	8009bd0 <_dtoa_r+0x3d8>
 8009cf0:	9b01      	ldr	r3, [sp, #4]
 8009cf2:	f8cd a01c 	str.w	sl, [sp, #28]
 8009cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8009cf8:	e78d      	b.n	8009c16 <_dtoa_r+0x41e>
 8009cfa:	9900      	ldr	r1, [sp, #0]
 8009cfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d00:	4b4e      	ldr	r3, [pc, #312]	; (8009e3c <_dtoa_r+0x644>)
 8009d02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d06:	4401      	add	r1, r0
 8009d08:	9102      	str	r1, [sp, #8]
 8009d0a:	9908      	ldr	r1, [sp, #32]
 8009d0c:	eeb0 8a47 	vmov.f32	s16, s14
 8009d10:	eef0 8a67 	vmov.f32	s17, s15
 8009d14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d1c:	2900      	cmp	r1, #0
 8009d1e:	d045      	beq.n	8009dac <_dtoa_r+0x5b4>
 8009d20:	494c      	ldr	r1, [pc, #304]	; (8009e54 <_dtoa_r+0x65c>)
 8009d22:	2000      	movs	r0, #0
 8009d24:	f7f6 fdaa 	bl	800087c <__aeabi_ddiv>
 8009d28:	ec53 2b18 	vmov	r2, r3, d8
 8009d2c:	f7f6 fac4 	bl	80002b8 <__aeabi_dsub>
 8009d30:	9d00      	ldr	r5, [sp, #0]
 8009d32:	ec41 0b18 	vmov	d8, r0, r1
 8009d36:	4639      	mov	r1, r7
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7f6 ff25 	bl	8000b88 <__aeabi_d2iz>
 8009d3e:	900c      	str	r0, [sp, #48]	; 0x30
 8009d40:	f7f6 fc08 	bl	8000554 <__aeabi_i2d>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	4630      	mov	r0, r6
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	f7f6 fab4 	bl	80002b8 <__aeabi_dsub>
 8009d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d52:	3330      	adds	r3, #48	; 0x30
 8009d54:	f805 3b01 	strb.w	r3, [r5], #1
 8009d58:	ec53 2b18 	vmov	r2, r3, d8
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	460f      	mov	r7, r1
 8009d60:	f7f6 fed4 	bl	8000b0c <__aeabi_dcmplt>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d165      	bne.n	8009e34 <_dtoa_r+0x63c>
 8009d68:	4632      	mov	r2, r6
 8009d6a:	463b      	mov	r3, r7
 8009d6c:	4935      	ldr	r1, [pc, #212]	; (8009e44 <_dtoa_r+0x64c>)
 8009d6e:	2000      	movs	r0, #0
 8009d70:	f7f6 faa2 	bl	80002b8 <__aeabi_dsub>
 8009d74:	ec53 2b18 	vmov	r2, r3, d8
 8009d78:	f7f6 fec8 	bl	8000b0c <__aeabi_dcmplt>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f040 80b9 	bne.w	8009ef4 <_dtoa_r+0x6fc>
 8009d82:	9b02      	ldr	r3, [sp, #8]
 8009d84:	429d      	cmp	r5, r3
 8009d86:	f43f af75 	beq.w	8009c74 <_dtoa_r+0x47c>
 8009d8a:	4b2f      	ldr	r3, [pc, #188]	; (8009e48 <_dtoa_r+0x650>)
 8009d8c:	ec51 0b18 	vmov	r0, r1, d8
 8009d90:	2200      	movs	r2, #0
 8009d92:	f7f6 fc49 	bl	8000628 <__aeabi_dmul>
 8009d96:	4b2c      	ldr	r3, [pc, #176]	; (8009e48 <_dtoa_r+0x650>)
 8009d98:	ec41 0b18 	vmov	d8, r0, r1
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	4630      	mov	r0, r6
 8009da0:	4639      	mov	r1, r7
 8009da2:	f7f6 fc41 	bl	8000628 <__aeabi_dmul>
 8009da6:	4606      	mov	r6, r0
 8009da8:	460f      	mov	r7, r1
 8009daa:	e7c4      	b.n	8009d36 <_dtoa_r+0x53e>
 8009dac:	ec51 0b17 	vmov	r0, r1, d7
 8009db0:	f7f6 fc3a 	bl	8000628 <__aeabi_dmul>
 8009db4:	9b02      	ldr	r3, [sp, #8]
 8009db6:	9d00      	ldr	r5, [sp, #0]
 8009db8:	930c      	str	r3, [sp, #48]	; 0x30
 8009dba:	ec41 0b18 	vmov	d8, r0, r1
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f7f6 fee1 	bl	8000b88 <__aeabi_d2iz>
 8009dc6:	9011      	str	r0, [sp, #68]	; 0x44
 8009dc8:	f7f6 fbc4 	bl	8000554 <__aeabi_i2d>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 fa70 	bl	80002b8 <__aeabi_dsub>
 8009dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dda:	3330      	adds	r3, #48	; 0x30
 8009ddc:	f805 3b01 	strb.w	r3, [r5], #1
 8009de0:	9b02      	ldr	r3, [sp, #8]
 8009de2:	429d      	cmp	r5, r3
 8009de4:	4606      	mov	r6, r0
 8009de6:	460f      	mov	r7, r1
 8009de8:	f04f 0200 	mov.w	r2, #0
 8009dec:	d134      	bne.n	8009e58 <_dtoa_r+0x660>
 8009dee:	4b19      	ldr	r3, [pc, #100]	; (8009e54 <_dtoa_r+0x65c>)
 8009df0:	ec51 0b18 	vmov	r0, r1, d8
 8009df4:	f7f6 fa62 	bl	80002bc <__adddf3>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f7f6 fea2 	bl	8000b48 <__aeabi_dcmpgt>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d175      	bne.n	8009ef4 <_dtoa_r+0x6fc>
 8009e08:	ec53 2b18 	vmov	r2, r3, d8
 8009e0c:	4911      	ldr	r1, [pc, #68]	; (8009e54 <_dtoa_r+0x65c>)
 8009e0e:	2000      	movs	r0, #0
 8009e10:	f7f6 fa52 	bl	80002b8 <__aeabi_dsub>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	4630      	mov	r0, r6
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	f7f6 fe76 	bl	8000b0c <__aeabi_dcmplt>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	f43f af27 	beq.w	8009c74 <_dtoa_r+0x47c>
 8009e26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e28:	1e6b      	subs	r3, r5, #1
 8009e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e30:	2b30      	cmp	r3, #48	; 0x30
 8009e32:	d0f8      	beq.n	8009e26 <_dtoa_r+0x62e>
 8009e34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009e38:	e04a      	b.n	8009ed0 <_dtoa_r+0x6d8>
 8009e3a:	bf00      	nop
 8009e3c:	0800d1b8 	.word	0x0800d1b8
 8009e40:	0800d190 	.word	0x0800d190
 8009e44:	3ff00000 	.word	0x3ff00000
 8009e48:	40240000 	.word	0x40240000
 8009e4c:	401c0000 	.word	0x401c0000
 8009e50:	40140000 	.word	0x40140000
 8009e54:	3fe00000 	.word	0x3fe00000
 8009e58:	4baf      	ldr	r3, [pc, #700]	; (800a118 <_dtoa_r+0x920>)
 8009e5a:	f7f6 fbe5 	bl	8000628 <__aeabi_dmul>
 8009e5e:	4606      	mov	r6, r0
 8009e60:	460f      	mov	r7, r1
 8009e62:	e7ac      	b.n	8009dbe <_dtoa_r+0x5c6>
 8009e64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e68:	9d00      	ldr	r5, [sp, #0]
 8009e6a:	4642      	mov	r2, r8
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	4630      	mov	r0, r6
 8009e70:	4639      	mov	r1, r7
 8009e72:	f7f6 fd03 	bl	800087c <__aeabi_ddiv>
 8009e76:	f7f6 fe87 	bl	8000b88 <__aeabi_d2iz>
 8009e7a:	9002      	str	r0, [sp, #8]
 8009e7c:	f7f6 fb6a 	bl	8000554 <__aeabi_i2d>
 8009e80:	4642      	mov	r2, r8
 8009e82:	464b      	mov	r3, r9
 8009e84:	f7f6 fbd0 	bl	8000628 <__aeabi_dmul>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	4639      	mov	r1, r7
 8009e90:	f7f6 fa12 	bl	80002b8 <__aeabi_dsub>
 8009e94:	9e02      	ldr	r6, [sp, #8]
 8009e96:	9f01      	ldr	r7, [sp, #4]
 8009e98:	3630      	adds	r6, #48	; 0x30
 8009e9a:	f805 6b01 	strb.w	r6, [r5], #1
 8009e9e:	9e00      	ldr	r6, [sp, #0]
 8009ea0:	1bae      	subs	r6, r5, r6
 8009ea2:	42b7      	cmp	r7, r6
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	d137      	bne.n	8009f1a <_dtoa_r+0x722>
 8009eaa:	f7f6 fa07 	bl	80002bc <__adddf3>
 8009eae:	4642      	mov	r2, r8
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	460f      	mov	r7, r1
 8009eb6:	f7f6 fe47 	bl	8000b48 <__aeabi_dcmpgt>
 8009eba:	b9c8      	cbnz	r0, 8009ef0 <_dtoa_r+0x6f8>
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	464b      	mov	r3, r9
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 fe18 	bl	8000af8 <__aeabi_dcmpeq>
 8009ec8:	b110      	cbz	r0, 8009ed0 <_dtoa_r+0x6d8>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	07d9      	lsls	r1, r3, #31
 8009ece:	d40f      	bmi.n	8009ef0 <_dtoa_r+0x6f8>
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	4659      	mov	r1, fp
 8009ed4:	f000 facc 	bl	800a470 <_Bfree>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	702b      	strb	r3, [r5, #0]
 8009edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ede:	f10a 0001 	add.w	r0, sl, #1
 8009ee2:	6018      	str	r0, [r3, #0]
 8009ee4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f43f acd8 	beq.w	800989c <_dtoa_r+0xa4>
 8009eec:	601d      	str	r5, [r3, #0]
 8009eee:	e4d5      	b.n	800989c <_dtoa_r+0xa4>
 8009ef0:	f8cd a01c 	str.w	sl, [sp, #28]
 8009ef4:	462b      	mov	r3, r5
 8009ef6:	461d      	mov	r5, r3
 8009ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009efc:	2a39      	cmp	r2, #57	; 0x39
 8009efe:	d108      	bne.n	8009f12 <_dtoa_r+0x71a>
 8009f00:	9a00      	ldr	r2, [sp, #0]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d1f7      	bne.n	8009ef6 <_dtoa_r+0x6fe>
 8009f06:	9a07      	ldr	r2, [sp, #28]
 8009f08:	9900      	ldr	r1, [sp, #0]
 8009f0a:	3201      	adds	r2, #1
 8009f0c:	9207      	str	r2, [sp, #28]
 8009f0e:	2230      	movs	r2, #48	; 0x30
 8009f10:	700a      	strb	r2, [r1, #0]
 8009f12:	781a      	ldrb	r2, [r3, #0]
 8009f14:	3201      	adds	r2, #1
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	e78c      	b.n	8009e34 <_dtoa_r+0x63c>
 8009f1a:	4b7f      	ldr	r3, [pc, #508]	; (800a118 <_dtoa_r+0x920>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f7f6 fb83 	bl	8000628 <__aeabi_dmul>
 8009f22:	2200      	movs	r2, #0
 8009f24:	2300      	movs	r3, #0
 8009f26:	4606      	mov	r6, r0
 8009f28:	460f      	mov	r7, r1
 8009f2a:	f7f6 fde5 	bl	8000af8 <__aeabi_dcmpeq>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d09b      	beq.n	8009e6a <_dtoa_r+0x672>
 8009f32:	e7cd      	b.n	8009ed0 <_dtoa_r+0x6d8>
 8009f34:	9a08      	ldr	r2, [sp, #32]
 8009f36:	2a00      	cmp	r2, #0
 8009f38:	f000 80c4 	beq.w	800a0c4 <_dtoa_r+0x8cc>
 8009f3c:	9a05      	ldr	r2, [sp, #20]
 8009f3e:	2a01      	cmp	r2, #1
 8009f40:	f300 80a8 	bgt.w	800a094 <_dtoa_r+0x89c>
 8009f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f46:	2a00      	cmp	r2, #0
 8009f48:	f000 80a0 	beq.w	800a08c <_dtoa_r+0x894>
 8009f4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f50:	9e06      	ldr	r6, [sp, #24]
 8009f52:	4645      	mov	r5, r8
 8009f54:	9a04      	ldr	r2, [sp, #16]
 8009f56:	2101      	movs	r1, #1
 8009f58:	441a      	add	r2, r3
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	4498      	add	r8, r3
 8009f5e:	9204      	str	r2, [sp, #16]
 8009f60:	f000 fb42 	bl	800a5e8 <__i2b>
 8009f64:	4607      	mov	r7, r0
 8009f66:	2d00      	cmp	r5, #0
 8009f68:	dd0b      	ble.n	8009f82 <_dtoa_r+0x78a>
 8009f6a:	9b04      	ldr	r3, [sp, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dd08      	ble.n	8009f82 <_dtoa_r+0x78a>
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	9a04      	ldr	r2, [sp, #16]
 8009f74:	bfa8      	it	ge
 8009f76:	462b      	movge	r3, r5
 8009f78:	eba8 0803 	sub.w	r8, r8, r3
 8009f7c:	1aed      	subs	r5, r5, r3
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	9304      	str	r3, [sp, #16]
 8009f82:	9b06      	ldr	r3, [sp, #24]
 8009f84:	b1fb      	cbz	r3, 8009fc6 <_dtoa_r+0x7ce>
 8009f86:	9b08      	ldr	r3, [sp, #32]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 809f 	beq.w	800a0cc <_dtoa_r+0x8d4>
 8009f8e:	2e00      	cmp	r6, #0
 8009f90:	dd11      	ble.n	8009fb6 <_dtoa_r+0x7be>
 8009f92:	4639      	mov	r1, r7
 8009f94:	4632      	mov	r2, r6
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 fbe2 	bl	800a760 <__pow5mult>
 8009f9c:	465a      	mov	r2, fp
 8009f9e:	4601      	mov	r1, r0
 8009fa0:	4607      	mov	r7, r0
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 fb36 	bl	800a614 <__multiply>
 8009fa8:	4659      	mov	r1, fp
 8009faa:	9007      	str	r0, [sp, #28]
 8009fac:	4620      	mov	r0, r4
 8009fae:	f000 fa5f 	bl	800a470 <_Bfree>
 8009fb2:	9b07      	ldr	r3, [sp, #28]
 8009fb4:	469b      	mov	fp, r3
 8009fb6:	9b06      	ldr	r3, [sp, #24]
 8009fb8:	1b9a      	subs	r2, r3, r6
 8009fba:	d004      	beq.n	8009fc6 <_dtoa_r+0x7ce>
 8009fbc:	4659      	mov	r1, fp
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 fbce 	bl	800a760 <__pow5mult>
 8009fc4:	4683      	mov	fp, r0
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fb0d 	bl	800a5e8 <__i2b>
 8009fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	dd7c      	ble.n	800a0d0 <_dtoa_r+0x8d8>
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	4601      	mov	r1, r0
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f000 fbc0 	bl	800a760 <__pow5mult>
 8009fe0:	9b05      	ldr	r3, [sp, #20]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	dd76      	ble.n	800a0d6 <_dtoa_r+0x8de>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	9306      	str	r3, [sp, #24]
 8009fec:	6933      	ldr	r3, [r6, #16]
 8009fee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ff2:	6918      	ldr	r0, [r3, #16]
 8009ff4:	f000 faa8 	bl	800a548 <__hi0bits>
 8009ff8:	f1c0 0020 	rsb	r0, r0, #32
 8009ffc:	9b04      	ldr	r3, [sp, #16]
 8009ffe:	4418      	add	r0, r3
 800a000:	f010 001f 	ands.w	r0, r0, #31
 800a004:	f000 8086 	beq.w	800a114 <_dtoa_r+0x91c>
 800a008:	f1c0 0320 	rsb	r3, r0, #32
 800a00c:	2b04      	cmp	r3, #4
 800a00e:	dd7f      	ble.n	800a110 <_dtoa_r+0x918>
 800a010:	f1c0 001c 	rsb	r0, r0, #28
 800a014:	9b04      	ldr	r3, [sp, #16]
 800a016:	4403      	add	r3, r0
 800a018:	4480      	add	r8, r0
 800a01a:	4405      	add	r5, r0
 800a01c:	9304      	str	r3, [sp, #16]
 800a01e:	f1b8 0f00 	cmp.w	r8, #0
 800a022:	dd05      	ble.n	800a030 <_dtoa_r+0x838>
 800a024:	4659      	mov	r1, fp
 800a026:	4642      	mov	r2, r8
 800a028:	4620      	mov	r0, r4
 800a02a:	f000 fbf3 	bl	800a814 <__lshift>
 800a02e:	4683      	mov	fp, r0
 800a030:	9b04      	ldr	r3, [sp, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	dd05      	ble.n	800a042 <_dtoa_r+0x84a>
 800a036:	4631      	mov	r1, r6
 800a038:	461a      	mov	r2, r3
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 fbea 	bl	800a814 <__lshift>
 800a040:	4606      	mov	r6, r0
 800a042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a044:	2b00      	cmp	r3, #0
 800a046:	d069      	beq.n	800a11c <_dtoa_r+0x924>
 800a048:	4631      	mov	r1, r6
 800a04a:	4658      	mov	r0, fp
 800a04c:	f000 fc4e 	bl	800a8ec <__mcmp>
 800a050:	2800      	cmp	r0, #0
 800a052:	da63      	bge.n	800a11c <_dtoa_r+0x924>
 800a054:	2300      	movs	r3, #0
 800a056:	4659      	mov	r1, fp
 800a058:	220a      	movs	r2, #10
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 fa2a 	bl	800a4b4 <__multadd>
 800a060:	9b08      	ldr	r3, [sp, #32]
 800a062:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a066:	4683      	mov	fp, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 818f 	beq.w	800a38c <_dtoa_r+0xb94>
 800a06e:	4639      	mov	r1, r7
 800a070:	2300      	movs	r3, #0
 800a072:	220a      	movs	r2, #10
 800a074:	4620      	mov	r0, r4
 800a076:	f000 fa1d 	bl	800a4b4 <__multadd>
 800a07a:	f1b9 0f00 	cmp.w	r9, #0
 800a07e:	4607      	mov	r7, r0
 800a080:	f300 808e 	bgt.w	800a1a0 <_dtoa_r+0x9a8>
 800a084:	9b05      	ldr	r3, [sp, #20]
 800a086:	2b02      	cmp	r3, #2
 800a088:	dc50      	bgt.n	800a12c <_dtoa_r+0x934>
 800a08a:	e089      	b.n	800a1a0 <_dtoa_r+0x9a8>
 800a08c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a08e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a092:	e75d      	b.n	8009f50 <_dtoa_r+0x758>
 800a094:	9b01      	ldr	r3, [sp, #4]
 800a096:	1e5e      	subs	r6, r3, #1
 800a098:	9b06      	ldr	r3, [sp, #24]
 800a09a:	42b3      	cmp	r3, r6
 800a09c:	bfbf      	itttt	lt
 800a09e:	9b06      	ldrlt	r3, [sp, #24]
 800a0a0:	9606      	strlt	r6, [sp, #24]
 800a0a2:	1af2      	sublt	r2, r6, r3
 800a0a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a0a6:	bfb6      	itet	lt
 800a0a8:	189b      	addlt	r3, r3, r2
 800a0aa:	1b9e      	subge	r6, r3, r6
 800a0ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	bfb8      	it	lt
 800a0b2:	2600      	movlt	r6, #0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bfb5      	itete	lt
 800a0b8:	eba8 0503 	sublt.w	r5, r8, r3
 800a0bc:	9b01      	ldrge	r3, [sp, #4]
 800a0be:	2300      	movlt	r3, #0
 800a0c0:	4645      	movge	r5, r8
 800a0c2:	e747      	b.n	8009f54 <_dtoa_r+0x75c>
 800a0c4:	9e06      	ldr	r6, [sp, #24]
 800a0c6:	9f08      	ldr	r7, [sp, #32]
 800a0c8:	4645      	mov	r5, r8
 800a0ca:	e74c      	b.n	8009f66 <_dtoa_r+0x76e>
 800a0cc:	9a06      	ldr	r2, [sp, #24]
 800a0ce:	e775      	b.n	8009fbc <_dtoa_r+0x7c4>
 800a0d0:	9b05      	ldr	r3, [sp, #20]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	dc18      	bgt.n	800a108 <_dtoa_r+0x910>
 800a0d6:	9b02      	ldr	r3, [sp, #8]
 800a0d8:	b9b3      	cbnz	r3, 800a108 <_dtoa_r+0x910>
 800a0da:	9b03      	ldr	r3, [sp, #12]
 800a0dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0e0:	b9a3      	cbnz	r3, 800a10c <_dtoa_r+0x914>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0e8:	0d1b      	lsrs	r3, r3, #20
 800a0ea:	051b      	lsls	r3, r3, #20
 800a0ec:	b12b      	cbz	r3, 800a0fa <_dtoa_r+0x902>
 800a0ee:	9b04      	ldr	r3, [sp, #16]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	f108 0801 	add.w	r8, r8, #1
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	9306      	str	r3, [sp, #24]
 800a0fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f47f af74 	bne.w	8009fec <_dtoa_r+0x7f4>
 800a104:	2001      	movs	r0, #1
 800a106:	e779      	b.n	8009ffc <_dtoa_r+0x804>
 800a108:	2300      	movs	r3, #0
 800a10a:	e7f6      	b.n	800a0fa <_dtoa_r+0x902>
 800a10c:	9b02      	ldr	r3, [sp, #8]
 800a10e:	e7f4      	b.n	800a0fa <_dtoa_r+0x902>
 800a110:	d085      	beq.n	800a01e <_dtoa_r+0x826>
 800a112:	4618      	mov	r0, r3
 800a114:	301c      	adds	r0, #28
 800a116:	e77d      	b.n	800a014 <_dtoa_r+0x81c>
 800a118:	40240000 	.word	0x40240000
 800a11c:	9b01      	ldr	r3, [sp, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	dc38      	bgt.n	800a194 <_dtoa_r+0x99c>
 800a122:	9b05      	ldr	r3, [sp, #20]
 800a124:	2b02      	cmp	r3, #2
 800a126:	dd35      	ble.n	800a194 <_dtoa_r+0x99c>
 800a128:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a12c:	f1b9 0f00 	cmp.w	r9, #0
 800a130:	d10d      	bne.n	800a14e <_dtoa_r+0x956>
 800a132:	4631      	mov	r1, r6
 800a134:	464b      	mov	r3, r9
 800a136:	2205      	movs	r2, #5
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 f9bb 	bl	800a4b4 <__multadd>
 800a13e:	4601      	mov	r1, r0
 800a140:	4606      	mov	r6, r0
 800a142:	4658      	mov	r0, fp
 800a144:	f000 fbd2 	bl	800a8ec <__mcmp>
 800a148:	2800      	cmp	r0, #0
 800a14a:	f73f adbd 	bgt.w	8009cc8 <_dtoa_r+0x4d0>
 800a14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a150:	9d00      	ldr	r5, [sp, #0]
 800a152:	ea6f 0a03 	mvn.w	sl, r3
 800a156:	f04f 0800 	mov.w	r8, #0
 800a15a:	4631      	mov	r1, r6
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 f987 	bl	800a470 <_Bfree>
 800a162:	2f00      	cmp	r7, #0
 800a164:	f43f aeb4 	beq.w	8009ed0 <_dtoa_r+0x6d8>
 800a168:	f1b8 0f00 	cmp.w	r8, #0
 800a16c:	d005      	beq.n	800a17a <_dtoa_r+0x982>
 800a16e:	45b8      	cmp	r8, r7
 800a170:	d003      	beq.n	800a17a <_dtoa_r+0x982>
 800a172:	4641      	mov	r1, r8
 800a174:	4620      	mov	r0, r4
 800a176:	f000 f97b 	bl	800a470 <_Bfree>
 800a17a:	4639      	mov	r1, r7
 800a17c:	4620      	mov	r0, r4
 800a17e:	f000 f977 	bl	800a470 <_Bfree>
 800a182:	e6a5      	b.n	8009ed0 <_dtoa_r+0x6d8>
 800a184:	2600      	movs	r6, #0
 800a186:	4637      	mov	r7, r6
 800a188:	e7e1      	b.n	800a14e <_dtoa_r+0x956>
 800a18a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a18c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a190:	4637      	mov	r7, r6
 800a192:	e599      	b.n	8009cc8 <_dtoa_r+0x4d0>
 800a194:	9b08      	ldr	r3, [sp, #32]
 800a196:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80fd 	beq.w	800a39a <_dtoa_r+0xba2>
 800a1a0:	2d00      	cmp	r5, #0
 800a1a2:	dd05      	ble.n	800a1b0 <_dtoa_r+0x9b8>
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f000 fb33 	bl	800a814 <__lshift>
 800a1ae:	4607      	mov	r7, r0
 800a1b0:	9b06      	ldr	r3, [sp, #24]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d05c      	beq.n	800a270 <_dtoa_r+0xa78>
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 f919 	bl	800a3f0 <_Balloc>
 800a1be:	4605      	mov	r5, r0
 800a1c0:	b928      	cbnz	r0, 800a1ce <_dtoa_r+0x9d6>
 800a1c2:	4b80      	ldr	r3, [pc, #512]	; (800a3c4 <_dtoa_r+0xbcc>)
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1ca:	f7ff bb2e 	b.w	800982a <_dtoa_r+0x32>
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	3202      	adds	r2, #2
 800a1d2:	0092      	lsls	r2, r2, #2
 800a1d4:	f107 010c 	add.w	r1, r7, #12
 800a1d8:	300c      	adds	r0, #12
 800a1da:	f7fe fcf1 	bl	8008bc0 <memcpy>
 800a1de:	2201      	movs	r2, #1
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f000 fb16 	bl	800a814 <__lshift>
 800a1e8:	9b00      	ldr	r3, [sp, #0]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	9b00      	ldr	r3, [sp, #0]
 800a1f0:	444b      	add	r3, r9
 800a1f2:	9307      	str	r3, [sp, #28]
 800a1f4:	9b02      	ldr	r3, [sp, #8]
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	46b8      	mov	r8, r7
 800a1fc:	9306      	str	r3, [sp, #24]
 800a1fe:	4607      	mov	r7, r0
 800a200:	9b01      	ldr	r3, [sp, #4]
 800a202:	4631      	mov	r1, r6
 800a204:	3b01      	subs	r3, #1
 800a206:	4658      	mov	r0, fp
 800a208:	9302      	str	r3, [sp, #8]
 800a20a:	f7ff fa67 	bl	80096dc <quorem>
 800a20e:	4603      	mov	r3, r0
 800a210:	3330      	adds	r3, #48	; 0x30
 800a212:	9004      	str	r0, [sp, #16]
 800a214:	4641      	mov	r1, r8
 800a216:	4658      	mov	r0, fp
 800a218:	9308      	str	r3, [sp, #32]
 800a21a:	f000 fb67 	bl	800a8ec <__mcmp>
 800a21e:	463a      	mov	r2, r7
 800a220:	4681      	mov	r9, r0
 800a222:	4631      	mov	r1, r6
 800a224:	4620      	mov	r0, r4
 800a226:	f000 fb7d 	bl	800a924 <__mdiff>
 800a22a:	68c2      	ldr	r2, [r0, #12]
 800a22c:	9b08      	ldr	r3, [sp, #32]
 800a22e:	4605      	mov	r5, r0
 800a230:	bb02      	cbnz	r2, 800a274 <_dtoa_r+0xa7c>
 800a232:	4601      	mov	r1, r0
 800a234:	4658      	mov	r0, fp
 800a236:	f000 fb59 	bl	800a8ec <__mcmp>
 800a23a:	9b08      	ldr	r3, [sp, #32]
 800a23c:	4602      	mov	r2, r0
 800a23e:	4629      	mov	r1, r5
 800a240:	4620      	mov	r0, r4
 800a242:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a246:	f000 f913 	bl	800a470 <_Bfree>
 800a24a:	9b05      	ldr	r3, [sp, #20]
 800a24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a24e:	9d01      	ldr	r5, [sp, #4]
 800a250:	ea43 0102 	orr.w	r1, r3, r2
 800a254:	9b06      	ldr	r3, [sp, #24]
 800a256:	430b      	orrs	r3, r1
 800a258:	9b08      	ldr	r3, [sp, #32]
 800a25a:	d10d      	bne.n	800a278 <_dtoa_r+0xa80>
 800a25c:	2b39      	cmp	r3, #57	; 0x39
 800a25e:	d029      	beq.n	800a2b4 <_dtoa_r+0xabc>
 800a260:	f1b9 0f00 	cmp.w	r9, #0
 800a264:	dd01      	ble.n	800a26a <_dtoa_r+0xa72>
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	3331      	adds	r3, #49	; 0x31
 800a26a:	9a02      	ldr	r2, [sp, #8]
 800a26c:	7013      	strb	r3, [r2, #0]
 800a26e:	e774      	b.n	800a15a <_dtoa_r+0x962>
 800a270:	4638      	mov	r0, r7
 800a272:	e7b9      	b.n	800a1e8 <_dtoa_r+0x9f0>
 800a274:	2201      	movs	r2, #1
 800a276:	e7e2      	b.n	800a23e <_dtoa_r+0xa46>
 800a278:	f1b9 0f00 	cmp.w	r9, #0
 800a27c:	db06      	blt.n	800a28c <_dtoa_r+0xa94>
 800a27e:	9905      	ldr	r1, [sp, #20]
 800a280:	ea41 0909 	orr.w	r9, r1, r9
 800a284:	9906      	ldr	r1, [sp, #24]
 800a286:	ea59 0101 	orrs.w	r1, r9, r1
 800a28a:	d120      	bne.n	800a2ce <_dtoa_r+0xad6>
 800a28c:	2a00      	cmp	r2, #0
 800a28e:	ddec      	ble.n	800a26a <_dtoa_r+0xa72>
 800a290:	4659      	mov	r1, fp
 800a292:	2201      	movs	r2, #1
 800a294:	4620      	mov	r0, r4
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	f000 fabc 	bl	800a814 <__lshift>
 800a29c:	4631      	mov	r1, r6
 800a29e:	4683      	mov	fp, r0
 800a2a0:	f000 fb24 	bl	800a8ec <__mcmp>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	9b01      	ldr	r3, [sp, #4]
 800a2a8:	dc02      	bgt.n	800a2b0 <_dtoa_r+0xab8>
 800a2aa:	d1de      	bne.n	800a26a <_dtoa_r+0xa72>
 800a2ac:	07da      	lsls	r2, r3, #31
 800a2ae:	d5dc      	bpl.n	800a26a <_dtoa_r+0xa72>
 800a2b0:	2b39      	cmp	r3, #57	; 0x39
 800a2b2:	d1d8      	bne.n	800a266 <_dtoa_r+0xa6e>
 800a2b4:	9a02      	ldr	r2, [sp, #8]
 800a2b6:	2339      	movs	r3, #57	; 0x39
 800a2b8:	7013      	strb	r3, [r2, #0]
 800a2ba:	462b      	mov	r3, r5
 800a2bc:	461d      	mov	r5, r3
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2c4:	2a39      	cmp	r2, #57	; 0x39
 800a2c6:	d050      	beq.n	800a36a <_dtoa_r+0xb72>
 800a2c8:	3201      	adds	r2, #1
 800a2ca:	701a      	strb	r2, [r3, #0]
 800a2cc:	e745      	b.n	800a15a <_dtoa_r+0x962>
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	dd03      	ble.n	800a2da <_dtoa_r+0xae2>
 800a2d2:	2b39      	cmp	r3, #57	; 0x39
 800a2d4:	d0ee      	beq.n	800a2b4 <_dtoa_r+0xabc>
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	e7c7      	b.n	800a26a <_dtoa_r+0xa72>
 800a2da:	9a01      	ldr	r2, [sp, #4]
 800a2dc:	9907      	ldr	r1, [sp, #28]
 800a2de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2e2:	428a      	cmp	r2, r1
 800a2e4:	d02a      	beq.n	800a33c <_dtoa_r+0xb44>
 800a2e6:	4659      	mov	r1, fp
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	220a      	movs	r2, #10
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f000 f8e1 	bl	800a4b4 <__multadd>
 800a2f2:	45b8      	cmp	r8, r7
 800a2f4:	4683      	mov	fp, r0
 800a2f6:	f04f 0300 	mov.w	r3, #0
 800a2fa:	f04f 020a 	mov.w	r2, #10
 800a2fe:	4641      	mov	r1, r8
 800a300:	4620      	mov	r0, r4
 800a302:	d107      	bne.n	800a314 <_dtoa_r+0xb1c>
 800a304:	f000 f8d6 	bl	800a4b4 <__multadd>
 800a308:	4680      	mov	r8, r0
 800a30a:	4607      	mov	r7, r0
 800a30c:	9b01      	ldr	r3, [sp, #4]
 800a30e:	3301      	adds	r3, #1
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	e775      	b.n	800a200 <_dtoa_r+0xa08>
 800a314:	f000 f8ce 	bl	800a4b4 <__multadd>
 800a318:	4639      	mov	r1, r7
 800a31a:	4680      	mov	r8, r0
 800a31c:	2300      	movs	r3, #0
 800a31e:	220a      	movs	r2, #10
 800a320:	4620      	mov	r0, r4
 800a322:	f000 f8c7 	bl	800a4b4 <__multadd>
 800a326:	4607      	mov	r7, r0
 800a328:	e7f0      	b.n	800a30c <_dtoa_r+0xb14>
 800a32a:	f1b9 0f00 	cmp.w	r9, #0
 800a32e:	9a00      	ldr	r2, [sp, #0]
 800a330:	bfcc      	ite	gt
 800a332:	464d      	movgt	r5, r9
 800a334:	2501      	movle	r5, #1
 800a336:	4415      	add	r5, r2
 800a338:	f04f 0800 	mov.w	r8, #0
 800a33c:	4659      	mov	r1, fp
 800a33e:	2201      	movs	r2, #1
 800a340:	4620      	mov	r0, r4
 800a342:	9301      	str	r3, [sp, #4]
 800a344:	f000 fa66 	bl	800a814 <__lshift>
 800a348:	4631      	mov	r1, r6
 800a34a:	4683      	mov	fp, r0
 800a34c:	f000 face 	bl	800a8ec <__mcmp>
 800a350:	2800      	cmp	r0, #0
 800a352:	dcb2      	bgt.n	800a2ba <_dtoa_r+0xac2>
 800a354:	d102      	bne.n	800a35c <_dtoa_r+0xb64>
 800a356:	9b01      	ldr	r3, [sp, #4]
 800a358:	07db      	lsls	r3, r3, #31
 800a35a:	d4ae      	bmi.n	800a2ba <_dtoa_r+0xac2>
 800a35c:	462b      	mov	r3, r5
 800a35e:	461d      	mov	r5, r3
 800a360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a364:	2a30      	cmp	r2, #48	; 0x30
 800a366:	d0fa      	beq.n	800a35e <_dtoa_r+0xb66>
 800a368:	e6f7      	b.n	800a15a <_dtoa_r+0x962>
 800a36a:	9a00      	ldr	r2, [sp, #0]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d1a5      	bne.n	800a2bc <_dtoa_r+0xac4>
 800a370:	f10a 0a01 	add.w	sl, sl, #1
 800a374:	2331      	movs	r3, #49	; 0x31
 800a376:	e779      	b.n	800a26c <_dtoa_r+0xa74>
 800a378:	4b13      	ldr	r3, [pc, #76]	; (800a3c8 <_dtoa_r+0xbd0>)
 800a37a:	f7ff baaf 	b.w	80098dc <_dtoa_r+0xe4>
 800a37e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a380:	2b00      	cmp	r3, #0
 800a382:	f47f aa86 	bne.w	8009892 <_dtoa_r+0x9a>
 800a386:	4b11      	ldr	r3, [pc, #68]	; (800a3cc <_dtoa_r+0xbd4>)
 800a388:	f7ff baa8 	b.w	80098dc <_dtoa_r+0xe4>
 800a38c:	f1b9 0f00 	cmp.w	r9, #0
 800a390:	dc03      	bgt.n	800a39a <_dtoa_r+0xba2>
 800a392:	9b05      	ldr	r3, [sp, #20]
 800a394:	2b02      	cmp	r3, #2
 800a396:	f73f aec9 	bgt.w	800a12c <_dtoa_r+0x934>
 800a39a:	9d00      	ldr	r5, [sp, #0]
 800a39c:	4631      	mov	r1, r6
 800a39e:	4658      	mov	r0, fp
 800a3a0:	f7ff f99c 	bl	80096dc <quorem>
 800a3a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3a8:	f805 3b01 	strb.w	r3, [r5], #1
 800a3ac:	9a00      	ldr	r2, [sp, #0]
 800a3ae:	1aaa      	subs	r2, r5, r2
 800a3b0:	4591      	cmp	r9, r2
 800a3b2:	ddba      	ble.n	800a32a <_dtoa_r+0xb32>
 800a3b4:	4659      	mov	r1, fp
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	220a      	movs	r2, #10
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f000 f87a 	bl	800a4b4 <__multadd>
 800a3c0:	4683      	mov	fp, r0
 800a3c2:	e7eb      	b.n	800a39c <_dtoa_r+0xba4>
 800a3c4:	0800d11f 	.word	0x0800d11f
 800a3c8:	0800d078 	.word	0x0800d078
 800a3cc:	0800d09c 	.word	0x0800d09c

0800a3d0 <_localeconv_r>:
 800a3d0:	4800      	ldr	r0, [pc, #0]	; (800a3d4 <_localeconv_r+0x4>)
 800a3d2:	4770      	bx	lr
 800a3d4:	20000750 	.word	0x20000750

0800a3d8 <__malloc_lock>:
 800a3d8:	4801      	ldr	r0, [pc, #4]	; (800a3e0 <__malloc_lock+0x8>)
 800a3da:	f000 bd48 	b.w	800ae6e <__retarget_lock_acquire_recursive>
 800a3de:	bf00      	nop
 800a3e0:	20000da4 	.word	0x20000da4

0800a3e4 <__malloc_unlock>:
 800a3e4:	4801      	ldr	r0, [pc, #4]	; (800a3ec <__malloc_unlock+0x8>)
 800a3e6:	f000 bd43 	b.w	800ae70 <__retarget_lock_release_recursive>
 800a3ea:	bf00      	nop
 800a3ec:	20000da4 	.word	0x20000da4

0800a3f0 <_Balloc>:
 800a3f0:	b570      	push	{r4, r5, r6, lr}
 800a3f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	460d      	mov	r5, r1
 800a3f8:	b976      	cbnz	r6, 800a418 <_Balloc+0x28>
 800a3fa:	2010      	movs	r0, #16
 800a3fc:	f7fe fbd8 	bl	8008bb0 <malloc>
 800a400:	4602      	mov	r2, r0
 800a402:	6260      	str	r0, [r4, #36]	; 0x24
 800a404:	b920      	cbnz	r0, 800a410 <_Balloc+0x20>
 800a406:	4b18      	ldr	r3, [pc, #96]	; (800a468 <_Balloc+0x78>)
 800a408:	4818      	ldr	r0, [pc, #96]	; (800a46c <_Balloc+0x7c>)
 800a40a:	2166      	movs	r1, #102	; 0x66
 800a40c:	f000 fcfe 	bl	800ae0c <__assert_func>
 800a410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a414:	6006      	str	r6, [r0, #0]
 800a416:	60c6      	str	r6, [r0, #12]
 800a418:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a41a:	68f3      	ldr	r3, [r6, #12]
 800a41c:	b183      	cbz	r3, 800a440 <_Balloc+0x50>
 800a41e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a426:	b9b8      	cbnz	r0, 800a458 <_Balloc+0x68>
 800a428:	2101      	movs	r1, #1
 800a42a:	fa01 f605 	lsl.w	r6, r1, r5
 800a42e:	1d72      	adds	r2, r6, #5
 800a430:	0092      	lsls	r2, r2, #2
 800a432:	4620      	mov	r0, r4
 800a434:	f000 fb5a 	bl	800aaec <_calloc_r>
 800a438:	b160      	cbz	r0, 800a454 <_Balloc+0x64>
 800a43a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a43e:	e00e      	b.n	800a45e <_Balloc+0x6e>
 800a440:	2221      	movs	r2, #33	; 0x21
 800a442:	2104      	movs	r1, #4
 800a444:	4620      	mov	r0, r4
 800a446:	f000 fb51 	bl	800aaec <_calloc_r>
 800a44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a44c:	60f0      	str	r0, [r6, #12]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e4      	bne.n	800a41e <_Balloc+0x2e>
 800a454:	2000      	movs	r0, #0
 800a456:	bd70      	pop	{r4, r5, r6, pc}
 800a458:	6802      	ldr	r2, [r0, #0]
 800a45a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a45e:	2300      	movs	r3, #0
 800a460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a464:	e7f7      	b.n	800a456 <_Balloc+0x66>
 800a466:	bf00      	nop
 800a468:	0800d0a9 	.word	0x0800d0a9
 800a46c:	0800d130 	.word	0x0800d130

0800a470 <_Bfree>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a474:	4605      	mov	r5, r0
 800a476:	460c      	mov	r4, r1
 800a478:	b976      	cbnz	r6, 800a498 <_Bfree+0x28>
 800a47a:	2010      	movs	r0, #16
 800a47c:	f7fe fb98 	bl	8008bb0 <malloc>
 800a480:	4602      	mov	r2, r0
 800a482:	6268      	str	r0, [r5, #36]	; 0x24
 800a484:	b920      	cbnz	r0, 800a490 <_Bfree+0x20>
 800a486:	4b09      	ldr	r3, [pc, #36]	; (800a4ac <_Bfree+0x3c>)
 800a488:	4809      	ldr	r0, [pc, #36]	; (800a4b0 <_Bfree+0x40>)
 800a48a:	218a      	movs	r1, #138	; 0x8a
 800a48c:	f000 fcbe 	bl	800ae0c <__assert_func>
 800a490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a494:	6006      	str	r6, [r0, #0]
 800a496:	60c6      	str	r6, [r0, #12]
 800a498:	b13c      	cbz	r4, 800a4aa <_Bfree+0x3a>
 800a49a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a49c:	6862      	ldr	r2, [r4, #4]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4a4:	6021      	str	r1, [r4, #0]
 800a4a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
 800a4ac:	0800d0a9 	.word	0x0800d0a9
 800a4b0:	0800d130 	.word	0x0800d130

0800a4b4 <__multadd>:
 800a4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b8:	690e      	ldr	r6, [r1, #16]
 800a4ba:	4607      	mov	r7, r0
 800a4bc:	4698      	mov	r8, r3
 800a4be:	460c      	mov	r4, r1
 800a4c0:	f101 0014 	add.w	r0, r1, #20
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	6805      	ldr	r5, [r0, #0]
 800a4c8:	b2a9      	uxth	r1, r5
 800a4ca:	fb02 8101 	mla	r1, r2, r1, r8
 800a4ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a4d2:	0c2d      	lsrs	r5, r5, #16
 800a4d4:	fb02 c505 	mla	r5, r2, r5, ip
 800a4d8:	b289      	uxth	r1, r1
 800a4da:	3301      	adds	r3, #1
 800a4dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a4e0:	429e      	cmp	r6, r3
 800a4e2:	f840 1b04 	str.w	r1, [r0], #4
 800a4e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a4ea:	dcec      	bgt.n	800a4c6 <__multadd+0x12>
 800a4ec:	f1b8 0f00 	cmp.w	r8, #0
 800a4f0:	d022      	beq.n	800a538 <__multadd+0x84>
 800a4f2:	68a3      	ldr	r3, [r4, #8]
 800a4f4:	42b3      	cmp	r3, r6
 800a4f6:	dc19      	bgt.n	800a52c <__multadd+0x78>
 800a4f8:	6861      	ldr	r1, [r4, #4]
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	3101      	adds	r1, #1
 800a4fe:	f7ff ff77 	bl	800a3f0 <_Balloc>
 800a502:	4605      	mov	r5, r0
 800a504:	b928      	cbnz	r0, 800a512 <__multadd+0x5e>
 800a506:	4602      	mov	r2, r0
 800a508:	4b0d      	ldr	r3, [pc, #52]	; (800a540 <__multadd+0x8c>)
 800a50a:	480e      	ldr	r0, [pc, #56]	; (800a544 <__multadd+0x90>)
 800a50c:	21b5      	movs	r1, #181	; 0xb5
 800a50e:	f000 fc7d 	bl	800ae0c <__assert_func>
 800a512:	6922      	ldr	r2, [r4, #16]
 800a514:	3202      	adds	r2, #2
 800a516:	f104 010c 	add.w	r1, r4, #12
 800a51a:	0092      	lsls	r2, r2, #2
 800a51c:	300c      	adds	r0, #12
 800a51e:	f7fe fb4f 	bl	8008bc0 <memcpy>
 800a522:	4621      	mov	r1, r4
 800a524:	4638      	mov	r0, r7
 800a526:	f7ff ffa3 	bl	800a470 <_Bfree>
 800a52a:	462c      	mov	r4, r5
 800a52c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a530:	3601      	adds	r6, #1
 800a532:	f8c3 8014 	str.w	r8, [r3, #20]
 800a536:	6126      	str	r6, [r4, #16]
 800a538:	4620      	mov	r0, r4
 800a53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a53e:	bf00      	nop
 800a540:	0800d11f 	.word	0x0800d11f
 800a544:	0800d130 	.word	0x0800d130

0800a548 <__hi0bits>:
 800a548:	0c03      	lsrs	r3, r0, #16
 800a54a:	041b      	lsls	r3, r3, #16
 800a54c:	b9d3      	cbnz	r3, 800a584 <__hi0bits+0x3c>
 800a54e:	0400      	lsls	r0, r0, #16
 800a550:	2310      	movs	r3, #16
 800a552:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a556:	bf04      	itt	eq
 800a558:	0200      	lsleq	r0, r0, #8
 800a55a:	3308      	addeq	r3, #8
 800a55c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a560:	bf04      	itt	eq
 800a562:	0100      	lsleq	r0, r0, #4
 800a564:	3304      	addeq	r3, #4
 800a566:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a56a:	bf04      	itt	eq
 800a56c:	0080      	lsleq	r0, r0, #2
 800a56e:	3302      	addeq	r3, #2
 800a570:	2800      	cmp	r0, #0
 800a572:	db05      	blt.n	800a580 <__hi0bits+0x38>
 800a574:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a578:	f103 0301 	add.w	r3, r3, #1
 800a57c:	bf08      	it	eq
 800a57e:	2320      	moveq	r3, #32
 800a580:	4618      	mov	r0, r3
 800a582:	4770      	bx	lr
 800a584:	2300      	movs	r3, #0
 800a586:	e7e4      	b.n	800a552 <__hi0bits+0xa>

0800a588 <__lo0bits>:
 800a588:	6803      	ldr	r3, [r0, #0]
 800a58a:	f013 0207 	ands.w	r2, r3, #7
 800a58e:	4601      	mov	r1, r0
 800a590:	d00b      	beq.n	800a5aa <__lo0bits+0x22>
 800a592:	07da      	lsls	r2, r3, #31
 800a594:	d424      	bmi.n	800a5e0 <__lo0bits+0x58>
 800a596:	0798      	lsls	r0, r3, #30
 800a598:	bf49      	itett	mi
 800a59a:	085b      	lsrmi	r3, r3, #1
 800a59c:	089b      	lsrpl	r3, r3, #2
 800a59e:	2001      	movmi	r0, #1
 800a5a0:	600b      	strmi	r3, [r1, #0]
 800a5a2:	bf5c      	itt	pl
 800a5a4:	600b      	strpl	r3, [r1, #0]
 800a5a6:	2002      	movpl	r0, #2
 800a5a8:	4770      	bx	lr
 800a5aa:	b298      	uxth	r0, r3
 800a5ac:	b9b0      	cbnz	r0, 800a5dc <__lo0bits+0x54>
 800a5ae:	0c1b      	lsrs	r3, r3, #16
 800a5b0:	2010      	movs	r0, #16
 800a5b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a5b6:	bf04      	itt	eq
 800a5b8:	0a1b      	lsreq	r3, r3, #8
 800a5ba:	3008      	addeq	r0, #8
 800a5bc:	071a      	lsls	r2, r3, #28
 800a5be:	bf04      	itt	eq
 800a5c0:	091b      	lsreq	r3, r3, #4
 800a5c2:	3004      	addeq	r0, #4
 800a5c4:	079a      	lsls	r2, r3, #30
 800a5c6:	bf04      	itt	eq
 800a5c8:	089b      	lsreq	r3, r3, #2
 800a5ca:	3002      	addeq	r0, #2
 800a5cc:	07da      	lsls	r2, r3, #31
 800a5ce:	d403      	bmi.n	800a5d8 <__lo0bits+0x50>
 800a5d0:	085b      	lsrs	r3, r3, #1
 800a5d2:	f100 0001 	add.w	r0, r0, #1
 800a5d6:	d005      	beq.n	800a5e4 <__lo0bits+0x5c>
 800a5d8:	600b      	str	r3, [r1, #0]
 800a5da:	4770      	bx	lr
 800a5dc:	4610      	mov	r0, r2
 800a5de:	e7e8      	b.n	800a5b2 <__lo0bits+0x2a>
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	4770      	bx	lr
 800a5e4:	2020      	movs	r0, #32
 800a5e6:	4770      	bx	lr

0800a5e8 <__i2b>:
 800a5e8:	b510      	push	{r4, lr}
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	f7ff feff 	bl	800a3f0 <_Balloc>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	b928      	cbnz	r0, 800a602 <__i2b+0x1a>
 800a5f6:	4b05      	ldr	r3, [pc, #20]	; (800a60c <__i2b+0x24>)
 800a5f8:	4805      	ldr	r0, [pc, #20]	; (800a610 <__i2b+0x28>)
 800a5fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5fe:	f000 fc05 	bl	800ae0c <__assert_func>
 800a602:	2301      	movs	r3, #1
 800a604:	6144      	str	r4, [r0, #20]
 800a606:	6103      	str	r3, [r0, #16]
 800a608:	bd10      	pop	{r4, pc}
 800a60a:	bf00      	nop
 800a60c:	0800d11f 	.word	0x0800d11f
 800a610:	0800d130 	.word	0x0800d130

0800a614 <__multiply>:
 800a614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a618:	4614      	mov	r4, r2
 800a61a:	690a      	ldr	r2, [r1, #16]
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	429a      	cmp	r2, r3
 800a620:	bfb8      	it	lt
 800a622:	460b      	movlt	r3, r1
 800a624:	460d      	mov	r5, r1
 800a626:	bfbc      	itt	lt
 800a628:	4625      	movlt	r5, r4
 800a62a:	461c      	movlt	r4, r3
 800a62c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a630:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a634:	68ab      	ldr	r3, [r5, #8]
 800a636:	6869      	ldr	r1, [r5, #4]
 800a638:	eb0a 0709 	add.w	r7, sl, r9
 800a63c:	42bb      	cmp	r3, r7
 800a63e:	b085      	sub	sp, #20
 800a640:	bfb8      	it	lt
 800a642:	3101      	addlt	r1, #1
 800a644:	f7ff fed4 	bl	800a3f0 <_Balloc>
 800a648:	b930      	cbnz	r0, 800a658 <__multiply+0x44>
 800a64a:	4602      	mov	r2, r0
 800a64c:	4b42      	ldr	r3, [pc, #264]	; (800a758 <__multiply+0x144>)
 800a64e:	4843      	ldr	r0, [pc, #268]	; (800a75c <__multiply+0x148>)
 800a650:	f240 115d 	movw	r1, #349	; 0x15d
 800a654:	f000 fbda 	bl	800ae0c <__assert_func>
 800a658:	f100 0614 	add.w	r6, r0, #20
 800a65c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a660:	4633      	mov	r3, r6
 800a662:	2200      	movs	r2, #0
 800a664:	4543      	cmp	r3, r8
 800a666:	d31e      	bcc.n	800a6a6 <__multiply+0x92>
 800a668:	f105 0c14 	add.w	ip, r5, #20
 800a66c:	f104 0314 	add.w	r3, r4, #20
 800a670:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a674:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a678:	9202      	str	r2, [sp, #8]
 800a67a:	ebac 0205 	sub.w	r2, ip, r5
 800a67e:	3a15      	subs	r2, #21
 800a680:	f022 0203 	bic.w	r2, r2, #3
 800a684:	3204      	adds	r2, #4
 800a686:	f105 0115 	add.w	r1, r5, #21
 800a68a:	458c      	cmp	ip, r1
 800a68c:	bf38      	it	cc
 800a68e:	2204      	movcc	r2, #4
 800a690:	9201      	str	r2, [sp, #4]
 800a692:	9a02      	ldr	r2, [sp, #8]
 800a694:	9303      	str	r3, [sp, #12]
 800a696:	429a      	cmp	r2, r3
 800a698:	d808      	bhi.n	800a6ac <__multiply+0x98>
 800a69a:	2f00      	cmp	r7, #0
 800a69c:	dc55      	bgt.n	800a74a <__multiply+0x136>
 800a69e:	6107      	str	r7, [r0, #16]
 800a6a0:	b005      	add	sp, #20
 800a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a6:	f843 2b04 	str.w	r2, [r3], #4
 800a6aa:	e7db      	b.n	800a664 <__multiply+0x50>
 800a6ac:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6b0:	f1ba 0f00 	cmp.w	sl, #0
 800a6b4:	d020      	beq.n	800a6f8 <__multiply+0xe4>
 800a6b6:	f105 0e14 	add.w	lr, r5, #20
 800a6ba:	46b1      	mov	r9, r6
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a6c2:	f8d9 b000 	ldr.w	fp, [r9]
 800a6c6:	b2a1      	uxth	r1, r4
 800a6c8:	fa1f fb8b 	uxth.w	fp, fp
 800a6cc:	fb0a b101 	mla	r1, sl, r1, fp
 800a6d0:	4411      	add	r1, r2
 800a6d2:	f8d9 2000 	ldr.w	r2, [r9]
 800a6d6:	0c24      	lsrs	r4, r4, #16
 800a6d8:	0c12      	lsrs	r2, r2, #16
 800a6da:	fb0a 2404 	mla	r4, sl, r4, r2
 800a6de:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a6e2:	b289      	uxth	r1, r1
 800a6e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a6e8:	45f4      	cmp	ip, lr
 800a6ea:	f849 1b04 	str.w	r1, [r9], #4
 800a6ee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a6f2:	d8e4      	bhi.n	800a6be <__multiply+0xaa>
 800a6f4:	9901      	ldr	r1, [sp, #4]
 800a6f6:	5072      	str	r2, [r6, r1]
 800a6f8:	9a03      	ldr	r2, [sp, #12]
 800a6fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6fe:	3304      	adds	r3, #4
 800a700:	f1b9 0f00 	cmp.w	r9, #0
 800a704:	d01f      	beq.n	800a746 <__multiply+0x132>
 800a706:	6834      	ldr	r4, [r6, #0]
 800a708:	f105 0114 	add.w	r1, r5, #20
 800a70c:	46b6      	mov	lr, r6
 800a70e:	f04f 0a00 	mov.w	sl, #0
 800a712:	880a      	ldrh	r2, [r1, #0]
 800a714:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a718:	fb09 b202 	mla	r2, r9, r2, fp
 800a71c:	4492      	add	sl, r2
 800a71e:	b2a4      	uxth	r4, r4
 800a720:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a724:	f84e 4b04 	str.w	r4, [lr], #4
 800a728:	f851 4b04 	ldr.w	r4, [r1], #4
 800a72c:	f8be 2000 	ldrh.w	r2, [lr]
 800a730:	0c24      	lsrs	r4, r4, #16
 800a732:	fb09 2404 	mla	r4, r9, r4, r2
 800a736:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a73a:	458c      	cmp	ip, r1
 800a73c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a740:	d8e7      	bhi.n	800a712 <__multiply+0xfe>
 800a742:	9a01      	ldr	r2, [sp, #4]
 800a744:	50b4      	str	r4, [r6, r2]
 800a746:	3604      	adds	r6, #4
 800a748:	e7a3      	b.n	800a692 <__multiply+0x7e>
 800a74a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1a5      	bne.n	800a69e <__multiply+0x8a>
 800a752:	3f01      	subs	r7, #1
 800a754:	e7a1      	b.n	800a69a <__multiply+0x86>
 800a756:	bf00      	nop
 800a758:	0800d11f 	.word	0x0800d11f
 800a75c:	0800d130 	.word	0x0800d130

0800a760 <__pow5mult>:
 800a760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a764:	4615      	mov	r5, r2
 800a766:	f012 0203 	ands.w	r2, r2, #3
 800a76a:	4606      	mov	r6, r0
 800a76c:	460f      	mov	r7, r1
 800a76e:	d007      	beq.n	800a780 <__pow5mult+0x20>
 800a770:	4c25      	ldr	r4, [pc, #148]	; (800a808 <__pow5mult+0xa8>)
 800a772:	3a01      	subs	r2, #1
 800a774:	2300      	movs	r3, #0
 800a776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a77a:	f7ff fe9b 	bl	800a4b4 <__multadd>
 800a77e:	4607      	mov	r7, r0
 800a780:	10ad      	asrs	r5, r5, #2
 800a782:	d03d      	beq.n	800a800 <__pow5mult+0xa0>
 800a784:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a786:	b97c      	cbnz	r4, 800a7a8 <__pow5mult+0x48>
 800a788:	2010      	movs	r0, #16
 800a78a:	f7fe fa11 	bl	8008bb0 <malloc>
 800a78e:	4602      	mov	r2, r0
 800a790:	6270      	str	r0, [r6, #36]	; 0x24
 800a792:	b928      	cbnz	r0, 800a7a0 <__pow5mult+0x40>
 800a794:	4b1d      	ldr	r3, [pc, #116]	; (800a80c <__pow5mult+0xac>)
 800a796:	481e      	ldr	r0, [pc, #120]	; (800a810 <__pow5mult+0xb0>)
 800a798:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a79c:	f000 fb36 	bl	800ae0c <__assert_func>
 800a7a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7a4:	6004      	str	r4, [r0, #0]
 800a7a6:	60c4      	str	r4, [r0, #12]
 800a7a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7b0:	b94c      	cbnz	r4, 800a7c6 <__pow5mult+0x66>
 800a7b2:	f240 2171 	movw	r1, #625	; 0x271
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	f7ff ff16 	bl	800a5e8 <__i2b>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	6003      	str	r3, [r0, #0]
 800a7c6:	f04f 0900 	mov.w	r9, #0
 800a7ca:	07eb      	lsls	r3, r5, #31
 800a7cc:	d50a      	bpl.n	800a7e4 <__pow5mult+0x84>
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	4622      	mov	r2, r4
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f7ff ff1e 	bl	800a614 <__multiply>
 800a7d8:	4639      	mov	r1, r7
 800a7da:	4680      	mov	r8, r0
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f7ff fe47 	bl	800a470 <_Bfree>
 800a7e2:	4647      	mov	r7, r8
 800a7e4:	106d      	asrs	r5, r5, #1
 800a7e6:	d00b      	beq.n	800a800 <__pow5mult+0xa0>
 800a7e8:	6820      	ldr	r0, [r4, #0]
 800a7ea:	b938      	cbnz	r0, 800a7fc <__pow5mult+0x9c>
 800a7ec:	4622      	mov	r2, r4
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7ff ff0f 	bl	800a614 <__multiply>
 800a7f6:	6020      	str	r0, [r4, #0]
 800a7f8:	f8c0 9000 	str.w	r9, [r0]
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	e7e4      	b.n	800a7ca <__pow5mult+0x6a>
 800a800:	4638      	mov	r0, r7
 800a802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a806:	bf00      	nop
 800a808:	0800d280 	.word	0x0800d280
 800a80c:	0800d0a9 	.word	0x0800d0a9
 800a810:	0800d130 	.word	0x0800d130

0800a814 <__lshift>:
 800a814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a818:	460c      	mov	r4, r1
 800a81a:	6849      	ldr	r1, [r1, #4]
 800a81c:	6923      	ldr	r3, [r4, #16]
 800a81e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a822:	68a3      	ldr	r3, [r4, #8]
 800a824:	4607      	mov	r7, r0
 800a826:	4691      	mov	r9, r2
 800a828:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a82c:	f108 0601 	add.w	r6, r8, #1
 800a830:	42b3      	cmp	r3, r6
 800a832:	db0b      	blt.n	800a84c <__lshift+0x38>
 800a834:	4638      	mov	r0, r7
 800a836:	f7ff fddb 	bl	800a3f0 <_Balloc>
 800a83a:	4605      	mov	r5, r0
 800a83c:	b948      	cbnz	r0, 800a852 <__lshift+0x3e>
 800a83e:	4602      	mov	r2, r0
 800a840:	4b28      	ldr	r3, [pc, #160]	; (800a8e4 <__lshift+0xd0>)
 800a842:	4829      	ldr	r0, [pc, #164]	; (800a8e8 <__lshift+0xd4>)
 800a844:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a848:	f000 fae0 	bl	800ae0c <__assert_func>
 800a84c:	3101      	adds	r1, #1
 800a84e:	005b      	lsls	r3, r3, #1
 800a850:	e7ee      	b.n	800a830 <__lshift+0x1c>
 800a852:	2300      	movs	r3, #0
 800a854:	f100 0114 	add.w	r1, r0, #20
 800a858:	f100 0210 	add.w	r2, r0, #16
 800a85c:	4618      	mov	r0, r3
 800a85e:	4553      	cmp	r3, sl
 800a860:	db33      	blt.n	800a8ca <__lshift+0xb6>
 800a862:	6920      	ldr	r0, [r4, #16]
 800a864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a868:	f104 0314 	add.w	r3, r4, #20
 800a86c:	f019 091f 	ands.w	r9, r9, #31
 800a870:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a874:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a878:	d02b      	beq.n	800a8d2 <__lshift+0xbe>
 800a87a:	f1c9 0e20 	rsb	lr, r9, #32
 800a87e:	468a      	mov	sl, r1
 800a880:	2200      	movs	r2, #0
 800a882:	6818      	ldr	r0, [r3, #0]
 800a884:	fa00 f009 	lsl.w	r0, r0, r9
 800a888:	4302      	orrs	r2, r0
 800a88a:	f84a 2b04 	str.w	r2, [sl], #4
 800a88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a892:	459c      	cmp	ip, r3
 800a894:	fa22 f20e 	lsr.w	r2, r2, lr
 800a898:	d8f3      	bhi.n	800a882 <__lshift+0x6e>
 800a89a:	ebac 0304 	sub.w	r3, ip, r4
 800a89e:	3b15      	subs	r3, #21
 800a8a0:	f023 0303 	bic.w	r3, r3, #3
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	f104 0015 	add.w	r0, r4, #21
 800a8aa:	4584      	cmp	ip, r0
 800a8ac:	bf38      	it	cc
 800a8ae:	2304      	movcc	r3, #4
 800a8b0:	50ca      	str	r2, [r1, r3]
 800a8b2:	b10a      	cbz	r2, 800a8b8 <__lshift+0xa4>
 800a8b4:	f108 0602 	add.w	r6, r8, #2
 800a8b8:	3e01      	subs	r6, #1
 800a8ba:	4638      	mov	r0, r7
 800a8bc:	612e      	str	r6, [r5, #16]
 800a8be:	4621      	mov	r1, r4
 800a8c0:	f7ff fdd6 	bl	800a470 <_Bfree>
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	e7c5      	b.n	800a85e <__lshift+0x4a>
 800a8d2:	3904      	subs	r1, #4
 800a8d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8dc:	459c      	cmp	ip, r3
 800a8de:	d8f9      	bhi.n	800a8d4 <__lshift+0xc0>
 800a8e0:	e7ea      	b.n	800a8b8 <__lshift+0xa4>
 800a8e2:	bf00      	nop
 800a8e4:	0800d11f 	.word	0x0800d11f
 800a8e8:	0800d130 	.word	0x0800d130

0800a8ec <__mcmp>:
 800a8ec:	b530      	push	{r4, r5, lr}
 800a8ee:	6902      	ldr	r2, [r0, #16]
 800a8f0:	690c      	ldr	r4, [r1, #16]
 800a8f2:	1b12      	subs	r2, r2, r4
 800a8f4:	d10e      	bne.n	800a914 <__mcmp+0x28>
 800a8f6:	f100 0314 	add.w	r3, r0, #20
 800a8fa:	3114      	adds	r1, #20
 800a8fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a900:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a904:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a908:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a90c:	42a5      	cmp	r5, r4
 800a90e:	d003      	beq.n	800a918 <__mcmp+0x2c>
 800a910:	d305      	bcc.n	800a91e <__mcmp+0x32>
 800a912:	2201      	movs	r2, #1
 800a914:	4610      	mov	r0, r2
 800a916:	bd30      	pop	{r4, r5, pc}
 800a918:	4283      	cmp	r3, r0
 800a91a:	d3f3      	bcc.n	800a904 <__mcmp+0x18>
 800a91c:	e7fa      	b.n	800a914 <__mcmp+0x28>
 800a91e:	f04f 32ff 	mov.w	r2, #4294967295
 800a922:	e7f7      	b.n	800a914 <__mcmp+0x28>

0800a924 <__mdiff>:
 800a924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a928:	460c      	mov	r4, r1
 800a92a:	4606      	mov	r6, r0
 800a92c:	4611      	mov	r1, r2
 800a92e:	4620      	mov	r0, r4
 800a930:	4617      	mov	r7, r2
 800a932:	f7ff ffdb 	bl	800a8ec <__mcmp>
 800a936:	1e05      	subs	r5, r0, #0
 800a938:	d110      	bne.n	800a95c <__mdiff+0x38>
 800a93a:	4629      	mov	r1, r5
 800a93c:	4630      	mov	r0, r6
 800a93e:	f7ff fd57 	bl	800a3f0 <_Balloc>
 800a942:	b930      	cbnz	r0, 800a952 <__mdiff+0x2e>
 800a944:	4b39      	ldr	r3, [pc, #228]	; (800aa2c <__mdiff+0x108>)
 800a946:	4602      	mov	r2, r0
 800a948:	f240 2132 	movw	r1, #562	; 0x232
 800a94c:	4838      	ldr	r0, [pc, #224]	; (800aa30 <__mdiff+0x10c>)
 800a94e:	f000 fa5d 	bl	800ae0c <__assert_func>
 800a952:	2301      	movs	r3, #1
 800a954:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95c:	bfa4      	itt	ge
 800a95e:	463b      	movge	r3, r7
 800a960:	4627      	movge	r7, r4
 800a962:	4630      	mov	r0, r6
 800a964:	6879      	ldr	r1, [r7, #4]
 800a966:	bfa6      	itte	ge
 800a968:	461c      	movge	r4, r3
 800a96a:	2500      	movge	r5, #0
 800a96c:	2501      	movlt	r5, #1
 800a96e:	f7ff fd3f 	bl	800a3f0 <_Balloc>
 800a972:	b920      	cbnz	r0, 800a97e <__mdiff+0x5a>
 800a974:	4b2d      	ldr	r3, [pc, #180]	; (800aa2c <__mdiff+0x108>)
 800a976:	4602      	mov	r2, r0
 800a978:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a97c:	e7e6      	b.n	800a94c <__mdiff+0x28>
 800a97e:	693e      	ldr	r6, [r7, #16]
 800a980:	60c5      	str	r5, [r0, #12]
 800a982:	6925      	ldr	r5, [r4, #16]
 800a984:	f107 0114 	add.w	r1, r7, #20
 800a988:	f104 0914 	add.w	r9, r4, #20
 800a98c:	f100 0e14 	add.w	lr, r0, #20
 800a990:	f107 0210 	add.w	r2, r7, #16
 800a994:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a998:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a99c:	46f2      	mov	sl, lr
 800a99e:	2700      	movs	r7, #0
 800a9a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9a8:	fa1f f883 	uxth.w	r8, r3
 800a9ac:	fa17 f78b 	uxtah	r7, r7, fp
 800a9b0:	0c1b      	lsrs	r3, r3, #16
 800a9b2:	eba7 0808 	sub.w	r8, r7, r8
 800a9b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9be:	fa1f f888 	uxth.w	r8, r8
 800a9c2:	141f      	asrs	r7, r3, #16
 800a9c4:	454d      	cmp	r5, r9
 800a9c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9ca:	f84a 3b04 	str.w	r3, [sl], #4
 800a9ce:	d8e7      	bhi.n	800a9a0 <__mdiff+0x7c>
 800a9d0:	1b2b      	subs	r3, r5, r4
 800a9d2:	3b15      	subs	r3, #21
 800a9d4:	f023 0303 	bic.w	r3, r3, #3
 800a9d8:	3304      	adds	r3, #4
 800a9da:	3415      	adds	r4, #21
 800a9dc:	42a5      	cmp	r5, r4
 800a9de:	bf38      	it	cc
 800a9e0:	2304      	movcc	r3, #4
 800a9e2:	4419      	add	r1, r3
 800a9e4:	4473      	add	r3, lr
 800a9e6:	469e      	mov	lr, r3
 800a9e8:	460d      	mov	r5, r1
 800a9ea:	4565      	cmp	r5, ip
 800a9ec:	d30e      	bcc.n	800aa0c <__mdiff+0xe8>
 800a9ee:	f10c 0203 	add.w	r2, ip, #3
 800a9f2:	1a52      	subs	r2, r2, r1
 800a9f4:	f022 0203 	bic.w	r2, r2, #3
 800a9f8:	3903      	subs	r1, #3
 800a9fa:	458c      	cmp	ip, r1
 800a9fc:	bf38      	it	cc
 800a9fe:	2200      	movcc	r2, #0
 800aa00:	441a      	add	r2, r3
 800aa02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa06:	b17b      	cbz	r3, 800aa28 <__mdiff+0x104>
 800aa08:	6106      	str	r6, [r0, #16]
 800aa0a:	e7a5      	b.n	800a958 <__mdiff+0x34>
 800aa0c:	f855 8b04 	ldr.w	r8, [r5], #4
 800aa10:	fa17 f488 	uxtah	r4, r7, r8
 800aa14:	1422      	asrs	r2, r4, #16
 800aa16:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800aa1a:	b2a4      	uxth	r4, r4
 800aa1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800aa20:	f84e 4b04 	str.w	r4, [lr], #4
 800aa24:	1417      	asrs	r7, r2, #16
 800aa26:	e7e0      	b.n	800a9ea <__mdiff+0xc6>
 800aa28:	3e01      	subs	r6, #1
 800aa2a:	e7ea      	b.n	800aa02 <__mdiff+0xde>
 800aa2c:	0800d11f 	.word	0x0800d11f
 800aa30:	0800d130 	.word	0x0800d130

0800aa34 <__d2b>:
 800aa34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa38:	4689      	mov	r9, r1
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	ec57 6b10 	vmov	r6, r7, d0
 800aa40:	4690      	mov	r8, r2
 800aa42:	f7ff fcd5 	bl	800a3f0 <_Balloc>
 800aa46:	4604      	mov	r4, r0
 800aa48:	b930      	cbnz	r0, 800aa58 <__d2b+0x24>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	4b25      	ldr	r3, [pc, #148]	; (800aae4 <__d2b+0xb0>)
 800aa4e:	4826      	ldr	r0, [pc, #152]	; (800aae8 <__d2b+0xb4>)
 800aa50:	f240 310a 	movw	r1, #778	; 0x30a
 800aa54:	f000 f9da 	bl	800ae0c <__assert_func>
 800aa58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa60:	bb35      	cbnz	r5, 800aab0 <__d2b+0x7c>
 800aa62:	2e00      	cmp	r6, #0
 800aa64:	9301      	str	r3, [sp, #4]
 800aa66:	d028      	beq.n	800aaba <__d2b+0x86>
 800aa68:	4668      	mov	r0, sp
 800aa6a:	9600      	str	r6, [sp, #0]
 800aa6c:	f7ff fd8c 	bl	800a588 <__lo0bits>
 800aa70:	9900      	ldr	r1, [sp, #0]
 800aa72:	b300      	cbz	r0, 800aab6 <__d2b+0x82>
 800aa74:	9a01      	ldr	r2, [sp, #4]
 800aa76:	f1c0 0320 	rsb	r3, r0, #32
 800aa7a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa7e:	430b      	orrs	r3, r1
 800aa80:	40c2      	lsrs	r2, r0
 800aa82:	6163      	str	r3, [r4, #20]
 800aa84:	9201      	str	r2, [sp, #4]
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	61a3      	str	r3, [r4, #24]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	bf14      	ite	ne
 800aa8e:	2202      	movne	r2, #2
 800aa90:	2201      	moveq	r2, #1
 800aa92:	6122      	str	r2, [r4, #16]
 800aa94:	b1d5      	cbz	r5, 800aacc <__d2b+0x98>
 800aa96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa9a:	4405      	add	r5, r0
 800aa9c:	f8c9 5000 	str.w	r5, [r9]
 800aaa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aaa4:	f8c8 0000 	str.w	r0, [r8]
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	b003      	add	sp, #12
 800aaac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aab4:	e7d5      	b.n	800aa62 <__d2b+0x2e>
 800aab6:	6161      	str	r1, [r4, #20]
 800aab8:	e7e5      	b.n	800aa86 <__d2b+0x52>
 800aaba:	a801      	add	r0, sp, #4
 800aabc:	f7ff fd64 	bl	800a588 <__lo0bits>
 800aac0:	9b01      	ldr	r3, [sp, #4]
 800aac2:	6163      	str	r3, [r4, #20]
 800aac4:	2201      	movs	r2, #1
 800aac6:	6122      	str	r2, [r4, #16]
 800aac8:	3020      	adds	r0, #32
 800aaca:	e7e3      	b.n	800aa94 <__d2b+0x60>
 800aacc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aad0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aad4:	f8c9 0000 	str.w	r0, [r9]
 800aad8:	6918      	ldr	r0, [r3, #16]
 800aada:	f7ff fd35 	bl	800a548 <__hi0bits>
 800aade:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aae2:	e7df      	b.n	800aaa4 <__d2b+0x70>
 800aae4:	0800d11f 	.word	0x0800d11f
 800aae8:	0800d130 	.word	0x0800d130

0800aaec <_calloc_r>:
 800aaec:	b513      	push	{r0, r1, r4, lr}
 800aaee:	434a      	muls	r2, r1
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	9201      	str	r2, [sp, #4]
 800aaf4:	f7fe f8ca 	bl	8008c8c <_malloc_r>
 800aaf8:	4604      	mov	r4, r0
 800aafa:	b118      	cbz	r0, 800ab04 <_calloc_r+0x18>
 800aafc:	9a01      	ldr	r2, [sp, #4]
 800aafe:	2100      	movs	r1, #0
 800ab00:	f7fe f86c 	bl	8008bdc <memset>
 800ab04:	4620      	mov	r0, r4
 800ab06:	b002      	add	sp, #8
 800ab08:	bd10      	pop	{r4, pc}

0800ab0a <_realloc_r>:
 800ab0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0c:	4607      	mov	r7, r0
 800ab0e:	4614      	mov	r4, r2
 800ab10:	460e      	mov	r6, r1
 800ab12:	b921      	cbnz	r1, 800ab1e <_realloc_r+0x14>
 800ab14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab18:	4611      	mov	r1, r2
 800ab1a:	f7fe b8b7 	b.w	8008c8c <_malloc_r>
 800ab1e:	b922      	cbnz	r2, 800ab2a <_realloc_r+0x20>
 800ab20:	f7fe f864 	bl	8008bec <_free_r>
 800ab24:	4625      	mov	r5, r4
 800ab26:	4628      	mov	r0, r5
 800ab28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab2a:	f000 f9ce 	bl	800aeca <_malloc_usable_size_r>
 800ab2e:	42a0      	cmp	r0, r4
 800ab30:	d20f      	bcs.n	800ab52 <_realloc_r+0x48>
 800ab32:	4621      	mov	r1, r4
 800ab34:	4638      	mov	r0, r7
 800ab36:	f7fe f8a9 	bl	8008c8c <_malloc_r>
 800ab3a:	4605      	mov	r5, r0
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d0f2      	beq.n	800ab26 <_realloc_r+0x1c>
 800ab40:	4631      	mov	r1, r6
 800ab42:	4622      	mov	r2, r4
 800ab44:	f7fe f83c 	bl	8008bc0 <memcpy>
 800ab48:	4631      	mov	r1, r6
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	f7fe f84e 	bl	8008bec <_free_r>
 800ab50:	e7e9      	b.n	800ab26 <_realloc_r+0x1c>
 800ab52:	4635      	mov	r5, r6
 800ab54:	e7e7      	b.n	800ab26 <_realloc_r+0x1c>

0800ab56 <__ssputs_r>:
 800ab56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab5a:	688e      	ldr	r6, [r1, #8]
 800ab5c:	429e      	cmp	r6, r3
 800ab5e:	4682      	mov	sl, r0
 800ab60:	460c      	mov	r4, r1
 800ab62:	4690      	mov	r8, r2
 800ab64:	461f      	mov	r7, r3
 800ab66:	d838      	bhi.n	800abda <__ssputs_r+0x84>
 800ab68:	898a      	ldrh	r2, [r1, #12]
 800ab6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab6e:	d032      	beq.n	800abd6 <__ssputs_r+0x80>
 800ab70:	6825      	ldr	r5, [r4, #0]
 800ab72:	6909      	ldr	r1, [r1, #16]
 800ab74:	eba5 0901 	sub.w	r9, r5, r1
 800ab78:	6965      	ldr	r5, [r4, #20]
 800ab7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab82:	3301      	adds	r3, #1
 800ab84:	444b      	add	r3, r9
 800ab86:	106d      	asrs	r5, r5, #1
 800ab88:	429d      	cmp	r5, r3
 800ab8a:	bf38      	it	cc
 800ab8c:	461d      	movcc	r5, r3
 800ab8e:	0553      	lsls	r3, r2, #21
 800ab90:	d531      	bpl.n	800abf6 <__ssputs_r+0xa0>
 800ab92:	4629      	mov	r1, r5
 800ab94:	f7fe f87a 	bl	8008c8c <_malloc_r>
 800ab98:	4606      	mov	r6, r0
 800ab9a:	b950      	cbnz	r0, 800abb2 <__ssputs_r+0x5c>
 800ab9c:	230c      	movs	r3, #12
 800ab9e:	f8ca 3000 	str.w	r3, [sl]
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aba8:	81a3      	strh	r3, [r4, #12]
 800abaa:	f04f 30ff 	mov.w	r0, #4294967295
 800abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb2:	6921      	ldr	r1, [r4, #16]
 800abb4:	464a      	mov	r2, r9
 800abb6:	f7fe f803 	bl	8008bc0 <memcpy>
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc4:	81a3      	strh	r3, [r4, #12]
 800abc6:	6126      	str	r6, [r4, #16]
 800abc8:	6165      	str	r5, [r4, #20]
 800abca:	444e      	add	r6, r9
 800abcc:	eba5 0509 	sub.w	r5, r5, r9
 800abd0:	6026      	str	r6, [r4, #0]
 800abd2:	60a5      	str	r5, [r4, #8]
 800abd4:	463e      	mov	r6, r7
 800abd6:	42be      	cmp	r6, r7
 800abd8:	d900      	bls.n	800abdc <__ssputs_r+0x86>
 800abda:	463e      	mov	r6, r7
 800abdc:	4632      	mov	r2, r6
 800abde:	6820      	ldr	r0, [r4, #0]
 800abe0:	4641      	mov	r1, r8
 800abe2:	f000 f958 	bl	800ae96 <memmove>
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	6822      	ldr	r2, [r4, #0]
 800abea:	1b9b      	subs	r3, r3, r6
 800abec:	4432      	add	r2, r6
 800abee:	60a3      	str	r3, [r4, #8]
 800abf0:	6022      	str	r2, [r4, #0]
 800abf2:	2000      	movs	r0, #0
 800abf4:	e7db      	b.n	800abae <__ssputs_r+0x58>
 800abf6:	462a      	mov	r2, r5
 800abf8:	f7ff ff87 	bl	800ab0a <_realloc_r>
 800abfc:	4606      	mov	r6, r0
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d1e1      	bne.n	800abc6 <__ssputs_r+0x70>
 800ac02:	6921      	ldr	r1, [r4, #16]
 800ac04:	4650      	mov	r0, sl
 800ac06:	f7fd fff1 	bl	8008bec <_free_r>
 800ac0a:	e7c7      	b.n	800ab9c <__ssputs_r+0x46>

0800ac0c <_svfiprintf_r>:
 800ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	4698      	mov	r8, r3
 800ac12:	898b      	ldrh	r3, [r1, #12]
 800ac14:	061b      	lsls	r3, r3, #24
 800ac16:	b09d      	sub	sp, #116	; 0x74
 800ac18:	4607      	mov	r7, r0
 800ac1a:	460d      	mov	r5, r1
 800ac1c:	4614      	mov	r4, r2
 800ac1e:	d50e      	bpl.n	800ac3e <_svfiprintf_r+0x32>
 800ac20:	690b      	ldr	r3, [r1, #16]
 800ac22:	b963      	cbnz	r3, 800ac3e <_svfiprintf_r+0x32>
 800ac24:	2140      	movs	r1, #64	; 0x40
 800ac26:	f7fe f831 	bl	8008c8c <_malloc_r>
 800ac2a:	6028      	str	r0, [r5, #0]
 800ac2c:	6128      	str	r0, [r5, #16]
 800ac2e:	b920      	cbnz	r0, 800ac3a <_svfiprintf_r+0x2e>
 800ac30:	230c      	movs	r3, #12
 800ac32:	603b      	str	r3, [r7, #0]
 800ac34:	f04f 30ff 	mov.w	r0, #4294967295
 800ac38:	e0d1      	b.n	800adde <_svfiprintf_r+0x1d2>
 800ac3a:	2340      	movs	r3, #64	; 0x40
 800ac3c:	616b      	str	r3, [r5, #20]
 800ac3e:	2300      	movs	r3, #0
 800ac40:	9309      	str	r3, [sp, #36]	; 0x24
 800ac42:	2320      	movs	r3, #32
 800ac44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac48:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac4c:	2330      	movs	r3, #48	; 0x30
 800ac4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800adf8 <_svfiprintf_r+0x1ec>
 800ac52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac56:	f04f 0901 	mov.w	r9, #1
 800ac5a:	4623      	mov	r3, r4
 800ac5c:	469a      	mov	sl, r3
 800ac5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac62:	b10a      	cbz	r2, 800ac68 <_svfiprintf_r+0x5c>
 800ac64:	2a25      	cmp	r2, #37	; 0x25
 800ac66:	d1f9      	bne.n	800ac5c <_svfiprintf_r+0x50>
 800ac68:	ebba 0b04 	subs.w	fp, sl, r4
 800ac6c:	d00b      	beq.n	800ac86 <_svfiprintf_r+0x7a>
 800ac6e:	465b      	mov	r3, fp
 800ac70:	4622      	mov	r2, r4
 800ac72:	4629      	mov	r1, r5
 800ac74:	4638      	mov	r0, r7
 800ac76:	f7ff ff6e 	bl	800ab56 <__ssputs_r>
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	f000 80aa 	beq.w	800add4 <_svfiprintf_r+0x1c8>
 800ac80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac82:	445a      	add	r2, fp
 800ac84:	9209      	str	r2, [sp, #36]	; 0x24
 800ac86:	f89a 3000 	ldrb.w	r3, [sl]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f000 80a2 	beq.w	800add4 <_svfiprintf_r+0x1c8>
 800ac90:	2300      	movs	r3, #0
 800ac92:	f04f 32ff 	mov.w	r2, #4294967295
 800ac96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac9a:	f10a 0a01 	add.w	sl, sl, #1
 800ac9e:	9304      	str	r3, [sp, #16]
 800aca0:	9307      	str	r3, [sp, #28]
 800aca2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aca6:	931a      	str	r3, [sp, #104]	; 0x68
 800aca8:	4654      	mov	r4, sl
 800acaa:	2205      	movs	r2, #5
 800acac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb0:	4851      	ldr	r0, [pc, #324]	; (800adf8 <_svfiprintf_r+0x1ec>)
 800acb2:	f7f5 faad 	bl	8000210 <memchr>
 800acb6:	9a04      	ldr	r2, [sp, #16]
 800acb8:	b9d8      	cbnz	r0, 800acf2 <_svfiprintf_r+0xe6>
 800acba:	06d0      	lsls	r0, r2, #27
 800acbc:	bf44      	itt	mi
 800acbe:	2320      	movmi	r3, #32
 800acc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acc4:	0711      	lsls	r1, r2, #28
 800acc6:	bf44      	itt	mi
 800acc8:	232b      	movmi	r3, #43	; 0x2b
 800acca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acce:	f89a 3000 	ldrb.w	r3, [sl]
 800acd2:	2b2a      	cmp	r3, #42	; 0x2a
 800acd4:	d015      	beq.n	800ad02 <_svfiprintf_r+0xf6>
 800acd6:	9a07      	ldr	r2, [sp, #28]
 800acd8:	4654      	mov	r4, sl
 800acda:	2000      	movs	r0, #0
 800acdc:	f04f 0c0a 	mov.w	ip, #10
 800ace0:	4621      	mov	r1, r4
 800ace2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ace6:	3b30      	subs	r3, #48	; 0x30
 800ace8:	2b09      	cmp	r3, #9
 800acea:	d94e      	bls.n	800ad8a <_svfiprintf_r+0x17e>
 800acec:	b1b0      	cbz	r0, 800ad1c <_svfiprintf_r+0x110>
 800acee:	9207      	str	r2, [sp, #28]
 800acf0:	e014      	b.n	800ad1c <_svfiprintf_r+0x110>
 800acf2:	eba0 0308 	sub.w	r3, r0, r8
 800acf6:	fa09 f303 	lsl.w	r3, r9, r3
 800acfa:	4313      	orrs	r3, r2
 800acfc:	9304      	str	r3, [sp, #16]
 800acfe:	46a2      	mov	sl, r4
 800ad00:	e7d2      	b.n	800aca8 <_svfiprintf_r+0x9c>
 800ad02:	9b03      	ldr	r3, [sp, #12]
 800ad04:	1d19      	adds	r1, r3, #4
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	9103      	str	r1, [sp, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	bfbb      	ittet	lt
 800ad0e:	425b      	neglt	r3, r3
 800ad10:	f042 0202 	orrlt.w	r2, r2, #2
 800ad14:	9307      	strge	r3, [sp, #28]
 800ad16:	9307      	strlt	r3, [sp, #28]
 800ad18:	bfb8      	it	lt
 800ad1a:	9204      	strlt	r2, [sp, #16]
 800ad1c:	7823      	ldrb	r3, [r4, #0]
 800ad1e:	2b2e      	cmp	r3, #46	; 0x2e
 800ad20:	d10c      	bne.n	800ad3c <_svfiprintf_r+0x130>
 800ad22:	7863      	ldrb	r3, [r4, #1]
 800ad24:	2b2a      	cmp	r3, #42	; 0x2a
 800ad26:	d135      	bne.n	800ad94 <_svfiprintf_r+0x188>
 800ad28:	9b03      	ldr	r3, [sp, #12]
 800ad2a:	1d1a      	adds	r2, r3, #4
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	9203      	str	r2, [sp, #12]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	bfb8      	it	lt
 800ad34:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad38:	3402      	adds	r4, #2
 800ad3a:	9305      	str	r3, [sp, #20]
 800ad3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae08 <_svfiprintf_r+0x1fc>
 800ad40:	7821      	ldrb	r1, [r4, #0]
 800ad42:	2203      	movs	r2, #3
 800ad44:	4650      	mov	r0, sl
 800ad46:	f7f5 fa63 	bl	8000210 <memchr>
 800ad4a:	b140      	cbz	r0, 800ad5e <_svfiprintf_r+0x152>
 800ad4c:	2340      	movs	r3, #64	; 0x40
 800ad4e:	eba0 000a 	sub.w	r0, r0, sl
 800ad52:	fa03 f000 	lsl.w	r0, r3, r0
 800ad56:	9b04      	ldr	r3, [sp, #16]
 800ad58:	4303      	orrs	r3, r0
 800ad5a:	3401      	adds	r4, #1
 800ad5c:	9304      	str	r3, [sp, #16]
 800ad5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad62:	4826      	ldr	r0, [pc, #152]	; (800adfc <_svfiprintf_r+0x1f0>)
 800ad64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad68:	2206      	movs	r2, #6
 800ad6a:	f7f5 fa51 	bl	8000210 <memchr>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d038      	beq.n	800ade4 <_svfiprintf_r+0x1d8>
 800ad72:	4b23      	ldr	r3, [pc, #140]	; (800ae00 <_svfiprintf_r+0x1f4>)
 800ad74:	bb1b      	cbnz	r3, 800adbe <_svfiprintf_r+0x1b2>
 800ad76:	9b03      	ldr	r3, [sp, #12]
 800ad78:	3307      	adds	r3, #7
 800ad7a:	f023 0307 	bic.w	r3, r3, #7
 800ad7e:	3308      	adds	r3, #8
 800ad80:	9303      	str	r3, [sp, #12]
 800ad82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad84:	4433      	add	r3, r6
 800ad86:	9309      	str	r3, [sp, #36]	; 0x24
 800ad88:	e767      	b.n	800ac5a <_svfiprintf_r+0x4e>
 800ad8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad8e:	460c      	mov	r4, r1
 800ad90:	2001      	movs	r0, #1
 800ad92:	e7a5      	b.n	800ace0 <_svfiprintf_r+0xd4>
 800ad94:	2300      	movs	r3, #0
 800ad96:	3401      	adds	r4, #1
 800ad98:	9305      	str	r3, [sp, #20]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	f04f 0c0a 	mov.w	ip, #10
 800ada0:	4620      	mov	r0, r4
 800ada2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ada6:	3a30      	subs	r2, #48	; 0x30
 800ada8:	2a09      	cmp	r2, #9
 800adaa:	d903      	bls.n	800adb4 <_svfiprintf_r+0x1a8>
 800adac:	2b00      	cmp	r3, #0
 800adae:	d0c5      	beq.n	800ad3c <_svfiprintf_r+0x130>
 800adb0:	9105      	str	r1, [sp, #20]
 800adb2:	e7c3      	b.n	800ad3c <_svfiprintf_r+0x130>
 800adb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800adb8:	4604      	mov	r4, r0
 800adba:	2301      	movs	r3, #1
 800adbc:	e7f0      	b.n	800ada0 <_svfiprintf_r+0x194>
 800adbe:	ab03      	add	r3, sp, #12
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	462a      	mov	r2, r5
 800adc4:	4b0f      	ldr	r3, [pc, #60]	; (800ae04 <_svfiprintf_r+0x1f8>)
 800adc6:	a904      	add	r1, sp, #16
 800adc8:	4638      	mov	r0, r7
 800adca:	f7fe f859 	bl	8008e80 <_printf_float>
 800adce:	1c42      	adds	r2, r0, #1
 800add0:	4606      	mov	r6, r0
 800add2:	d1d6      	bne.n	800ad82 <_svfiprintf_r+0x176>
 800add4:	89ab      	ldrh	r3, [r5, #12]
 800add6:	065b      	lsls	r3, r3, #25
 800add8:	f53f af2c 	bmi.w	800ac34 <_svfiprintf_r+0x28>
 800addc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adde:	b01d      	add	sp, #116	; 0x74
 800ade0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade4:	ab03      	add	r3, sp, #12
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	462a      	mov	r2, r5
 800adea:	4b06      	ldr	r3, [pc, #24]	; (800ae04 <_svfiprintf_r+0x1f8>)
 800adec:	a904      	add	r1, sp, #16
 800adee:	4638      	mov	r0, r7
 800adf0:	f7fe faea 	bl	80093c8 <_printf_i>
 800adf4:	e7eb      	b.n	800adce <_svfiprintf_r+0x1c2>
 800adf6:	bf00      	nop
 800adf8:	0800d28c 	.word	0x0800d28c
 800adfc:	0800d296 	.word	0x0800d296
 800ae00:	08008e81 	.word	0x08008e81
 800ae04:	0800ab57 	.word	0x0800ab57
 800ae08:	0800d292 	.word	0x0800d292

0800ae0c <__assert_func>:
 800ae0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae0e:	4614      	mov	r4, r2
 800ae10:	461a      	mov	r2, r3
 800ae12:	4b09      	ldr	r3, [pc, #36]	; (800ae38 <__assert_func+0x2c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4605      	mov	r5, r0
 800ae18:	68d8      	ldr	r0, [r3, #12]
 800ae1a:	b14c      	cbz	r4, 800ae30 <__assert_func+0x24>
 800ae1c:	4b07      	ldr	r3, [pc, #28]	; (800ae3c <__assert_func+0x30>)
 800ae1e:	9100      	str	r1, [sp, #0]
 800ae20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae24:	4906      	ldr	r1, [pc, #24]	; (800ae40 <__assert_func+0x34>)
 800ae26:	462b      	mov	r3, r5
 800ae28:	f000 f80e 	bl	800ae48 <fiprintf>
 800ae2c:	f000 fa7c 	bl	800b328 <abort>
 800ae30:	4b04      	ldr	r3, [pc, #16]	; (800ae44 <__assert_func+0x38>)
 800ae32:	461c      	mov	r4, r3
 800ae34:	e7f3      	b.n	800ae1e <__assert_func+0x12>
 800ae36:	bf00      	nop
 800ae38:	200005fc 	.word	0x200005fc
 800ae3c:	0800d29d 	.word	0x0800d29d
 800ae40:	0800d2aa 	.word	0x0800d2aa
 800ae44:	0800d2d8 	.word	0x0800d2d8

0800ae48 <fiprintf>:
 800ae48:	b40e      	push	{r1, r2, r3}
 800ae4a:	b503      	push	{r0, r1, lr}
 800ae4c:	4601      	mov	r1, r0
 800ae4e:	ab03      	add	r3, sp, #12
 800ae50:	4805      	ldr	r0, [pc, #20]	; (800ae68 <fiprintf+0x20>)
 800ae52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae56:	6800      	ldr	r0, [r0, #0]
 800ae58:	9301      	str	r3, [sp, #4]
 800ae5a:	f000 f867 	bl	800af2c <_vfiprintf_r>
 800ae5e:	b002      	add	sp, #8
 800ae60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae64:	b003      	add	sp, #12
 800ae66:	4770      	bx	lr
 800ae68:	200005fc 	.word	0x200005fc

0800ae6c <__retarget_lock_init_recursive>:
 800ae6c:	4770      	bx	lr

0800ae6e <__retarget_lock_acquire_recursive>:
 800ae6e:	4770      	bx	lr

0800ae70 <__retarget_lock_release_recursive>:
 800ae70:	4770      	bx	lr

0800ae72 <__ascii_mbtowc>:
 800ae72:	b082      	sub	sp, #8
 800ae74:	b901      	cbnz	r1, 800ae78 <__ascii_mbtowc+0x6>
 800ae76:	a901      	add	r1, sp, #4
 800ae78:	b142      	cbz	r2, 800ae8c <__ascii_mbtowc+0x1a>
 800ae7a:	b14b      	cbz	r3, 800ae90 <__ascii_mbtowc+0x1e>
 800ae7c:	7813      	ldrb	r3, [r2, #0]
 800ae7e:	600b      	str	r3, [r1, #0]
 800ae80:	7812      	ldrb	r2, [r2, #0]
 800ae82:	1e10      	subs	r0, r2, #0
 800ae84:	bf18      	it	ne
 800ae86:	2001      	movne	r0, #1
 800ae88:	b002      	add	sp, #8
 800ae8a:	4770      	bx	lr
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	e7fb      	b.n	800ae88 <__ascii_mbtowc+0x16>
 800ae90:	f06f 0001 	mvn.w	r0, #1
 800ae94:	e7f8      	b.n	800ae88 <__ascii_mbtowc+0x16>

0800ae96 <memmove>:
 800ae96:	4288      	cmp	r0, r1
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	eb01 0402 	add.w	r4, r1, r2
 800ae9e:	d902      	bls.n	800aea6 <memmove+0x10>
 800aea0:	4284      	cmp	r4, r0
 800aea2:	4623      	mov	r3, r4
 800aea4:	d807      	bhi.n	800aeb6 <memmove+0x20>
 800aea6:	1e43      	subs	r3, r0, #1
 800aea8:	42a1      	cmp	r1, r4
 800aeaa:	d008      	beq.n	800aebe <memmove+0x28>
 800aeac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeb4:	e7f8      	b.n	800aea8 <memmove+0x12>
 800aeb6:	4402      	add	r2, r0
 800aeb8:	4601      	mov	r1, r0
 800aeba:	428a      	cmp	r2, r1
 800aebc:	d100      	bne.n	800aec0 <memmove+0x2a>
 800aebe:	bd10      	pop	{r4, pc}
 800aec0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aec4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aec8:	e7f7      	b.n	800aeba <memmove+0x24>

0800aeca <_malloc_usable_size_r>:
 800aeca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aece:	1f18      	subs	r0, r3, #4
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	bfbc      	itt	lt
 800aed4:	580b      	ldrlt	r3, [r1, r0]
 800aed6:	18c0      	addlt	r0, r0, r3
 800aed8:	4770      	bx	lr

0800aeda <__sfputc_r>:
 800aeda:	6893      	ldr	r3, [r2, #8]
 800aedc:	3b01      	subs	r3, #1
 800aede:	2b00      	cmp	r3, #0
 800aee0:	b410      	push	{r4}
 800aee2:	6093      	str	r3, [r2, #8]
 800aee4:	da08      	bge.n	800aef8 <__sfputc_r+0x1e>
 800aee6:	6994      	ldr	r4, [r2, #24]
 800aee8:	42a3      	cmp	r3, r4
 800aeea:	db01      	blt.n	800aef0 <__sfputc_r+0x16>
 800aeec:	290a      	cmp	r1, #10
 800aeee:	d103      	bne.n	800aef8 <__sfputc_r+0x1e>
 800aef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aef4:	f000 b94a 	b.w	800b18c <__swbuf_r>
 800aef8:	6813      	ldr	r3, [r2, #0]
 800aefa:	1c58      	adds	r0, r3, #1
 800aefc:	6010      	str	r0, [r2, #0]
 800aefe:	7019      	strb	r1, [r3, #0]
 800af00:	4608      	mov	r0, r1
 800af02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <__sfputs_r>:
 800af08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0a:	4606      	mov	r6, r0
 800af0c:	460f      	mov	r7, r1
 800af0e:	4614      	mov	r4, r2
 800af10:	18d5      	adds	r5, r2, r3
 800af12:	42ac      	cmp	r4, r5
 800af14:	d101      	bne.n	800af1a <__sfputs_r+0x12>
 800af16:	2000      	movs	r0, #0
 800af18:	e007      	b.n	800af2a <__sfputs_r+0x22>
 800af1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1e:	463a      	mov	r2, r7
 800af20:	4630      	mov	r0, r6
 800af22:	f7ff ffda 	bl	800aeda <__sfputc_r>
 800af26:	1c43      	adds	r3, r0, #1
 800af28:	d1f3      	bne.n	800af12 <__sfputs_r+0xa>
 800af2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af2c <_vfiprintf_r>:
 800af2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af30:	460d      	mov	r5, r1
 800af32:	b09d      	sub	sp, #116	; 0x74
 800af34:	4614      	mov	r4, r2
 800af36:	4698      	mov	r8, r3
 800af38:	4606      	mov	r6, r0
 800af3a:	b118      	cbz	r0, 800af44 <_vfiprintf_r+0x18>
 800af3c:	6983      	ldr	r3, [r0, #24]
 800af3e:	b90b      	cbnz	r3, 800af44 <_vfiprintf_r+0x18>
 800af40:	f000 fb14 	bl	800b56c <__sinit>
 800af44:	4b89      	ldr	r3, [pc, #548]	; (800b16c <_vfiprintf_r+0x240>)
 800af46:	429d      	cmp	r5, r3
 800af48:	d11b      	bne.n	800af82 <_vfiprintf_r+0x56>
 800af4a:	6875      	ldr	r5, [r6, #4]
 800af4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af4e:	07d9      	lsls	r1, r3, #31
 800af50:	d405      	bmi.n	800af5e <_vfiprintf_r+0x32>
 800af52:	89ab      	ldrh	r3, [r5, #12]
 800af54:	059a      	lsls	r2, r3, #22
 800af56:	d402      	bmi.n	800af5e <_vfiprintf_r+0x32>
 800af58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af5a:	f7ff ff88 	bl	800ae6e <__retarget_lock_acquire_recursive>
 800af5e:	89ab      	ldrh	r3, [r5, #12]
 800af60:	071b      	lsls	r3, r3, #28
 800af62:	d501      	bpl.n	800af68 <_vfiprintf_r+0x3c>
 800af64:	692b      	ldr	r3, [r5, #16]
 800af66:	b9eb      	cbnz	r3, 800afa4 <_vfiprintf_r+0x78>
 800af68:	4629      	mov	r1, r5
 800af6a:	4630      	mov	r0, r6
 800af6c:	f000 f96e 	bl	800b24c <__swsetup_r>
 800af70:	b1c0      	cbz	r0, 800afa4 <_vfiprintf_r+0x78>
 800af72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af74:	07dc      	lsls	r4, r3, #31
 800af76:	d50e      	bpl.n	800af96 <_vfiprintf_r+0x6a>
 800af78:	f04f 30ff 	mov.w	r0, #4294967295
 800af7c:	b01d      	add	sp, #116	; 0x74
 800af7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af82:	4b7b      	ldr	r3, [pc, #492]	; (800b170 <_vfiprintf_r+0x244>)
 800af84:	429d      	cmp	r5, r3
 800af86:	d101      	bne.n	800af8c <_vfiprintf_r+0x60>
 800af88:	68b5      	ldr	r5, [r6, #8]
 800af8a:	e7df      	b.n	800af4c <_vfiprintf_r+0x20>
 800af8c:	4b79      	ldr	r3, [pc, #484]	; (800b174 <_vfiprintf_r+0x248>)
 800af8e:	429d      	cmp	r5, r3
 800af90:	bf08      	it	eq
 800af92:	68f5      	ldreq	r5, [r6, #12]
 800af94:	e7da      	b.n	800af4c <_vfiprintf_r+0x20>
 800af96:	89ab      	ldrh	r3, [r5, #12]
 800af98:	0598      	lsls	r0, r3, #22
 800af9a:	d4ed      	bmi.n	800af78 <_vfiprintf_r+0x4c>
 800af9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af9e:	f7ff ff67 	bl	800ae70 <__retarget_lock_release_recursive>
 800afa2:	e7e9      	b.n	800af78 <_vfiprintf_r+0x4c>
 800afa4:	2300      	movs	r3, #0
 800afa6:	9309      	str	r3, [sp, #36]	; 0x24
 800afa8:	2320      	movs	r3, #32
 800afaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afae:	f8cd 800c 	str.w	r8, [sp, #12]
 800afb2:	2330      	movs	r3, #48	; 0x30
 800afb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b178 <_vfiprintf_r+0x24c>
 800afb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afbc:	f04f 0901 	mov.w	r9, #1
 800afc0:	4623      	mov	r3, r4
 800afc2:	469a      	mov	sl, r3
 800afc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afc8:	b10a      	cbz	r2, 800afce <_vfiprintf_r+0xa2>
 800afca:	2a25      	cmp	r2, #37	; 0x25
 800afcc:	d1f9      	bne.n	800afc2 <_vfiprintf_r+0x96>
 800afce:	ebba 0b04 	subs.w	fp, sl, r4
 800afd2:	d00b      	beq.n	800afec <_vfiprintf_r+0xc0>
 800afd4:	465b      	mov	r3, fp
 800afd6:	4622      	mov	r2, r4
 800afd8:	4629      	mov	r1, r5
 800afda:	4630      	mov	r0, r6
 800afdc:	f7ff ff94 	bl	800af08 <__sfputs_r>
 800afe0:	3001      	adds	r0, #1
 800afe2:	f000 80aa 	beq.w	800b13a <_vfiprintf_r+0x20e>
 800afe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afe8:	445a      	add	r2, fp
 800afea:	9209      	str	r2, [sp, #36]	; 0x24
 800afec:	f89a 3000 	ldrb.w	r3, [sl]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 80a2 	beq.w	800b13a <_vfiprintf_r+0x20e>
 800aff6:	2300      	movs	r3, #0
 800aff8:	f04f 32ff 	mov.w	r2, #4294967295
 800affc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b000:	f10a 0a01 	add.w	sl, sl, #1
 800b004:	9304      	str	r3, [sp, #16]
 800b006:	9307      	str	r3, [sp, #28]
 800b008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b00c:	931a      	str	r3, [sp, #104]	; 0x68
 800b00e:	4654      	mov	r4, sl
 800b010:	2205      	movs	r2, #5
 800b012:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b016:	4858      	ldr	r0, [pc, #352]	; (800b178 <_vfiprintf_r+0x24c>)
 800b018:	f7f5 f8fa 	bl	8000210 <memchr>
 800b01c:	9a04      	ldr	r2, [sp, #16]
 800b01e:	b9d8      	cbnz	r0, 800b058 <_vfiprintf_r+0x12c>
 800b020:	06d1      	lsls	r1, r2, #27
 800b022:	bf44      	itt	mi
 800b024:	2320      	movmi	r3, #32
 800b026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b02a:	0713      	lsls	r3, r2, #28
 800b02c:	bf44      	itt	mi
 800b02e:	232b      	movmi	r3, #43	; 0x2b
 800b030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b034:	f89a 3000 	ldrb.w	r3, [sl]
 800b038:	2b2a      	cmp	r3, #42	; 0x2a
 800b03a:	d015      	beq.n	800b068 <_vfiprintf_r+0x13c>
 800b03c:	9a07      	ldr	r2, [sp, #28]
 800b03e:	4654      	mov	r4, sl
 800b040:	2000      	movs	r0, #0
 800b042:	f04f 0c0a 	mov.w	ip, #10
 800b046:	4621      	mov	r1, r4
 800b048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b04c:	3b30      	subs	r3, #48	; 0x30
 800b04e:	2b09      	cmp	r3, #9
 800b050:	d94e      	bls.n	800b0f0 <_vfiprintf_r+0x1c4>
 800b052:	b1b0      	cbz	r0, 800b082 <_vfiprintf_r+0x156>
 800b054:	9207      	str	r2, [sp, #28]
 800b056:	e014      	b.n	800b082 <_vfiprintf_r+0x156>
 800b058:	eba0 0308 	sub.w	r3, r0, r8
 800b05c:	fa09 f303 	lsl.w	r3, r9, r3
 800b060:	4313      	orrs	r3, r2
 800b062:	9304      	str	r3, [sp, #16]
 800b064:	46a2      	mov	sl, r4
 800b066:	e7d2      	b.n	800b00e <_vfiprintf_r+0xe2>
 800b068:	9b03      	ldr	r3, [sp, #12]
 800b06a:	1d19      	adds	r1, r3, #4
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	9103      	str	r1, [sp, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	bfbb      	ittet	lt
 800b074:	425b      	neglt	r3, r3
 800b076:	f042 0202 	orrlt.w	r2, r2, #2
 800b07a:	9307      	strge	r3, [sp, #28]
 800b07c:	9307      	strlt	r3, [sp, #28]
 800b07e:	bfb8      	it	lt
 800b080:	9204      	strlt	r2, [sp, #16]
 800b082:	7823      	ldrb	r3, [r4, #0]
 800b084:	2b2e      	cmp	r3, #46	; 0x2e
 800b086:	d10c      	bne.n	800b0a2 <_vfiprintf_r+0x176>
 800b088:	7863      	ldrb	r3, [r4, #1]
 800b08a:	2b2a      	cmp	r3, #42	; 0x2a
 800b08c:	d135      	bne.n	800b0fa <_vfiprintf_r+0x1ce>
 800b08e:	9b03      	ldr	r3, [sp, #12]
 800b090:	1d1a      	adds	r2, r3, #4
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	9203      	str	r2, [sp, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	bfb8      	it	lt
 800b09a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b09e:	3402      	adds	r4, #2
 800b0a0:	9305      	str	r3, [sp, #20]
 800b0a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b188 <_vfiprintf_r+0x25c>
 800b0a6:	7821      	ldrb	r1, [r4, #0]
 800b0a8:	2203      	movs	r2, #3
 800b0aa:	4650      	mov	r0, sl
 800b0ac:	f7f5 f8b0 	bl	8000210 <memchr>
 800b0b0:	b140      	cbz	r0, 800b0c4 <_vfiprintf_r+0x198>
 800b0b2:	2340      	movs	r3, #64	; 0x40
 800b0b4:	eba0 000a 	sub.w	r0, r0, sl
 800b0b8:	fa03 f000 	lsl.w	r0, r3, r0
 800b0bc:	9b04      	ldr	r3, [sp, #16]
 800b0be:	4303      	orrs	r3, r0
 800b0c0:	3401      	adds	r4, #1
 800b0c2:	9304      	str	r3, [sp, #16]
 800b0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c8:	482c      	ldr	r0, [pc, #176]	; (800b17c <_vfiprintf_r+0x250>)
 800b0ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0ce:	2206      	movs	r2, #6
 800b0d0:	f7f5 f89e 	bl	8000210 <memchr>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d03f      	beq.n	800b158 <_vfiprintf_r+0x22c>
 800b0d8:	4b29      	ldr	r3, [pc, #164]	; (800b180 <_vfiprintf_r+0x254>)
 800b0da:	bb1b      	cbnz	r3, 800b124 <_vfiprintf_r+0x1f8>
 800b0dc:	9b03      	ldr	r3, [sp, #12]
 800b0de:	3307      	adds	r3, #7
 800b0e0:	f023 0307 	bic.w	r3, r3, #7
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	9303      	str	r3, [sp, #12]
 800b0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ea:	443b      	add	r3, r7
 800b0ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ee:	e767      	b.n	800afc0 <_vfiprintf_r+0x94>
 800b0f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	e7a5      	b.n	800b046 <_vfiprintf_r+0x11a>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	3401      	adds	r4, #1
 800b0fe:	9305      	str	r3, [sp, #20]
 800b100:	4619      	mov	r1, r3
 800b102:	f04f 0c0a 	mov.w	ip, #10
 800b106:	4620      	mov	r0, r4
 800b108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b10c:	3a30      	subs	r2, #48	; 0x30
 800b10e:	2a09      	cmp	r2, #9
 800b110:	d903      	bls.n	800b11a <_vfiprintf_r+0x1ee>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0c5      	beq.n	800b0a2 <_vfiprintf_r+0x176>
 800b116:	9105      	str	r1, [sp, #20]
 800b118:	e7c3      	b.n	800b0a2 <_vfiprintf_r+0x176>
 800b11a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b11e:	4604      	mov	r4, r0
 800b120:	2301      	movs	r3, #1
 800b122:	e7f0      	b.n	800b106 <_vfiprintf_r+0x1da>
 800b124:	ab03      	add	r3, sp, #12
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	462a      	mov	r2, r5
 800b12a:	4b16      	ldr	r3, [pc, #88]	; (800b184 <_vfiprintf_r+0x258>)
 800b12c:	a904      	add	r1, sp, #16
 800b12e:	4630      	mov	r0, r6
 800b130:	f7fd fea6 	bl	8008e80 <_printf_float>
 800b134:	4607      	mov	r7, r0
 800b136:	1c78      	adds	r0, r7, #1
 800b138:	d1d6      	bne.n	800b0e8 <_vfiprintf_r+0x1bc>
 800b13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b13c:	07d9      	lsls	r1, r3, #31
 800b13e:	d405      	bmi.n	800b14c <_vfiprintf_r+0x220>
 800b140:	89ab      	ldrh	r3, [r5, #12]
 800b142:	059a      	lsls	r2, r3, #22
 800b144:	d402      	bmi.n	800b14c <_vfiprintf_r+0x220>
 800b146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b148:	f7ff fe92 	bl	800ae70 <__retarget_lock_release_recursive>
 800b14c:	89ab      	ldrh	r3, [r5, #12]
 800b14e:	065b      	lsls	r3, r3, #25
 800b150:	f53f af12 	bmi.w	800af78 <_vfiprintf_r+0x4c>
 800b154:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b156:	e711      	b.n	800af7c <_vfiprintf_r+0x50>
 800b158:	ab03      	add	r3, sp, #12
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	462a      	mov	r2, r5
 800b15e:	4b09      	ldr	r3, [pc, #36]	; (800b184 <_vfiprintf_r+0x258>)
 800b160:	a904      	add	r1, sp, #16
 800b162:	4630      	mov	r0, r6
 800b164:	f7fe f930 	bl	80093c8 <_printf_i>
 800b168:	e7e4      	b.n	800b134 <_vfiprintf_r+0x208>
 800b16a:	bf00      	nop
 800b16c:	0800d404 	.word	0x0800d404
 800b170:	0800d424 	.word	0x0800d424
 800b174:	0800d3e4 	.word	0x0800d3e4
 800b178:	0800d28c 	.word	0x0800d28c
 800b17c:	0800d296 	.word	0x0800d296
 800b180:	08008e81 	.word	0x08008e81
 800b184:	0800af09 	.word	0x0800af09
 800b188:	0800d292 	.word	0x0800d292

0800b18c <__swbuf_r>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	460e      	mov	r6, r1
 800b190:	4614      	mov	r4, r2
 800b192:	4605      	mov	r5, r0
 800b194:	b118      	cbz	r0, 800b19e <__swbuf_r+0x12>
 800b196:	6983      	ldr	r3, [r0, #24]
 800b198:	b90b      	cbnz	r3, 800b19e <__swbuf_r+0x12>
 800b19a:	f000 f9e7 	bl	800b56c <__sinit>
 800b19e:	4b21      	ldr	r3, [pc, #132]	; (800b224 <__swbuf_r+0x98>)
 800b1a0:	429c      	cmp	r4, r3
 800b1a2:	d12b      	bne.n	800b1fc <__swbuf_r+0x70>
 800b1a4:	686c      	ldr	r4, [r5, #4]
 800b1a6:	69a3      	ldr	r3, [r4, #24]
 800b1a8:	60a3      	str	r3, [r4, #8]
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	071a      	lsls	r2, r3, #28
 800b1ae:	d52f      	bpl.n	800b210 <__swbuf_r+0x84>
 800b1b0:	6923      	ldr	r3, [r4, #16]
 800b1b2:	b36b      	cbz	r3, 800b210 <__swbuf_r+0x84>
 800b1b4:	6923      	ldr	r3, [r4, #16]
 800b1b6:	6820      	ldr	r0, [r4, #0]
 800b1b8:	1ac0      	subs	r0, r0, r3
 800b1ba:	6963      	ldr	r3, [r4, #20]
 800b1bc:	b2f6      	uxtb	r6, r6
 800b1be:	4283      	cmp	r3, r0
 800b1c0:	4637      	mov	r7, r6
 800b1c2:	dc04      	bgt.n	800b1ce <__swbuf_r+0x42>
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f000 f93c 	bl	800b444 <_fflush_r>
 800b1cc:	bb30      	cbnz	r0, 800b21c <__swbuf_r+0x90>
 800b1ce:	68a3      	ldr	r3, [r4, #8]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	60a3      	str	r3, [r4, #8]
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	6022      	str	r2, [r4, #0]
 800b1da:	701e      	strb	r6, [r3, #0]
 800b1dc:	6963      	ldr	r3, [r4, #20]
 800b1de:	3001      	adds	r0, #1
 800b1e0:	4283      	cmp	r3, r0
 800b1e2:	d004      	beq.n	800b1ee <__swbuf_r+0x62>
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	07db      	lsls	r3, r3, #31
 800b1e8:	d506      	bpl.n	800b1f8 <__swbuf_r+0x6c>
 800b1ea:	2e0a      	cmp	r6, #10
 800b1ec:	d104      	bne.n	800b1f8 <__swbuf_r+0x6c>
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f000 f927 	bl	800b444 <_fflush_r>
 800b1f6:	b988      	cbnz	r0, 800b21c <__swbuf_r+0x90>
 800b1f8:	4638      	mov	r0, r7
 800b1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	; (800b228 <__swbuf_r+0x9c>)
 800b1fe:	429c      	cmp	r4, r3
 800b200:	d101      	bne.n	800b206 <__swbuf_r+0x7a>
 800b202:	68ac      	ldr	r4, [r5, #8]
 800b204:	e7cf      	b.n	800b1a6 <__swbuf_r+0x1a>
 800b206:	4b09      	ldr	r3, [pc, #36]	; (800b22c <__swbuf_r+0xa0>)
 800b208:	429c      	cmp	r4, r3
 800b20a:	bf08      	it	eq
 800b20c:	68ec      	ldreq	r4, [r5, #12]
 800b20e:	e7ca      	b.n	800b1a6 <__swbuf_r+0x1a>
 800b210:	4621      	mov	r1, r4
 800b212:	4628      	mov	r0, r5
 800b214:	f000 f81a 	bl	800b24c <__swsetup_r>
 800b218:	2800      	cmp	r0, #0
 800b21a:	d0cb      	beq.n	800b1b4 <__swbuf_r+0x28>
 800b21c:	f04f 37ff 	mov.w	r7, #4294967295
 800b220:	e7ea      	b.n	800b1f8 <__swbuf_r+0x6c>
 800b222:	bf00      	nop
 800b224:	0800d404 	.word	0x0800d404
 800b228:	0800d424 	.word	0x0800d424
 800b22c:	0800d3e4 	.word	0x0800d3e4

0800b230 <__ascii_wctomb>:
 800b230:	b149      	cbz	r1, 800b246 <__ascii_wctomb+0x16>
 800b232:	2aff      	cmp	r2, #255	; 0xff
 800b234:	bf85      	ittet	hi
 800b236:	238a      	movhi	r3, #138	; 0x8a
 800b238:	6003      	strhi	r3, [r0, #0]
 800b23a:	700a      	strbls	r2, [r1, #0]
 800b23c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b240:	bf98      	it	ls
 800b242:	2001      	movls	r0, #1
 800b244:	4770      	bx	lr
 800b246:	4608      	mov	r0, r1
 800b248:	4770      	bx	lr
	...

0800b24c <__swsetup_r>:
 800b24c:	4b32      	ldr	r3, [pc, #200]	; (800b318 <__swsetup_r+0xcc>)
 800b24e:	b570      	push	{r4, r5, r6, lr}
 800b250:	681d      	ldr	r5, [r3, #0]
 800b252:	4606      	mov	r6, r0
 800b254:	460c      	mov	r4, r1
 800b256:	b125      	cbz	r5, 800b262 <__swsetup_r+0x16>
 800b258:	69ab      	ldr	r3, [r5, #24]
 800b25a:	b913      	cbnz	r3, 800b262 <__swsetup_r+0x16>
 800b25c:	4628      	mov	r0, r5
 800b25e:	f000 f985 	bl	800b56c <__sinit>
 800b262:	4b2e      	ldr	r3, [pc, #184]	; (800b31c <__swsetup_r+0xd0>)
 800b264:	429c      	cmp	r4, r3
 800b266:	d10f      	bne.n	800b288 <__swsetup_r+0x3c>
 800b268:	686c      	ldr	r4, [r5, #4]
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b270:	0719      	lsls	r1, r3, #28
 800b272:	d42c      	bmi.n	800b2ce <__swsetup_r+0x82>
 800b274:	06dd      	lsls	r5, r3, #27
 800b276:	d411      	bmi.n	800b29c <__swsetup_r+0x50>
 800b278:	2309      	movs	r3, #9
 800b27a:	6033      	str	r3, [r6, #0]
 800b27c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b280:	81a3      	strh	r3, [r4, #12]
 800b282:	f04f 30ff 	mov.w	r0, #4294967295
 800b286:	e03e      	b.n	800b306 <__swsetup_r+0xba>
 800b288:	4b25      	ldr	r3, [pc, #148]	; (800b320 <__swsetup_r+0xd4>)
 800b28a:	429c      	cmp	r4, r3
 800b28c:	d101      	bne.n	800b292 <__swsetup_r+0x46>
 800b28e:	68ac      	ldr	r4, [r5, #8]
 800b290:	e7eb      	b.n	800b26a <__swsetup_r+0x1e>
 800b292:	4b24      	ldr	r3, [pc, #144]	; (800b324 <__swsetup_r+0xd8>)
 800b294:	429c      	cmp	r4, r3
 800b296:	bf08      	it	eq
 800b298:	68ec      	ldreq	r4, [r5, #12]
 800b29a:	e7e6      	b.n	800b26a <__swsetup_r+0x1e>
 800b29c:	0758      	lsls	r0, r3, #29
 800b29e:	d512      	bpl.n	800b2c6 <__swsetup_r+0x7a>
 800b2a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2a2:	b141      	cbz	r1, 800b2b6 <__swsetup_r+0x6a>
 800b2a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2a8:	4299      	cmp	r1, r3
 800b2aa:	d002      	beq.n	800b2b2 <__swsetup_r+0x66>
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7fd fc9d 	bl	8008bec <_free_r>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	6363      	str	r3, [r4, #52]	; 0x34
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	2300      	movs	r3, #0
 800b2c0:	6063      	str	r3, [r4, #4]
 800b2c2:	6923      	ldr	r3, [r4, #16]
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	f043 0308 	orr.w	r3, r3, #8
 800b2cc:	81a3      	strh	r3, [r4, #12]
 800b2ce:	6923      	ldr	r3, [r4, #16]
 800b2d0:	b94b      	cbnz	r3, 800b2e6 <__swsetup_r+0x9a>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2dc:	d003      	beq.n	800b2e6 <__swsetup_r+0x9a>
 800b2de:	4621      	mov	r1, r4
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f000 fa05 	bl	800b6f0 <__smakebuf_r>
 800b2e6:	89a0      	ldrh	r0, [r4, #12]
 800b2e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2ec:	f010 0301 	ands.w	r3, r0, #1
 800b2f0:	d00a      	beq.n	800b308 <__swsetup_r+0xbc>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	60a3      	str	r3, [r4, #8]
 800b2f6:	6963      	ldr	r3, [r4, #20]
 800b2f8:	425b      	negs	r3, r3
 800b2fa:	61a3      	str	r3, [r4, #24]
 800b2fc:	6923      	ldr	r3, [r4, #16]
 800b2fe:	b943      	cbnz	r3, 800b312 <__swsetup_r+0xc6>
 800b300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b304:	d1ba      	bne.n	800b27c <__swsetup_r+0x30>
 800b306:	bd70      	pop	{r4, r5, r6, pc}
 800b308:	0781      	lsls	r1, r0, #30
 800b30a:	bf58      	it	pl
 800b30c:	6963      	ldrpl	r3, [r4, #20]
 800b30e:	60a3      	str	r3, [r4, #8]
 800b310:	e7f4      	b.n	800b2fc <__swsetup_r+0xb0>
 800b312:	2000      	movs	r0, #0
 800b314:	e7f7      	b.n	800b306 <__swsetup_r+0xba>
 800b316:	bf00      	nop
 800b318:	200005fc 	.word	0x200005fc
 800b31c:	0800d404 	.word	0x0800d404
 800b320:	0800d424 	.word	0x0800d424
 800b324:	0800d3e4 	.word	0x0800d3e4

0800b328 <abort>:
 800b328:	b508      	push	{r3, lr}
 800b32a:	2006      	movs	r0, #6
 800b32c:	f000 fa48 	bl	800b7c0 <raise>
 800b330:	2001      	movs	r0, #1
 800b332:	f7f7 f942 	bl	80025ba <_exit>
	...

0800b338 <__sflush_r>:
 800b338:	898a      	ldrh	r2, [r1, #12]
 800b33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b33e:	4605      	mov	r5, r0
 800b340:	0710      	lsls	r0, r2, #28
 800b342:	460c      	mov	r4, r1
 800b344:	d458      	bmi.n	800b3f8 <__sflush_r+0xc0>
 800b346:	684b      	ldr	r3, [r1, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	dc05      	bgt.n	800b358 <__sflush_r+0x20>
 800b34c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b34e:	2b00      	cmp	r3, #0
 800b350:	dc02      	bgt.n	800b358 <__sflush_r+0x20>
 800b352:	2000      	movs	r0, #0
 800b354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b35a:	2e00      	cmp	r6, #0
 800b35c:	d0f9      	beq.n	800b352 <__sflush_r+0x1a>
 800b35e:	2300      	movs	r3, #0
 800b360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b364:	682f      	ldr	r7, [r5, #0]
 800b366:	602b      	str	r3, [r5, #0]
 800b368:	d032      	beq.n	800b3d0 <__sflush_r+0x98>
 800b36a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	075a      	lsls	r2, r3, #29
 800b370:	d505      	bpl.n	800b37e <__sflush_r+0x46>
 800b372:	6863      	ldr	r3, [r4, #4]
 800b374:	1ac0      	subs	r0, r0, r3
 800b376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b378:	b10b      	cbz	r3, 800b37e <__sflush_r+0x46>
 800b37a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b37c:	1ac0      	subs	r0, r0, r3
 800b37e:	2300      	movs	r3, #0
 800b380:	4602      	mov	r2, r0
 800b382:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b384:	6a21      	ldr	r1, [r4, #32]
 800b386:	4628      	mov	r0, r5
 800b388:	47b0      	blx	r6
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	d106      	bne.n	800b39e <__sflush_r+0x66>
 800b390:	6829      	ldr	r1, [r5, #0]
 800b392:	291d      	cmp	r1, #29
 800b394:	d82c      	bhi.n	800b3f0 <__sflush_r+0xb8>
 800b396:	4a2a      	ldr	r2, [pc, #168]	; (800b440 <__sflush_r+0x108>)
 800b398:	40ca      	lsrs	r2, r1
 800b39a:	07d6      	lsls	r6, r2, #31
 800b39c:	d528      	bpl.n	800b3f0 <__sflush_r+0xb8>
 800b39e:	2200      	movs	r2, #0
 800b3a0:	6062      	str	r2, [r4, #4]
 800b3a2:	04d9      	lsls	r1, r3, #19
 800b3a4:	6922      	ldr	r2, [r4, #16]
 800b3a6:	6022      	str	r2, [r4, #0]
 800b3a8:	d504      	bpl.n	800b3b4 <__sflush_r+0x7c>
 800b3aa:	1c42      	adds	r2, r0, #1
 800b3ac:	d101      	bne.n	800b3b2 <__sflush_r+0x7a>
 800b3ae:	682b      	ldr	r3, [r5, #0]
 800b3b0:	b903      	cbnz	r3, 800b3b4 <__sflush_r+0x7c>
 800b3b2:	6560      	str	r0, [r4, #84]	; 0x54
 800b3b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3b6:	602f      	str	r7, [r5, #0]
 800b3b8:	2900      	cmp	r1, #0
 800b3ba:	d0ca      	beq.n	800b352 <__sflush_r+0x1a>
 800b3bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3c0:	4299      	cmp	r1, r3
 800b3c2:	d002      	beq.n	800b3ca <__sflush_r+0x92>
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f7fd fc11 	bl	8008bec <_free_r>
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	6360      	str	r0, [r4, #52]	; 0x34
 800b3ce:	e7c1      	b.n	800b354 <__sflush_r+0x1c>
 800b3d0:	6a21      	ldr	r1, [r4, #32]
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	47b0      	blx	r6
 800b3d8:	1c41      	adds	r1, r0, #1
 800b3da:	d1c7      	bne.n	800b36c <__sflush_r+0x34>
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0c4      	beq.n	800b36c <__sflush_r+0x34>
 800b3e2:	2b1d      	cmp	r3, #29
 800b3e4:	d001      	beq.n	800b3ea <__sflush_r+0xb2>
 800b3e6:	2b16      	cmp	r3, #22
 800b3e8:	d101      	bne.n	800b3ee <__sflush_r+0xb6>
 800b3ea:	602f      	str	r7, [r5, #0]
 800b3ec:	e7b1      	b.n	800b352 <__sflush_r+0x1a>
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3f4:	81a3      	strh	r3, [r4, #12]
 800b3f6:	e7ad      	b.n	800b354 <__sflush_r+0x1c>
 800b3f8:	690f      	ldr	r7, [r1, #16]
 800b3fa:	2f00      	cmp	r7, #0
 800b3fc:	d0a9      	beq.n	800b352 <__sflush_r+0x1a>
 800b3fe:	0793      	lsls	r3, r2, #30
 800b400:	680e      	ldr	r6, [r1, #0]
 800b402:	bf08      	it	eq
 800b404:	694b      	ldreq	r3, [r1, #20]
 800b406:	600f      	str	r7, [r1, #0]
 800b408:	bf18      	it	ne
 800b40a:	2300      	movne	r3, #0
 800b40c:	eba6 0807 	sub.w	r8, r6, r7
 800b410:	608b      	str	r3, [r1, #8]
 800b412:	f1b8 0f00 	cmp.w	r8, #0
 800b416:	dd9c      	ble.n	800b352 <__sflush_r+0x1a>
 800b418:	6a21      	ldr	r1, [r4, #32]
 800b41a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b41c:	4643      	mov	r3, r8
 800b41e:	463a      	mov	r2, r7
 800b420:	4628      	mov	r0, r5
 800b422:	47b0      	blx	r6
 800b424:	2800      	cmp	r0, #0
 800b426:	dc06      	bgt.n	800b436 <__sflush_r+0xfe>
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b42e:	81a3      	strh	r3, [r4, #12]
 800b430:	f04f 30ff 	mov.w	r0, #4294967295
 800b434:	e78e      	b.n	800b354 <__sflush_r+0x1c>
 800b436:	4407      	add	r7, r0
 800b438:	eba8 0800 	sub.w	r8, r8, r0
 800b43c:	e7e9      	b.n	800b412 <__sflush_r+0xda>
 800b43e:	bf00      	nop
 800b440:	20400001 	.word	0x20400001

0800b444 <_fflush_r>:
 800b444:	b538      	push	{r3, r4, r5, lr}
 800b446:	690b      	ldr	r3, [r1, #16]
 800b448:	4605      	mov	r5, r0
 800b44a:	460c      	mov	r4, r1
 800b44c:	b913      	cbnz	r3, 800b454 <_fflush_r+0x10>
 800b44e:	2500      	movs	r5, #0
 800b450:	4628      	mov	r0, r5
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	b118      	cbz	r0, 800b45e <_fflush_r+0x1a>
 800b456:	6983      	ldr	r3, [r0, #24]
 800b458:	b90b      	cbnz	r3, 800b45e <_fflush_r+0x1a>
 800b45a:	f000 f887 	bl	800b56c <__sinit>
 800b45e:	4b14      	ldr	r3, [pc, #80]	; (800b4b0 <_fflush_r+0x6c>)
 800b460:	429c      	cmp	r4, r3
 800b462:	d11b      	bne.n	800b49c <_fflush_r+0x58>
 800b464:	686c      	ldr	r4, [r5, #4]
 800b466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0ef      	beq.n	800b44e <_fflush_r+0xa>
 800b46e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b470:	07d0      	lsls	r0, r2, #31
 800b472:	d404      	bmi.n	800b47e <_fflush_r+0x3a>
 800b474:	0599      	lsls	r1, r3, #22
 800b476:	d402      	bmi.n	800b47e <_fflush_r+0x3a>
 800b478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b47a:	f7ff fcf8 	bl	800ae6e <__retarget_lock_acquire_recursive>
 800b47e:	4628      	mov	r0, r5
 800b480:	4621      	mov	r1, r4
 800b482:	f7ff ff59 	bl	800b338 <__sflush_r>
 800b486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b488:	07da      	lsls	r2, r3, #31
 800b48a:	4605      	mov	r5, r0
 800b48c:	d4e0      	bmi.n	800b450 <_fflush_r+0xc>
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	059b      	lsls	r3, r3, #22
 800b492:	d4dd      	bmi.n	800b450 <_fflush_r+0xc>
 800b494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b496:	f7ff fceb 	bl	800ae70 <__retarget_lock_release_recursive>
 800b49a:	e7d9      	b.n	800b450 <_fflush_r+0xc>
 800b49c:	4b05      	ldr	r3, [pc, #20]	; (800b4b4 <_fflush_r+0x70>)
 800b49e:	429c      	cmp	r4, r3
 800b4a0:	d101      	bne.n	800b4a6 <_fflush_r+0x62>
 800b4a2:	68ac      	ldr	r4, [r5, #8]
 800b4a4:	e7df      	b.n	800b466 <_fflush_r+0x22>
 800b4a6:	4b04      	ldr	r3, [pc, #16]	; (800b4b8 <_fflush_r+0x74>)
 800b4a8:	429c      	cmp	r4, r3
 800b4aa:	bf08      	it	eq
 800b4ac:	68ec      	ldreq	r4, [r5, #12]
 800b4ae:	e7da      	b.n	800b466 <_fflush_r+0x22>
 800b4b0:	0800d404 	.word	0x0800d404
 800b4b4:	0800d424 	.word	0x0800d424
 800b4b8:	0800d3e4 	.word	0x0800d3e4

0800b4bc <std>:
 800b4bc:	2300      	movs	r3, #0
 800b4be:	b510      	push	{r4, lr}
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	e9c0 3300 	strd	r3, r3, [r0]
 800b4c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4ca:	6083      	str	r3, [r0, #8]
 800b4cc:	8181      	strh	r1, [r0, #12]
 800b4ce:	6643      	str	r3, [r0, #100]	; 0x64
 800b4d0:	81c2      	strh	r2, [r0, #14]
 800b4d2:	6183      	str	r3, [r0, #24]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	2208      	movs	r2, #8
 800b4d8:	305c      	adds	r0, #92	; 0x5c
 800b4da:	f7fd fb7f 	bl	8008bdc <memset>
 800b4de:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <std+0x38>)
 800b4e0:	6263      	str	r3, [r4, #36]	; 0x24
 800b4e2:	4b05      	ldr	r3, [pc, #20]	; (800b4f8 <std+0x3c>)
 800b4e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4e6:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <std+0x40>)
 800b4e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4ea:	4b05      	ldr	r3, [pc, #20]	; (800b500 <std+0x44>)
 800b4ec:	6224      	str	r4, [r4, #32]
 800b4ee:	6323      	str	r3, [r4, #48]	; 0x30
 800b4f0:	bd10      	pop	{r4, pc}
 800b4f2:	bf00      	nop
 800b4f4:	0800b7f9 	.word	0x0800b7f9
 800b4f8:	0800b81b 	.word	0x0800b81b
 800b4fc:	0800b853 	.word	0x0800b853
 800b500:	0800b877 	.word	0x0800b877

0800b504 <_cleanup_r>:
 800b504:	4901      	ldr	r1, [pc, #4]	; (800b50c <_cleanup_r+0x8>)
 800b506:	f000 b8af 	b.w	800b668 <_fwalk_reent>
 800b50a:	bf00      	nop
 800b50c:	0800b445 	.word	0x0800b445

0800b510 <__sfmoreglue>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	1e4a      	subs	r2, r1, #1
 800b514:	2568      	movs	r5, #104	; 0x68
 800b516:	4355      	muls	r5, r2
 800b518:	460e      	mov	r6, r1
 800b51a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b51e:	f7fd fbb5 	bl	8008c8c <_malloc_r>
 800b522:	4604      	mov	r4, r0
 800b524:	b140      	cbz	r0, 800b538 <__sfmoreglue+0x28>
 800b526:	2100      	movs	r1, #0
 800b528:	e9c0 1600 	strd	r1, r6, [r0]
 800b52c:	300c      	adds	r0, #12
 800b52e:	60a0      	str	r0, [r4, #8]
 800b530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b534:	f7fd fb52 	bl	8008bdc <memset>
 800b538:	4620      	mov	r0, r4
 800b53a:	bd70      	pop	{r4, r5, r6, pc}

0800b53c <__sfp_lock_acquire>:
 800b53c:	4801      	ldr	r0, [pc, #4]	; (800b544 <__sfp_lock_acquire+0x8>)
 800b53e:	f7ff bc96 	b.w	800ae6e <__retarget_lock_acquire_recursive>
 800b542:	bf00      	nop
 800b544:	20000da8 	.word	0x20000da8

0800b548 <__sfp_lock_release>:
 800b548:	4801      	ldr	r0, [pc, #4]	; (800b550 <__sfp_lock_release+0x8>)
 800b54a:	f7ff bc91 	b.w	800ae70 <__retarget_lock_release_recursive>
 800b54e:	bf00      	nop
 800b550:	20000da8 	.word	0x20000da8

0800b554 <__sinit_lock_acquire>:
 800b554:	4801      	ldr	r0, [pc, #4]	; (800b55c <__sinit_lock_acquire+0x8>)
 800b556:	f7ff bc8a 	b.w	800ae6e <__retarget_lock_acquire_recursive>
 800b55a:	bf00      	nop
 800b55c:	20000da3 	.word	0x20000da3

0800b560 <__sinit_lock_release>:
 800b560:	4801      	ldr	r0, [pc, #4]	; (800b568 <__sinit_lock_release+0x8>)
 800b562:	f7ff bc85 	b.w	800ae70 <__retarget_lock_release_recursive>
 800b566:	bf00      	nop
 800b568:	20000da3 	.word	0x20000da3

0800b56c <__sinit>:
 800b56c:	b510      	push	{r4, lr}
 800b56e:	4604      	mov	r4, r0
 800b570:	f7ff fff0 	bl	800b554 <__sinit_lock_acquire>
 800b574:	69a3      	ldr	r3, [r4, #24]
 800b576:	b11b      	cbz	r3, 800b580 <__sinit+0x14>
 800b578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b57c:	f7ff bff0 	b.w	800b560 <__sinit_lock_release>
 800b580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b584:	6523      	str	r3, [r4, #80]	; 0x50
 800b586:	4b13      	ldr	r3, [pc, #76]	; (800b5d4 <__sinit+0x68>)
 800b588:	4a13      	ldr	r2, [pc, #76]	; (800b5d8 <__sinit+0x6c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b58e:	42a3      	cmp	r3, r4
 800b590:	bf04      	itt	eq
 800b592:	2301      	moveq	r3, #1
 800b594:	61a3      	streq	r3, [r4, #24]
 800b596:	4620      	mov	r0, r4
 800b598:	f000 f820 	bl	800b5dc <__sfp>
 800b59c:	6060      	str	r0, [r4, #4]
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 f81c 	bl	800b5dc <__sfp>
 800b5a4:	60a0      	str	r0, [r4, #8]
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f000 f818 	bl	800b5dc <__sfp>
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	60e0      	str	r0, [r4, #12]
 800b5b0:	2104      	movs	r1, #4
 800b5b2:	6860      	ldr	r0, [r4, #4]
 800b5b4:	f7ff ff82 	bl	800b4bc <std>
 800b5b8:	68a0      	ldr	r0, [r4, #8]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	2109      	movs	r1, #9
 800b5be:	f7ff ff7d 	bl	800b4bc <std>
 800b5c2:	68e0      	ldr	r0, [r4, #12]
 800b5c4:	2202      	movs	r2, #2
 800b5c6:	2112      	movs	r1, #18
 800b5c8:	f7ff ff78 	bl	800b4bc <std>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	61a3      	str	r3, [r4, #24]
 800b5d0:	e7d2      	b.n	800b578 <__sinit+0xc>
 800b5d2:	bf00      	nop
 800b5d4:	0800d064 	.word	0x0800d064
 800b5d8:	0800b505 	.word	0x0800b505

0800b5dc <__sfp>:
 800b5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5de:	4607      	mov	r7, r0
 800b5e0:	f7ff ffac 	bl	800b53c <__sfp_lock_acquire>
 800b5e4:	4b1e      	ldr	r3, [pc, #120]	; (800b660 <__sfp+0x84>)
 800b5e6:	681e      	ldr	r6, [r3, #0]
 800b5e8:	69b3      	ldr	r3, [r6, #24]
 800b5ea:	b913      	cbnz	r3, 800b5f2 <__sfp+0x16>
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7ff ffbd 	bl	800b56c <__sinit>
 800b5f2:	3648      	adds	r6, #72	; 0x48
 800b5f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	d503      	bpl.n	800b604 <__sfp+0x28>
 800b5fc:	6833      	ldr	r3, [r6, #0]
 800b5fe:	b30b      	cbz	r3, 800b644 <__sfp+0x68>
 800b600:	6836      	ldr	r6, [r6, #0]
 800b602:	e7f7      	b.n	800b5f4 <__sfp+0x18>
 800b604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b608:	b9d5      	cbnz	r5, 800b640 <__sfp+0x64>
 800b60a:	4b16      	ldr	r3, [pc, #88]	; (800b664 <__sfp+0x88>)
 800b60c:	60e3      	str	r3, [r4, #12]
 800b60e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b612:	6665      	str	r5, [r4, #100]	; 0x64
 800b614:	f7ff fc2a 	bl	800ae6c <__retarget_lock_init_recursive>
 800b618:	f7ff ff96 	bl	800b548 <__sfp_lock_release>
 800b61c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b620:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b624:	6025      	str	r5, [r4, #0]
 800b626:	61a5      	str	r5, [r4, #24]
 800b628:	2208      	movs	r2, #8
 800b62a:	4629      	mov	r1, r5
 800b62c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b630:	f7fd fad4 	bl	8008bdc <memset>
 800b634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b63c:	4620      	mov	r0, r4
 800b63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b640:	3468      	adds	r4, #104	; 0x68
 800b642:	e7d9      	b.n	800b5f8 <__sfp+0x1c>
 800b644:	2104      	movs	r1, #4
 800b646:	4638      	mov	r0, r7
 800b648:	f7ff ff62 	bl	800b510 <__sfmoreglue>
 800b64c:	4604      	mov	r4, r0
 800b64e:	6030      	str	r0, [r6, #0]
 800b650:	2800      	cmp	r0, #0
 800b652:	d1d5      	bne.n	800b600 <__sfp+0x24>
 800b654:	f7ff ff78 	bl	800b548 <__sfp_lock_release>
 800b658:	230c      	movs	r3, #12
 800b65a:	603b      	str	r3, [r7, #0]
 800b65c:	e7ee      	b.n	800b63c <__sfp+0x60>
 800b65e:	bf00      	nop
 800b660:	0800d064 	.word	0x0800d064
 800b664:	ffff0001 	.word	0xffff0001

0800b668 <_fwalk_reent>:
 800b668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b66c:	4606      	mov	r6, r0
 800b66e:	4688      	mov	r8, r1
 800b670:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b674:	2700      	movs	r7, #0
 800b676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b67a:	f1b9 0901 	subs.w	r9, r9, #1
 800b67e:	d505      	bpl.n	800b68c <_fwalk_reent+0x24>
 800b680:	6824      	ldr	r4, [r4, #0]
 800b682:	2c00      	cmp	r4, #0
 800b684:	d1f7      	bne.n	800b676 <_fwalk_reent+0xe>
 800b686:	4638      	mov	r0, r7
 800b688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b68c:	89ab      	ldrh	r3, [r5, #12]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d907      	bls.n	800b6a2 <_fwalk_reent+0x3a>
 800b692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b696:	3301      	adds	r3, #1
 800b698:	d003      	beq.n	800b6a2 <_fwalk_reent+0x3a>
 800b69a:	4629      	mov	r1, r5
 800b69c:	4630      	mov	r0, r6
 800b69e:	47c0      	blx	r8
 800b6a0:	4307      	orrs	r7, r0
 800b6a2:	3568      	adds	r5, #104	; 0x68
 800b6a4:	e7e9      	b.n	800b67a <_fwalk_reent+0x12>

0800b6a6 <__swhatbuf_r>:
 800b6a6:	b570      	push	{r4, r5, r6, lr}
 800b6a8:	460e      	mov	r6, r1
 800b6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ae:	2900      	cmp	r1, #0
 800b6b0:	b096      	sub	sp, #88	; 0x58
 800b6b2:	4614      	mov	r4, r2
 800b6b4:	461d      	mov	r5, r3
 800b6b6:	da07      	bge.n	800b6c8 <__swhatbuf_r+0x22>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	602b      	str	r3, [r5, #0]
 800b6bc:	89b3      	ldrh	r3, [r6, #12]
 800b6be:	061a      	lsls	r2, r3, #24
 800b6c0:	d410      	bmi.n	800b6e4 <__swhatbuf_r+0x3e>
 800b6c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6c6:	e00e      	b.n	800b6e6 <__swhatbuf_r+0x40>
 800b6c8:	466a      	mov	r2, sp
 800b6ca:	f000 f8fb 	bl	800b8c4 <_fstat_r>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	dbf2      	blt.n	800b6b8 <__swhatbuf_r+0x12>
 800b6d2:	9a01      	ldr	r2, [sp, #4]
 800b6d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6dc:	425a      	negs	r2, r3
 800b6de:	415a      	adcs	r2, r3
 800b6e0:	602a      	str	r2, [r5, #0]
 800b6e2:	e7ee      	b.n	800b6c2 <__swhatbuf_r+0x1c>
 800b6e4:	2340      	movs	r3, #64	; 0x40
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	b016      	add	sp, #88	; 0x58
 800b6ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b6f0 <__smakebuf_r>:
 800b6f0:	898b      	ldrh	r3, [r1, #12]
 800b6f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6f4:	079d      	lsls	r5, r3, #30
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	460c      	mov	r4, r1
 800b6fa:	d507      	bpl.n	800b70c <__smakebuf_r+0x1c>
 800b6fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	6123      	str	r3, [r4, #16]
 800b704:	2301      	movs	r3, #1
 800b706:	6163      	str	r3, [r4, #20]
 800b708:	b002      	add	sp, #8
 800b70a:	bd70      	pop	{r4, r5, r6, pc}
 800b70c:	ab01      	add	r3, sp, #4
 800b70e:	466a      	mov	r2, sp
 800b710:	f7ff ffc9 	bl	800b6a6 <__swhatbuf_r>
 800b714:	9900      	ldr	r1, [sp, #0]
 800b716:	4605      	mov	r5, r0
 800b718:	4630      	mov	r0, r6
 800b71a:	f7fd fab7 	bl	8008c8c <_malloc_r>
 800b71e:	b948      	cbnz	r0, 800b734 <__smakebuf_r+0x44>
 800b720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b724:	059a      	lsls	r2, r3, #22
 800b726:	d4ef      	bmi.n	800b708 <__smakebuf_r+0x18>
 800b728:	f023 0303 	bic.w	r3, r3, #3
 800b72c:	f043 0302 	orr.w	r3, r3, #2
 800b730:	81a3      	strh	r3, [r4, #12]
 800b732:	e7e3      	b.n	800b6fc <__smakebuf_r+0xc>
 800b734:	4b0d      	ldr	r3, [pc, #52]	; (800b76c <__smakebuf_r+0x7c>)
 800b736:	62b3      	str	r3, [r6, #40]	; 0x28
 800b738:	89a3      	ldrh	r3, [r4, #12]
 800b73a:	6020      	str	r0, [r4, #0]
 800b73c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b740:	81a3      	strh	r3, [r4, #12]
 800b742:	9b00      	ldr	r3, [sp, #0]
 800b744:	6163      	str	r3, [r4, #20]
 800b746:	9b01      	ldr	r3, [sp, #4]
 800b748:	6120      	str	r0, [r4, #16]
 800b74a:	b15b      	cbz	r3, 800b764 <__smakebuf_r+0x74>
 800b74c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b750:	4630      	mov	r0, r6
 800b752:	f000 f8c9 	bl	800b8e8 <_isatty_r>
 800b756:	b128      	cbz	r0, 800b764 <__smakebuf_r+0x74>
 800b758:	89a3      	ldrh	r3, [r4, #12]
 800b75a:	f023 0303 	bic.w	r3, r3, #3
 800b75e:	f043 0301 	orr.w	r3, r3, #1
 800b762:	81a3      	strh	r3, [r4, #12]
 800b764:	89a0      	ldrh	r0, [r4, #12]
 800b766:	4305      	orrs	r5, r0
 800b768:	81a5      	strh	r5, [r4, #12]
 800b76a:	e7cd      	b.n	800b708 <__smakebuf_r+0x18>
 800b76c:	0800b505 	.word	0x0800b505

0800b770 <_raise_r>:
 800b770:	291f      	cmp	r1, #31
 800b772:	b538      	push	{r3, r4, r5, lr}
 800b774:	4604      	mov	r4, r0
 800b776:	460d      	mov	r5, r1
 800b778:	d904      	bls.n	800b784 <_raise_r+0x14>
 800b77a:	2316      	movs	r3, #22
 800b77c:	6003      	str	r3, [r0, #0]
 800b77e:	f04f 30ff 	mov.w	r0, #4294967295
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b786:	b112      	cbz	r2, 800b78e <_raise_r+0x1e>
 800b788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b78c:	b94b      	cbnz	r3, 800b7a2 <_raise_r+0x32>
 800b78e:	4620      	mov	r0, r4
 800b790:	f000 f830 	bl	800b7f4 <_getpid_r>
 800b794:	462a      	mov	r2, r5
 800b796:	4601      	mov	r1, r0
 800b798:	4620      	mov	r0, r4
 800b79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b79e:	f000 b817 	b.w	800b7d0 <_kill_r>
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d00a      	beq.n	800b7bc <_raise_r+0x4c>
 800b7a6:	1c59      	adds	r1, r3, #1
 800b7a8:	d103      	bne.n	800b7b2 <_raise_r+0x42>
 800b7aa:	2316      	movs	r3, #22
 800b7ac:	6003      	str	r3, [r0, #0]
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	e7e7      	b.n	800b782 <_raise_r+0x12>
 800b7b2:	2400      	movs	r4, #0
 800b7b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	4798      	blx	r3
 800b7bc:	2000      	movs	r0, #0
 800b7be:	e7e0      	b.n	800b782 <_raise_r+0x12>

0800b7c0 <raise>:
 800b7c0:	4b02      	ldr	r3, [pc, #8]	; (800b7cc <raise+0xc>)
 800b7c2:	4601      	mov	r1, r0
 800b7c4:	6818      	ldr	r0, [r3, #0]
 800b7c6:	f7ff bfd3 	b.w	800b770 <_raise_r>
 800b7ca:	bf00      	nop
 800b7cc:	200005fc 	.word	0x200005fc

0800b7d0 <_kill_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4d07      	ldr	r5, [pc, #28]	; (800b7f0 <_kill_r+0x20>)
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	4608      	mov	r0, r1
 800b7da:	4611      	mov	r1, r2
 800b7dc:	602b      	str	r3, [r5, #0]
 800b7de:	f7f6 fedc 	bl	800259a <_kill>
 800b7e2:	1c43      	adds	r3, r0, #1
 800b7e4:	d102      	bne.n	800b7ec <_kill_r+0x1c>
 800b7e6:	682b      	ldr	r3, [r5, #0]
 800b7e8:	b103      	cbz	r3, 800b7ec <_kill_r+0x1c>
 800b7ea:	6023      	str	r3, [r4, #0]
 800b7ec:	bd38      	pop	{r3, r4, r5, pc}
 800b7ee:	bf00      	nop
 800b7f0:	20000d9c 	.word	0x20000d9c

0800b7f4 <_getpid_r>:
 800b7f4:	f7f6 bec9 	b.w	800258a <_getpid>

0800b7f8 <__sread>:
 800b7f8:	b510      	push	{r4, lr}
 800b7fa:	460c      	mov	r4, r1
 800b7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b800:	f000 f894 	bl	800b92c <_read_r>
 800b804:	2800      	cmp	r0, #0
 800b806:	bfab      	itete	ge
 800b808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b80a:	89a3      	ldrhlt	r3, [r4, #12]
 800b80c:	181b      	addge	r3, r3, r0
 800b80e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b812:	bfac      	ite	ge
 800b814:	6563      	strge	r3, [r4, #84]	; 0x54
 800b816:	81a3      	strhlt	r3, [r4, #12]
 800b818:	bd10      	pop	{r4, pc}

0800b81a <__swrite>:
 800b81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81e:	461f      	mov	r7, r3
 800b820:	898b      	ldrh	r3, [r1, #12]
 800b822:	05db      	lsls	r3, r3, #23
 800b824:	4605      	mov	r5, r0
 800b826:	460c      	mov	r4, r1
 800b828:	4616      	mov	r6, r2
 800b82a:	d505      	bpl.n	800b838 <__swrite+0x1e>
 800b82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b830:	2302      	movs	r3, #2
 800b832:	2200      	movs	r2, #0
 800b834:	f000 f868 	bl	800b908 <_lseek_r>
 800b838:	89a3      	ldrh	r3, [r4, #12]
 800b83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b83e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b842:	81a3      	strh	r3, [r4, #12]
 800b844:	4632      	mov	r2, r6
 800b846:	463b      	mov	r3, r7
 800b848:	4628      	mov	r0, r5
 800b84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b84e:	f000 b817 	b.w	800b880 <_write_r>

0800b852 <__sseek>:
 800b852:	b510      	push	{r4, lr}
 800b854:	460c      	mov	r4, r1
 800b856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b85a:	f000 f855 	bl	800b908 <_lseek_r>
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	89a3      	ldrh	r3, [r4, #12]
 800b862:	bf15      	itete	ne
 800b864:	6560      	strne	r0, [r4, #84]	; 0x54
 800b866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b86a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b86e:	81a3      	strheq	r3, [r4, #12]
 800b870:	bf18      	it	ne
 800b872:	81a3      	strhne	r3, [r4, #12]
 800b874:	bd10      	pop	{r4, pc}

0800b876 <__sclose>:
 800b876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b87a:	f000 b813 	b.w	800b8a4 <_close_r>
	...

0800b880 <_write_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4d07      	ldr	r5, [pc, #28]	; (800b8a0 <_write_r+0x20>)
 800b884:	4604      	mov	r4, r0
 800b886:	4608      	mov	r0, r1
 800b888:	4611      	mov	r1, r2
 800b88a:	2200      	movs	r2, #0
 800b88c:	602a      	str	r2, [r5, #0]
 800b88e:	461a      	mov	r2, r3
 800b890:	f7f6 feba 	bl	8002608 <_write>
 800b894:	1c43      	adds	r3, r0, #1
 800b896:	d102      	bne.n	800b89e <_write_r+0x1e>
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	b103      	cbz	r3, 800b89e <_write_r+0x1e>
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	20000d9c 	.word	0x20000d9c

0800b8a4 <_close_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d06      	ldr	r5, [pc, #24]	; (800b8c0 <_close_r+0x1c>)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	f7f6 fec6 	bl	8002640 <_close>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d102      	bne.n	800b8be <_close_r+0x1a>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	b103      	cbz	r3, 800b8be <_close_r+0x1a>
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	20000d9c 	.word	0x20000d9c

0800b8c4 <_fstat_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4d07      	ldr	r5, [pc, #28]	; (800b8e4 <_fstat_r+0x20>)
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	4608      	mov	r0, r1
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	602b      	str	r3, [r5, #0]
 800b8d2:	f7f6 fec1 	bl	8002658 <_fstat>
 800b8d6:	1c43      	adds	r3, r0, #1
 800b8d8:	d102      	bne.n	800b8e0 <_fstat_r+0x1c>
 800b8da:	682b      	ldr	r3, [r5, #0]
 800b8dc:	b103      	cbz	r3, 800b8e0 <_fstat_r+0x1c>
 800b8de:	6023      	str	r3, [r4, #0]
 800b8e0:	bd38      	pop	{r3, r4, r5, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20000d9c 	.word	0x20000d9c

0800b8e8 <_isatty_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4d06      	ldr	r5, [pc, #24]	; (800b904 <_isatty_r+0x1c>)
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	4608      	mov	r0, r1
 800b8f2:	602b      	str	r3, [r5, #0]
 800b8f4:	f7f6 fec0 	bl	8002678 <_isatty>
 800b8f8:	1c43      	adds	r3, r0, #1
 800b8fa:	d102      	bne.n	800b902 <_isatty_r+0x1a>
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	b103      	cbz	r3, 800b902 <_isatty_r+0x1a>
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	bd38      	pop	{r3, r4, r5, pc}
 800b904:	20000d9c 	.word	0x20000d9c

0800b908 <_lseek_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4d07      	ldr	r5, [pc, #28]	; (800b928 <_lseek_r+0x20>)
 800b90c:	4604      	mov	r4, r0
 800b90e:	4608      	mov	r0, r1
 800b910:	4611      	mov	r1, r2
 800b912:	2200      	movs	r2, #0
 800b914:	602a      	str	r2, [r5, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	f7f6 feb9 	bl	800268e <_lseek>
 800b91c:	1c43      	adds	r3, r0, #1
 800b91e:	d102      	bne.n	800b926 <_lseek_r+0x1e>
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	b103      	cbz	r3, 800b926 <_lseek_r+0x1e>
 800b924:	6023      	str	r3, [r4, #0]
 800b926:	bd38      	pop	{r3, r4, r5, pc}
 800b928:	20000d9c 	.word	0x20000d9c

0800b92c <_read_r>:
 800b92c:	b538      	push	{r3, r4, r5, lr}
 800b92e:	4d07      	ldr	r5, [pc, #28]	; (800b94c <_read_r+0x20>)
 800b930:	4604      	mov	r4, r0
 800b932:	4608      	mov	r0, r1
 800b934:	4611      	mov	r1, r2
 800b936:	2200      	movs	r2, #0
 800b938:	602a      	str	r2, [r5, #0]
 800b93a:	461a      	mov	r2, r3
 800b93c:	f7f6 fe47 	bl	80025ce <_read>
 800b940:	1c43      	adds	r3, r0, #1
 800b942:	d102      	bne.n	800b94a <_read_r+0x1e>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	b103      	cbz	r3, 800b94a <_read_r+0x1e>
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	bd38      	pop	{r3, r4, r5, pc}
 800b94c:	20000d9c 	.word	0x20000d9c

0800b950 <sin>:
 800b950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b952:	ec53 2b10 	vmov	r2, r3, d0
 800b956:	4826      	ldr	r0, [pc, #152]	; (800b9f0 <sin+0xa0>)
 800b958:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b95c:	4281      	cmp	r1, r0
 800b95e:	dc07      	bgt.n	800b970 <sin+0x20>
 800b960:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b9e8 <sin+0x98>
 800b964:	2000      	movs	r0, #0
 800b966:	f000 fe5b 	bl	800c620 <__kernel_sin>
 800b96a:	ec51 0b10 	vmov	r0, r1, d0
 800b96e:	e007      	b.n	800b980 <sin+0x30>
 800b970:	4820      	ldr	r0, [pc, #128]	; (800b9f4 <sin+0xa4>)
 800b972:	4281      	cmp	r1, r0
 800b974:	dd09      	ble.n	800b98a <sin+0x3a>
 800b976:	ee10 0a10 	vmov	r0, s0
 800b97a:	4619      	mov	r1, r3
 800b97c:	f7f4 fc9c 	bl	80002b8 <__aeabi_dsub>
 800b980:	ec41 0b10 	vmov	d0, r0, r1
 800b984:	b005      	add	sp, #20
 800b986:	f85d fb04 	ldr.w	pc, [sp], #4
 800b98a:	4668      	mov	r0, sp
 800b98c:	f000 f834 	bl	800b9f8 <__ieee754_rem_pio2>
 800b990:	f000 0003 	and.w	r0, r0, #3
 800b994:	2801      	cmp	r0, #1
 800b996:	d008      	beq.n	800b9aa <sin+0x5a>
 800b998:	2802      	cmp	r0, #2
 800b99a:	d00d      	beq.n	800b9b8 <sin+0x68>
 800b99c:	b9d0      	cbnz	r0, 800b9d4 <sin+0x84>
 800b99e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9a2:	ed9d 0b00 	vldr	d0, [sp]
 800b9a6:	2001      	movs	r0, #1
 800b9a8:	e7dd      	b.n	800b966 <sin+0x16>
 800b9aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9ae:	ed9d 0b00 	vldr	d0, [sp]
 800b9b2:	f000 fa2d 	bl	800be10 <__kernel_cos>
 800b9b6:	e7d8      	b.n	800b96a <sin+0x1a>
 800b9b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9bc:	ed9d 0b00 	vldr	d0, [sp]
 800b9c0:	2001      	movs	r0, #1
 800b9c2:	f000 fe2d 	bl	800c620 <__kernel_sin>
 800b9c6:	ec53 2b10 	vmov	r2, r3, d0
 800b9ca:	ee10 0a10 	vmov	r0, s0
 800b9ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b9d2:	e7d5      	b.n	800b980 <sin+0x30>
 800b9d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9d8:	ed9d 0b00 	vldr	d0, [sp]
 800b9dc:	f000 fa18 	bl	800be10 <__kernel_cos>
 800b9e0:	e7f1      	b.n	800b9c6 <sin+0x76>
 800b9e2:	bf00      	nop
 800b9e4:	f3af 8000 	nop.w
	...
 800b9f0:	3fe921fb 	.word	0x3fe921fb
 800b9f4:	7fefffff 	.word	0x7fefffff

0800b9f8 <__ieee754_rem_pio2>:
 800b9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fc:	ed2d 8b02 	vpush	{d8}
 800ba00:	ec55 4b10 	vmov	r4, r5, d0
 800ba04:	4bca      	ldr	r3, [pc, #808]	; (800bd30 <__ieee754_rem_pio2+0x338>)
 800ba06:	b08b      	sub	sp, #44	; 0x2c
 800ba08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ba0c:	4598      	cmp	r8, r3
 800ba0e:	4682      	mov	sl, r0
 800ba10:	9502      	str	r5, [sp, #8]
 800ba12:	dc08      	bgt.n	800ba26 <__ieee754_rem_pio2+0x2e>
 800ba14:	2200      	movs	r2, #0
 800ba16:	2300      	movs	r3, #0
 800ba18:	ed80 0b00 	vstr	d0, [r0]
 800ba1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ba20:	f04f 0b00 	mov.w	fp, #0
 800ba24:	e028      	b.n	800ba78 <__ieee754_rem_pio2+0x80>
 800ba26:	4bc3      	ldr	r3, [pc, #780]	; (800bd34 <__ieee754_rem_pio2+0x33c>)
 800ba28:	4598      	cmp	r8, r3
 800ba2a:	dc78      	bgt.n	800bb1e <__ieee754_rem_pio2+0x126>
 800ba2c:	9b02      	ldr	r3, [sp, #8]
 800ba2e:	4ec2      	ldr	r6, [pc, #776]	; (800bd38 <__ieee754_rem_pio2+0x340>)
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	ee10 0a10 	vmov	r0, s0
 800ba36:	a3b0      	add	r3, pc, #704	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x300>)
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	dd39      	ble.n	800bab4 <__ieee754_rem_pio2+0xbc>
 800ba40:	f7f4 fc3a 	bl	80002b8 <__aeabi_dsub>
 800ba44:	45b0      	cmp	r8, r6
 800ba46:	4604      	mov	r4, r0
 800ba48:	460d      	mov	r5, r1
 800ba4a:	d01b      	beq.n	800ba84 <__ieee754_rem_pio2+0x8c>
 800ba4c:	a3ac      	add	r3, pc, #688	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x308>)
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	f7f4 fc31 	bl	80002b8 <__aeabi_dsub>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	e9ca 2300 	strd	r2, r3, [sl]
 800ba5e:	4620      	mov	r0, r4
 800ba60:	4629      	mov	r1, r5
 800ba62:	f7f4 fc29 	bl	80002b8 <__aeabi_dsub>
 800ba66:	a3a6      	add	r3, pc, #664	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x308>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	f7f4 fc24 	bl	80002b8 <__aeabi_dsub>
 800ba70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba74:	f04f 0b01 	mov.w	fp, #1
 800ba78:	4658      	mov	r0, fp
 800ba7a:	b00b      	add	sp, #44	; 0x2c
 800ba7c:	ecbd 8b02 	vpop	{d8}
 800ba80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba84:	a3a0      	add	r3, pc, #640	; (adr r3, 800bd08 <__ieee754_rem_pio2+0x310>)
 800ba86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8a:	f7f4 fc15 	bl	80002b8 <__aeabi_dsub>
 800ba8e:	a3a0      	add	r3, pc, #640	; (adr r3, 800bd10 <__ieee754_rem_pio2+0x318>)
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	4604      	mov	r4, r0
 800ba96:	460d      	mov	r5, r1
 800ba98:	f7f4 fc0e 	bl	80002b8 <__aeabi_dsub>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	460b      	mov	r3, r1
 800baa0:	e9ca 2300 	strd	r2, r3, [sl]
 800baa4:	4620      	mov	r0, r4
 800baa6:	4629      	mov	r1, r5
 800baa8:	f7f4 fc06 	bl	80002b8 <__aeabi_dsub>
 800baac:	a398      	add	r3, pc, #608	; (adr r3, 800bd10 <__ieee754_rem_pio2+0x318>)
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	e7db      	b.n	800ba6c <__ieee754_rem_pio2+0x74>
 800bab4:	f7f4 fc02 	bl	80002bc <__adddf3>
 800bab8:	45b0      	cmp	r8, r6
 800baba:	4604      	mov	r4, r0
 800babc:	460d      	mov	r5, r1
 800babe:	d016      	beq.n	800baee <__ieee754_rem_pio2+0xf6>
 800bac0:	a38f      	add	r3, pc, #572	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x308>)
 800bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac6:	f7f4 fbf9 	bl	80002bc <__adddf3>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	e9ca 2300 	strd	r2, r3, [sl]
 800bad2:	4620      	mov	r0, r4
 800bad4:	4629      	mov	r1, r5
 800bad6:	f7f4 fbef 	bl	80002b8 <__aeabi_dsub>
 800bada:	a389      	add	r3, pc, #548	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x308>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f7f4 fbec 	bl	80002bc <__adddf3>
 800bae4:	f04f 3bff 	mov.w	fp, #4294967295
 800bae8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800baec:	e7c4      	b.n	800ba78 <__ieee754_rem_pio2+0x80>
 800baee:	a386      	add	r3, pc, #536	; (adr r3, 800bd08 <__ieee754_rem_pio2+0x310>)
 800baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf4:	f7f4 fbe2 	bl	80002bc <__adddf3>
 800baf8:	a385      	add	r3, pc, #532	; (adr r3, 800bd10 <__ieee754_rem_pio2+0x318>)
 800bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafe:	4604      	mov	r4, r0
 800bb00:	460d      	mov	r5, r1
 800bb02:	f7f4 fbdb 	bl	80002bc <__adddf3>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	e9ca 2300 	strd	r2, r3, [sl]
 800bb0e:	4620      	mov	r0, r4
 800bb10:	4629      	mov	r1, r5
 800bb12:	f7f4 fbd1 	bl	80002b8 <__aeabi_dsub>
 800bb16:	a37e      	add	r3, pc, #504	; (adr r3, 800bd10 <__ieee754_rem_pio2+0x318>)
 800bb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1c:	e7e0      	b.n	800bae0 <__ieee754_rem_pio2+0xe8>
 800bb1e:	4b87      	ldr	r3, [pc, #540]	; (800bd3c <__ieee754_rem_pio2+0x344>)
 800bb20:	4598      	cmp	r8, r3
 800bb22:	f300 80d9 	bgt.w	800bcd8 <__ieee754_rem_pio2+0x2e0>
 800bb26:	f000 fe39 	bl	800c79c <fabs>
 800bb2a:	ec55 4b10 	vmov	r4, r5, d0
 800bb2e:	ee10 0a10 	vmov	r0, s0
 800bb32:	a379      	add	r3, pc, #484	; (adr r3, 800bd18 <__ieee754_rem_pio2+0x320>)
 800bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb38:	4629      	mov	r1, r5
 800bb3a:	f7f4 fd75 	bl	8000628 <__aeabi_dmul>
 800bb3e:	4b80      	ldr	r3, [pc, #512]	; (800bd40 <__ieee754_rem_pio2+0x348>)
 800bb40:	2200      	movs	r2, #0
 800bb42:	f7f4 fbbb 	bl	80002bc <__adddf3>
 800bb46:	f7f5 f81f 	bl	8000b88 <__aeabi_d2iz>
 800bb4a:	4683      	mov	fp, r0
 800bb4c:	f7f4 fd02 	bl	8000554 <__aeabi_i2d>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	ec43 2b18 	vmov	d8, r2, r3
 800bb58:	a367      	add	r3, pc, #412	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x300>)
 800bb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5e:	f7f4 fd63 	bl	8000628 <__aeabi_dmul>
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	4620      	mov	r0, r4
 800bb68:	4629      	mov	r1, r5
 800bb6a:	f7f4 fba5 	bl	80002b8 <__aeabi_dsub>
 800bb6e:	a364      	add	r3, pc, #400	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x308>)
 800bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb74:	4606      	mov	r6, r0
 800bb76:	460f      	mov	r7, r1
 800bb78:	ec51 0b18 	vmov	r0, r1, d8
 800bb7c:	f7f4 fd54 	bl	8000628 <__aeabi_dmul>
 800bb80:	f1bb 0f1f 	cmp.w	fp, #31
 800bb84:	4604      	mov	r4, r0
 800bb86:	460d      	mov	r5, r1
 800bb88:	dc0d      	bgt.n	800bba6 <__ieee754_rem_pio2+0x1ae>
 800bb8a:	4b6e      	ldr	r3, [pc, #440]	; (800bd44 <__ieee754_rem_pio2+0x34c>)
 800bb8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb94:	4543      	cmp	r3, r8
 800bb96:	d006      	beq.n	800bba6 <__ieee754_rem_pio2+0x1ae>
 800bb98:	4622      	mov	r2, r4
 800bb9a:	462b      	mov	r3, r5
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	4639      	mov	r1, r7
 800bba0:	f7f4 fb8a 	bl	80002b8 <__aeabi_dsub>
 800bba4:	e00f      	b.n	800bbc6 <__ieee754_rem_pio2+0x1ce>
 800bba6:	462b      	mov	r3, r5
 800bba8:	4622      	mov	r2, r4
 800bbaa:	4630      	mov	r0, r6
 800bbac:	4639      	mov	r1, r7
 800bbae:	f7f4 fb83 	bl	80002b8 <__aeabi_dsub>
 800bbb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bbb6:	9303      	str	r3, [sp, #12]
 800bbb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bbbc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bbc0:	f1b8 0f10 	cmp.w	r8, #16
 800bbc4:	dc02      	bgt.n	800bbcc <__ieee754_rem_pio2+0x1d4>
 800bbc6:	e9ca 0100 	strd	r0, r1, [sl]
 800bbca:	e039      	b.n	800bc40 <__ieee754_rem_pio2+0x248>
 800bbcc:	a34e      	add	r3, pc, #312	; (adr r3, 800bd08 <__ieee754_rem_pio2+0x310>)
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	ec51 0b18 	vmov	r0, r1, d8
 800bbd6:	f7f4 fd27 	bl	8000628 <__aeabi_dmul>
 800bbda:	4604      	mov	r4, r0
 800bbdc:	460d      	mov	r5, r1
 800bbde:	4602      	mov	r2, r0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	4639      	mov	r1, r7
 800bbe6:	f7f4 fb67 	bl	80002b8 <__aeabi_dsub>
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	4680      	mov	r8, r0
 800bbf0:	4689      	mov	r9, r1
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	4639      	mov	r1, r7
 800bbf6:	f7f4 fb5f 	bl	80002b8 <__aeabi_dsub>
 800bbfa:	4622      	mov	r2, r4
 800bbfc:	462b      	mov	r3, r5
 800bbfe:	f7f4 fb5b 	bl	80002b8 <__aeabi_dsub>
 800bc02:	a343      	add	r3, pc, #268	; (adr r3, 800bd10 <__ieee754_rem_pio2+0x318>)
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	4604      	mov	r4, r0
 800bc0a:	460d      	mov	r5, r1
 800bc0c:	ec51 0b18 	vmov	r0, r1, d8
 800bc10:	f7f4 fd0a 	bl	8000628 <__aeabi_dmul>
 800bc14:	4622      	mov	r2, r4
 800bc16:	462b      	mov	r3, r5
 800bc18:	f7f4 fb4e 	bl	80002b8 <__aeabi_dsub>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	460b      	mov	r3, r1
 800bc20:	4604      	mov	r4, r0
 800bc22:	460d      	mov	r5, r1
 800bc24:	4640      	mov	r0, r8
 800bc26:	4649      	mov	r1, r9
 800bc28:	f7f4 fb46 	bl	80002b8 <__aeabi_dsub>
 800bc2c:	9a03      	ldr	r2, [sp, #12]
 800bc2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	2b31      	cmp	r3, #49	; 0x31
 800bc36:	dc24      	bgt.n	800bc82 <__ieee754_rem_pio2+0x28a>
 800bc38:	e9ca 0100 	strd	r0, r1, [sl]
 800bc3c:	4646      	mov	r6, r8
 800bc3e:	464f      	mov	r7, r9
 800bc40:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc44:	4630      	mov	r0, r6
 800bc46:	4642      	mov	r2, r8
 800bc48:	464b      	mov	r3, r9
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	f7f4 fb34 	bl	80002b8 <__aeabi_dsub>
 800bc50:	462b      	mov	r3, r5
 800bc52:	4622      	mov	r2, r4
 800bc54:	f7f4 fb30 	bl	80002b8 <__aeabi_dsub>
 800bc58:	9b02      	ldr	r3, [sp, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc60:	f6bf af0a 	bge.w	800ba78 <__ieee754_rem_pio2+0x80>
 800bc64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bc68:	f8ca 3004 	str.w	r3, [sl, #4]
 800bc6c:	f8ca 8000 	str.w	r8, [sl]
 800bc70:	f8ca 0008 	str.w	r0, [sl, #8]
 800bc74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc78:	f8ca 300c 	str.w	r3, [sl, #12]
 800bc7c:	f1cb 0b00 	rsb	fp, fp, #0
 800bc80:	e6fa      	b.n	800ba78 <__ieee754_rem_pio2+0x80>
 800bc82:	a327      	add	r3, pc, #156	; (adr r3, 800bd20 <__ieee754_rem_pio2+0x328>)
 800bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc88:	ec51 0b18 	vmov	r0, r1, d8
 800bc8c:	f7f4 fccc 	bl	8000628 <__aeabi_dmul>
 800bc90:	4604      	mov	r4, r0
 800bc92:	460d      	mov	r5, r1
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	4640      	mov	r0, r8
 800bc9a:	4649      	mov	r1, r9
 800bc9c:	f7f4 fb0c 	bl	80002b8 <__aeabi_dsub>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	4606      	mov	r6, r0
 800bca6:	460f      	mov	r7, r1
 800bca8:	4640      	mov	r0, r8
 800bcaa:	4649      	mov	r1, r9
 800bcac:	f7f4 fb04 	bl	80002b8 <__aeabi_dsub>
 800bcb0:	4622      	mov	r2, r4
 800bcb2:	462b      	mov	r3, r5
 800bcb4:	f7f4 fb00 	bl	80002b8 <__aeabi_dsub>
 800bcb8:	a31b      	add	r3, pc, #108	; (adr r3, 800bd28 <__ieee754_rem_pio2+0x330>)
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	460d      	mov	r5, r1
 800bcc2:	ec51 0b18 	vmov	r0, r1, d8
 800bcc6:	f7f4 fcaf 	bl	8000628 <__aeabi_dmul>
 800bcca:	4622      	mov	r2, r4
 800bccc:	462b      	mov	r3, r5
 800bcce:	f7f4 faf3 	bl	80002b8 <__aeabi_dsub>
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	e75f      	b.n	800bb98 <__ieee754_rem_pio2+0x1a0>
 800bcd8:	4b1b      	ldr	r3, [pc, #108]	; (800bd48 <__ieee754_rem_pio2+0x350>)
 800bcda:	4598      	cmp	r8, r3
 800bcdc:	dd36      	ble.n	800bd4c <__ieee754_rem_pio2+0x354>
 800bcde:	ee10 2a10 	vmov	r2, s0
 800bce2:	462b      	mov	r3, r5
 800bce4:	4620      	mov	r0, r4
 800bce6:	4629      	mov	r1, r5
 800bce8:	f7f4 fae6 	bl	80002b8 <__aeabi_dsub>
 800bcec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bcf0:	e9ca 0100 	strd	r0, r1, [sl]
 800bcf4:	e694      	b.n	800ba20 <__ieee754_rem_pio2+0x28>
 800bcf6:	bf00      	nop
 800bcf8:	54400000 	.word	0x54400000
 800bcfc:	3ff921fb 	.word	0x3ff921fb
 800bd00:	1a626331 	.word	0x1a626331
 800bd04:	3dd0b461 	.word	0x3dd0b461
 800bd08:	1a600000 	.word	0x1a600000
 800bd0c:	3dd0b461 	.word	0x3dd0b461
 800bd10:	2e037073 	.word	0x2e037073
 800bd14:	3ba3198a 	.word	0x3ba3198a
 800bd18:	6dc9c883 	.word	0x6dc9c883
 800bd1c:	3fe45f30 	.word	0x3fe45f30
 800bd20:	2e000000 	.word	0x2e000000
 800bd24:	3ba3198a 	.word	0x3ba3198a
 800bd28:	252049c1 	.word	0x252049c1
 800bd2c:	397b839a 	.word	0x397b839a
 800bd30:	3fe921fb 	.word	0x3fe921fb
 800bd34:	4002d97b 	.word	0x4002d97b
 800bd38:	3ff921fb 	.word	0x3ff921fb
 800bd3c:	413921fb 	.word	0x413921fb
 800bd40:	3fe00000 	.word	0x3fe00000
 800bd44:	0800d444 	.word	0x0800d444
 800bd48:	7fefffff 	.word	0x7fefffff
 800bd4c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bd50:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bd54:	ee10 0a10 	vmov	r0, s0
 800bd58:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bd5c:	ee10 6a10 	vmov	r6, s0
 800bd60:	460f      	mov	r7, r1
 800bd62:	f7f4 ff11 	bl	8000b88 <__aeabi_d2iz>
 800bd66:	f7f4 fbf5 	bl	8000554 <__aeabi_i2d>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4630      	mov	r0, r6
 800bd70:	4639      	mov	r1, r7
 800bd72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd76:	f7f4 fa9f 	bl	80002b8 <__aeabi_dsub>
 800bd7a:	4b22      	ldr	r3, [pc, #136]	; (800be04 <__ieee754_rem_pio2+0x40c>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f7f4 fc53 	bl	8000628 <__aeabi_dmul>
 800bd82:	460f      	mov	r7, r1
 800bd84:	4606      	mov	r6, r0
 800bd86:	f7f4 feff 	bl	8000b88 <__aeabi_d2iz>
 800bd8a:	f7f4 fbe3 	bl	8000554 <__aeabi_i2d>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	4630      	mov	r0, r6
 800bd94:	4639      	mov	r1, r7
 800bd96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd9a:	f7f4 fa8d 	bl	80002b8 <__aeabi_dsub>
 800bd9e:	4b19      	ldr	r3, [pc, #100]	; (800be04 <__ieee754_rem_pio2+0x40c>)
 800bda0:	2200      	movs	r2, #0
 800bda2:	f7f4 fc41 	bl	8000628 <__aeabi_dmul>
 800bda6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bdaa:	ad04      	add	r5, sp, #16
 800bdac:	f04f 0803 	mov.w	r8, #3
 800bdb0:	46a9      	mov	r9, r5
 800bdb2:	2600      	movs	r6, #0
 800bdb4:	2700      	movs	r7, #0
 800bdb6:	4632      	mov	r2, r6
 800bdb8:	463b      	mov	r3, r7
 800bdba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bdbe:	46c3      	mov	fp, r8
 800bdc0:	3d08      	subs	r5, #8
 800bdc2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bdc6:	f7f4 fe97 	bl	8000af8 <__aeabi_dcmpeq>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d1f3      	bne.n	800bdb6 <__ieee754_rem_pio2+0x3be>
 800bdce:	4b0e      	ldr	r3, [pc, #56]	; (800be08 <__ieee754_rem_pio2+0x410>)
 800bdd0:	9301      	str	r3, [sp, #4]
 800bdd2:	2302      	movs	r3, #2
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	4622      	mov	r2, r4
 800bdd8:	465b      	mov	r3, fp
 800bdda:	4651      	mov	r1, sl
 800bddc:	4648      	mov	r0, r9
 800bdde:	f000 f8df 	bl	800bfa0 <__kernel_rem_pio2>
 800bde2:	9b02      	ldr	r3, [sp, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	4683      	mov	fp, r0
 800bde8:	f6bf ae46 	bge.w	800ba78 <__ieee754_rem_pio2+0x80>
 800bdec:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bdf0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bdf4:	f8ca 3004 	str.w	r3, [sl, #4]
 800bdf8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800bdfc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be00:	e73a      	b.n	800bc78 <__ieee754_rem_pio2+0x280>
 800be02:	bf00      	nop
 800be04:	41700000 	.word	0x41700000
 800be08:	0800d4c4 	.word	0x0800d4c4
 800be0c:	00000000 	.word	0x00000000

0800be10 <__kernel_cos>:
 800be10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be14:	ec57 6b10 	vmov	r6, r7, d0
 800be18:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800be1c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800be20:	ed8d 1b00 	vstr	d1, [sp]
 800be24:	da07      	bge.n	800be36 <__kernel_cos+0x26>
 800be26:	ee10 0a10 	vmov	r0, s0
 800be2a:	4639      	mov	r1, r7
 800be2c:	f7f4 feac 	bl	8000b88 <__aeabi_d2iz>
 800be30:	2800      	cmp	r0, #0
 800be32:	f000 8088 	beq.w	800bf46 <__kernel_cos+0x136>
 800be36:	4632      	mov	r2, r6
 800be38:	463b      	mov	r3, r7
 800be3a:	4630      	mov	r0, r6
 800be3c:	4639      	mov	r1, r7
 800be3e:	f7f4 fbf3 	bl	8000628 <__aeabi_dmul>
 800be42:	4b51      	ldr	r3, [pc, #324]	; (800bf88 <__kernel_cos+0x178>)
 800be44:	2200      	movs	r2, #0
 800be46:	4604      	mov	r4, r0
 800be48:	460d      	mov	r5, r1
 800be4a:	f7f4 fbed 	bl	8000628 <__aeabi_dmul>
 800be4e:	a340      	add	r3, pc, #256	; (adr r3, 800bf50 <__kernel_cos+0x140>)
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	4682      	mov	sl, r0
 800be56:	468b      	mov	fp, r1
 800be58:	4620      	mov	r0, r4
 800be5a:	4629      	mov	r1, r5
 800be5c:	f7f4 fbe4 	bl	8000628 <__aeabi_dmul>
 800be60:	a33d      	add	r3, pc, #244	; (adr r3, 800bf58 <__kernel_cos+0x148>)
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	f7f4 fa29 	bl	80002bc <__adddf3>
 800be6a:	4622      	mov	r2, r4
 800be6c:	462b      	mov	r3, r5
 800be6e:	f7f4 fbdb 	bl	8000628 <__aeabi_dmul>
 800be72:	a33b      	add	r3, pc, #236	; (adr r3, 800bf60 <__kernel_cos+0x150>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f7f4 fa1e 	bl	80002b8 <__aeabi_dsub>
 800be7c:	4622      	mov	r2, r4
 800be7e:	462b      	mov	r3, r5
 800be80:	f7f4 fbd2 	bl	8000628 <__aeabi_dmul>
 800be84:	a338      	add	r3, pc, #224	; (adr r3, 800bf68 <__kernel_cos+0x158>)
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	f7f4 fa17 	bl	80002bc <__adddf3>
 800be8e:	4622      	mov	r2, r4
 800be90:	462b      	mov	r3, r5
 800be92:	f7f4 fbc9 	bl	8000628 <__aeabi_dmul>
 800be96:	a336      	add	r3, pc, #216	; (adr r3, 800bf70 <__kernel_cos+0x160>)
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f7f4 fa0c 	bl	80002b8 <__aeabi_dsub>
 800bea0:	4622      	mov	r2, r4
 800bea2:	462b      	mov	r3, r5
 800bea4:	f7f4 fbc0 	bl	8000628 <__aeabi_dmul>
 800bea8:	a333      	add	r3, pc, #204	; (adr r3, 800bf78 <__kernel_cos+0x168>)
 800beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beae:	f7f4 fa05 	bl	80002bc <__adddf3>
 800beb2:	4622      	mov	r2, r4
 800beb4:	462b      	mov	r3, r5
 800beb6:	f7f4 fbb7 	bl	8000628 <__aeabi_dmul>
 800beba:	4622      	mov	r2, r4
 800bebc:	462b      	mov	r3, r5
 800bebe:	f7f4 fbb3 	bl	8000628 <__aeabi_dmul>
 800bec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bec6:	4604      	mov	r4, r0
 800bec8:	460d      	mov	r5, r1
 800beca:	4630      	mov	r0, r6
 800becc:	4639      	mov	r1, r7
 800bece:	f7f4 fbab 	bl	8000628 <__aeabi_dmul>
 800bed2:	460b      	mov	r3, r1
 800bed4:	4602      	mov	r2, r0
 800bed6:	4629      	mov	r1, r5
 800bed8:	4620      	mov	r0, r4
 800beda:	f7f4 f9ed 	bl	80002b8 <__aeabi_dsub>
 800bede:	4b2b      	ldr	r3, [pc, #172]	; (800bf8c <__kernel_cos+0x17c>)
 800bee0:	4598      	cmp	r8, r3
 800bee2:	4606      	mov	r6, r0
 800bee4:	460f      	mov	r7, r1
 800bee6:	dc10      	bgt.n	800bf0a <__kernel_cos+0xfa>
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	4650      	mov	r0, sl
 800beee:	4659      	mov	r1, fp
 800bef0:	f7f4 f9e2 	bl	80002b8 <__aeabi_dsub>
 800bef4:	460b      	mov	r3, r1
 800bef6:	4926      	ldr	r1, [pc, #152]	; (800bf90 <__kernel_cos+0x180>)
 800bef8:	4602      	mov	r2, r0
 800befa:	2000      	movs	r0, #0
 800befc:	f7f4 f9dc 	bl	80002b8 <__aeabi_dsub>
 800bf00:	ec41 0b10 	vmov	d0, r0, r1
 800bf04:	b003      	add	sp, #12
 800bf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0a:	4b22      	ldr	r3, [pc, #136]	; (800bf94 <__kernel_cos+0x184>)
 800bf0c:	4920      	ldr	r1, [pc, #128]	; (800bf90 <__kernel_cos+0x180>)
 800bf0e:	4598      	cmp	r8, r3
 800bf10:	bfcc      	ite	gt
 800bf12:	4d21      	ldrgt	r5, [pc, #132]	; (800bf98 <__kernel_cos+0x188>)
 800bf14:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bf18:	2400      	movs	r4, #0
 800bf1a:	4622      	mov	r2, r4
 800bf1c:	462b      	mov	r3, r5
 800bf1e:	2000      	movs	r0, #0
 800bf20:	f7f4 f9ca 	bl	80002b8 <__aeabi_dsub>
 800bf24:	4622      	mov	r2, r4
 800bf26:	4680      	mov	r8, r0
 800bf28:	4689      	mov	r9, r1
 800bf2a:	462b      	mov	r3, r5
 800bf2c:	4650      	mov	r0, sl
 800bf2e:	4659      	mov	r1, fp
 800bf30:	f7f4 f9c2 	bl	80002b8 <__aeabi_dsub>
 800bf34:	4632      	mov	r2, r6
 800bf36:	463b      	mov	r3, r7
 800bf38:	f7f4 f9be 	bl	80002b8 <__aeabi_dsub>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4640      	mov	r0, r8
 800bf42:	4649      	mov	r1, r9
 800bf44:	e7da      	b.n	800befc <__kernel_cos+0xec>
 800bf46:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bf80 <__kernel_cos+0x170>
 800bf4a:	e7db      	b.n	800bf04 <__kernel_cos+0xf4>
 800bf4c:	f3af 8000 	nop.w
 800bf50:	be8838d4 	.word	0xbe8838d4
 800bf54:	bda8fae9 	.word	0xbda8fae9
 800bf58:	bdb4b1c4 	.word	0xbdb4b1c4
 800bf5c:	3e21ee9e 	.word	0x3e21ee9e
 800bf60:	809c52ad 	.word	0x809c52ad
 800bf64:	3e927e4f 	.word	0x3e927e4f
 800bf68:	19cb1590 	.word	0x19cb1590
 800bf6c:	3efa01a0 	.word	0x3efa01a0
 800bf70:	16c15177 	.word	0x16c15177
 800bf74:	3f56c16c 	.word	0x3f56c16c
 800bf78:	5555554c 	.word	0x5555554c
 800bf7c:	3fa55555 	.word	0x3fa55555
 800bf80:	00000000 	.word	0x00000000
 800bf84:	3ff00000 	.word	0x3ff00000
 800bf88:	3fe00000 	.word	0x3fe00000
 800bf8c:	3fd33332 	.word	0x3fd33332
 800bf90:	3ff00000 	.word	0x3ff00000
 800bf94:	3fe90000 	.word	0x3fe90000
 800bf98:	3fd20000 	.word	0x3fd20000
 800bf9c:	00000000 	.word	0x00000000

0800bfa0 <__kernel_rem_pio2>:
 800bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa4:	ed2d 8b02 	vpush	{d8}
 800bfa8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bfac:	f112 0f14 	cmn.w	r2, #20
 800bfb0:	9308      	str	r3, [sp, #32]
 800bfb2:	9101      	str	r1, [sp, #4]
 800bfb4:	4bc6      	ldr	r3, [pc, #792]	; (800c2d0 <__kernel_rem_pio2+0x330>)
 800bfb6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800bfb8:	9009      	str	r0, [sp, #36]	; 0x24
 800bfba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfbe:	9304      	str	r3, [sp, #16]
 800bfc0:	9b08      	ldr	r3, [sp, #32]
 800bfc2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bfc6:	bfa8      	it	ge
 800bfc8:	1ed4      	subge	r4, r2, #3
 800bfca:	9306      	str	r3, [sp, #24]
 800bfcc:	bfb2      	itee	lt
 800bfce:	2400      	movlt	r4, #0
 800bfd0:	2318      	movge	r3, #24
 800bfd2:	fb94 f4f3 	sdivge	r4, r4, r3
 800bfd6:	f06f 0317 	mvn.w	r3, #23
 800bfda:	fb04 3303 	mla	r3, r4, r3, r3
 800bfde:	eb03 0a02 	add.w	sl, r3, r2
 800bfe2:	9b04      	ldr	r3, [sp, #16]
 800bfe4:	9a06      	ldr	r2, [sp, #24]
 800bfe6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c2c0 <__kernel_rem_pio2+0x320>
 800bfea:	eb03 0802 	add.w	r8, r3, r2
 800bfee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bff0:	1aa7      	subs	r7, r4, r2
 800bff2:	ae20      	add	r6, sp, #128	; 0x80
 800bff4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bff8:	2500      	movs	r5, #0
 800bffa:	4545      	cmp	r5, r8
 800bffc:	dd18      	ble.n	800c030 <__kernel_rem_pio2+0x90>
 800bffe:	9b08      	ldr	r3, [sp, #32]
 800c000:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c004:	aa20      	add	r2, sp, #128	; 0x80
 800c006:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c2c0 <__kernel_rem_pio2+0x320>
 800c00a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c00e:	f1c3 0301 	rsb	r3, r3, #1
 800c012:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c016:	9307      	str	r3, [sp, #28]
 800c018:	9b07      	ldr	r3, [sp, #28]
 800c01a:	9a04      	ldr	r2, [sp, #16]
 800c01c:	4443      	add	r3, r8
 800c01e:	429a      	cmp	r2, r3
 800c020:	db2f      	blt.n	800c082 <__kernel_rem_pio2+0xe2>
 800c022:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c026:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c02a:	462f      	mov	r7, r5
 800c02c:	2600      	movs	r6, #0
 800c02e:	e01b      	b.n	800c068 <__kernel_rem_pio2+0xc8>
 800c030:	42ef      	cmn	r7, r5
 800c032:	d407      	bmi.n	800c044 <__kernel_rem_pio2+0xa4>
 800c034:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c038:	f7f4 fa8c 	bl	8000554 <__aeabi_i2d>
 800c03c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c040:	3501      	adds	r5, #1
 800c042:	e7da      	b.n	800bffa <__kernel_rem_pio2+0x5a>
 800c044:	ec51 0b18 	vmov	r0, r1, d8
 800c048:	e7f8      	b.n	800c03c <__kernel_rem_pio2+0x9c>
 800c04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c04e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c052:	f7f4 fae9 	bl	8000628 <__aeabi_dmul>
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c05e:	f7f4 f92d 	bl	80002bc <__adddf3>
 800c062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c066:	3601      	adds	r6, #1
 800c068:	9b06      	ldr	r3, [sp, #24]
 800c06a:	429e      	cmp	r6, r3
 800c06c:	f1a7 0708 	sub.w	r7, r7, #8
 800c070:	ddeb      	ble.n	800c04a <__kernel_rem_pio2+0xaa>
 800c072:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c076:	3508      	adds	r5, #8
 800c078:	ecab 7b02 	vstmia	fp!, {d7}
 800c07c:	f108 0801 	add.w	r8, r8, #1
 800c080:	e7ca      	b.n	800c018 <__kernel_rem_pio2+0x78>
 800c082:	9b04      	ldr	r3, [sp, #16]
 800c084:	aa0c      	add	r2, sp, #48	; 0x30
 800c086:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c08a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c08c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c08e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c092:	9c04      	ldr	r4, [sp, #16]
 800c094:	930a      	str	r3, [sp, #40]	; 0x28
 800c096:	ab98      	add	r3, sp, #608	; 0x260
 800c098:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c09c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c0a0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800c0a4:	f8cd b008 	str.w	fp, [sp, #8]
 800c0a8:	4625      	mov	r5, r4
 800c0aa:	2d00      	cmp	r5, #0
 800c0ac:	dc78      	bgt.n	800c1a0 <__kernel_rem_pio2+0x200>
 800c0ae:	ec47 6b10 	vmov	d0, r6, r7
 800c0b2:	4650      	mov	r0, sl
 800c0b4:	f000 fbfc 	bl	800c8b0 <scalbn>
 800c0b8:	ec57 6b10 	vmov	r6, r7, d0
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c0c2:	ee10 0a10 	vmov	r0, s0
 800c0c6:	4639      	mov	r1, r7
 800c0c8:	f7f4 faae 	bl	8000628 <__aeabi_dmul>
 800c0cc:	ec41 0b10 	vmov	d0, r0, r1
 800c0d0:	f000 fb6e 	bl	800c7b0 <floor>
 800c0d4:	4b7f      	ldr	r3, [pc, #508]	; (800c2d4 <__kernel_rem_pio2+0x334>)
 800c0d6:	ec51 0b10 	vmov	r0, r1, d0
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f7f4 faa4 	bl	8000628 <__aeabi_dmul>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	4639      	mov	r1, r7
 800c0e8:	f7f4 f8e6 	bl	80002b8 <__aeabi_dsub>
 800c0ec:	460f      	mov	r7, r1
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	f7f4 fd4a 	bl	8000b88 <__aeabi_d2iz>
 800c0f4:	9007      	str	r0, [sp, #28]
 800c0f6:	f7f4 fa2d 	bl	8000554 <__aeabi_i2d>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	4630      	mov	r0, r6
 800c100:	4639      	mov	r1, r7
 800c102:	f7f4 f8d9 	bl	80002b8 <__aeabi_dsub>
 800c106:	f1ba 0f00 	cmp.w	sl, #0
 800c10a:	4606      	mov	r6, r0
 800c10c:	460f      	mov	r7, r1
 800c10e:	dd70      	ble.n	800c1f2 <__kernel_rem_pio2+0x252>
 800c110:	1e62      	subs	r2, r4, #1
 800c112:	ab0c      	add	r3, sp, #48	; 0x30
 800c114:	9d07      	ldr	r5, [sp, #28]
 800c116:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c11a:	f1ca 0118 	rsb	r1, sl, #24
 800c11e:	fa40 f301 	asr.w	r3, r0, r1
 800c122:	441d      	add	r5, r3
 800c124:	408b      	lsls	r3, r1
 800c126:	1ac0      	subs	r0, r0, r3
 800c128:	ab0c      	add	r3, sp, #48	; 0x30
 800c12a:	9507      	str	r5, [sp, #28]
 800c12c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c130:	f1ca 0317 	rsb	r3, sl, #23
 800c134:	fa40 f303 	asr.w	r3, r0, r3
 800c138:	9302      	str	r3, [sp, #8]
 800c13a:	9b02      	ldr	r3, [sp, #8]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	dd66      	ble.n	800c20e <__kernel_rem_pio2+0x26e>
 800c140:	9b07      	ldr	r3, [sp, #28]
 800c142:	2200      	movs	r2, #0
 800c144:	3301      	adds	r3, #1
 800c146:	9307      	str	r3, [sp, #28]
 800c148:	4615      	mov	r5, r2
 800c14a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c14e:	4294      	cmp	r4, r2
 800c150:	f300 8099 	bgt.w	800c286 <__kernel_rem_pio2+0x2e6>
 800c154:	f1ba 0f00 	cmp.w	sl, #0
 800c158:	dd07      	ble.n	800c16a <__kernel_rem_pio2+0x1ca>
 800c15a:	f1ba 0f01 	cmp.w	sl, #1
 800c15e:	f000 80a5 	beq.w	800c2ac <__kernel_rem_pio2+0x30c>
 800c162:	f1ba 0f02 	cmp.w	sl, #2
 800c166:	f000 80c1 	beq.w	800c2ec <__kernel_rem_pio2+0x34c>
 800c16a:	9b02      	ldr	r3, [sp, #8]
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d14e      	bne.n	800c20e <__kernel_rem_pio2+0x26e>
 800c170:	4632      	mov	r2, r6
 800c172:	463b      	mov	r3, r7
 800c174:	4958      	ldr	r1, [pc, #352]	; (800c2d8 <__kernel_rem_pio2+0x338>)
 800c176:	2000      	movs	r0, #0
 800c178:	f7f4 f89e 	bl	80002b8 <__aeabi_dsub>
 800c17c:	4606      	mov	r6, r0
 800c17e:	460f      	mov	r7, r1
 800c180:	2d00      	cmp	r5, #0
 800c182:	d044      	beq.n	800c20e <__kernel_rem_pio2+0x26e>
 800c184:	4650      	mov	r0, sl
 800c186:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c2c8 <__kernel_rem_pio2+0x328>
 800c18a:	f000 fb91 	bl	800c8b0 <scalbn>
 800c18e:	4630      	mov	r0, r6
 800c190:	4639      	mov	r1, r7
 800c192:	ec53 2b10 	vmov	r2, r3, d0
 800c196:	f7f4 f88f 	bl	80002b8 <__aeabi_dsub>
 800c19a:	4606      	mov	r6, r0
 800c19c:	460f      	mov	r7, r1
 800c19e:	e036      	b.n	800c20e <__kernel_rem_pio2+0x26e>
 800c1a0:	4b4e      	ldr	r3, [pc, #312]	; (800c2dc <__kernel_rem_pio2+0x33c>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	f7f4 fa3e 	bl	8000628 <__aeabi_dmul>
 800c1ac:	f7f4 fcec 	bl	8000b88 <__aeabi_d2iz>
 800c1b0:	f7f4 f9d0 	bl	8000554 <__aeabi_i2d>
 800c1b4:	4b4a      	ldr	r3, [pc, #296]	; (800c2e0 <__kernel_rem_pio2+0x340>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	4680      	mov	r8, r0
 800c1ba:	4689      	mov	r9, r1
 800c1bc:	f7f4 fa34 	bl	8000628 <__aeabi_dmul>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	4639      	mov	r1, r7
 800c1c8:	f7f4 f876 	bl	80002b8 <__aeabi_dsub>
 800c1cc:	f7f4 fcdc 	bl	8000b88 <__aeabi_d2iz>
 800c1d0:	9b02      	ldr	r3, [sp, #8]
 800c1d2:	f843 0b04 	str.w	r0, [r3], #4
 800c1d6:	3d01      	subs	r5, #1
 800c1d8:	9302      	str	r3, [sp, #8]
 800c1da:	ab70      	add	r3, sp, #448	; 0x1c0
 800c1dc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e4:	4640      	mov	r0, r8
 800c1e6:	4649      	mov	r1, r9
 800c1e8:	f7f4 f868 	bl	80002bc <__adddf3>
 800c1ec:	4606      	mov	r6, r0
 800c1ee:	460f      	mov	r7, r1
 800c1f0:	e75b      	b.n	800c0aa <__kernel_rem_pio2+0x10a>
 800c1f2:	d105      	bne.n	800c200 <__kernel_rem_pio2+0x260>
 800c1f4:	1e63      	subs	r3, r4, #1
 800c1f6:	aa0c      	add	r2, sp, #48	; 0x30
 800c1f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c1fc:	15c3      	asrs	r3, r0, #23
 800c1fe:	e79b      	b.n	800c138 <__kernel_rem_pio2+0x198>
 800c200:	4b38      	ldr	r3, [pc, #224]	; (800c2e4 <__kernel_rem_pio2+0x344>)
 800c202:	2200      	movs	r2, #0
 800c204:	f7f4 fc96 	bl	8000b34 <__aeabi_dcmpge>
 800c208:	2800      	cmp	r0, #0
 800c20a:	d139      	bne.n	800c280 <__kernel_rem_pio2+0x2e0>
 800c20c:	9002      	str	r0, [sp, #8]
 800c20e:	2200      	movs	r2, #0
 800c210:	2300      	movs	r3, #0
 800c212:	4630      	mov	r0, r6
 800c214:	4639      	mov	r1, r7
 800c216:	f7f4 fc6f 	bl	8000af8 <__aeabi_dcmpeq>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	f000 80b4 	beq.w	800c388 <__kernel_rem_pio2+0x3e8>
 800c220:	f104 3bff 	add.w	fp, r4, #4294967295
 800c224:	465b      	mov	r3, fp
 800c226:	2200      	movs	r2, #0
 800c228:	9904      	ldr	r1, [sp, #16]
 800c22a:	428b      	cmp	r3, r1
 800c22c:	da65      	bge.n	800c2fa <__kernel_rem_pio2+0x35a>
 800c22e:	2a00      	cmp	r2, #0
 800c230:	d07b      	beq.n	800c32a <__kernel_rem_pio2+0x38a>
 800c232:	ab0c      	add	r3, sp, #48	; 0x30
 800c234:	f1aa 0a18 	sub.w	sl, sl, #24
 800c238:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 80a0 	beq.w	800c382 <__kernel_rem_pio2+0x3e2>
 800c242:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c2c8 <__kernel_rem_pio2+0x328>
 800c246:	4650      	mov	r0, sl
 800c248:	f000 fb32 	bl	800c8b0 <scalbn>
 800c24c:	4f23      	ldr	r7, [pc, #140]	; (800c2dc <__kernel_rem_pio2+0x33c>)
 800c24e:	ec55 4b10 	vmov	r4, r5, d0
 800c252:	46d8      	mov	r8, fp
 800c254:	2600      	movs	r6, #0
 800c256:	f1b8 0f00 	cmp.w	r8, #0
 800c25a:	f280 80cf 	bge.w	800c3fc <__kernel_rem_pio2+0x45c>
 800c25e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c2c0 <__kernel_rem_pio2+0x320>
 800c262:	465f      	mov	r7, fp
 800c264:	f04f 0800 	mov.w	r8, #0
 800c268:	2f00      	cmp	r7, #0
 800c26a:	f2c0 80fd 	blt.w	800c468 <__kernel_rem_pio2+0x4c8>
 800c26e:	ab70      	add	r3, sp, #448	; 0x1c0
 800c270:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c2e8 <__kernel_rem_pio2+0x348>
 800c274:	ec55 4b18 	vmov	r4, r5, d8
 800c278:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c27c:	2600      	movs	r6, #0
 800c27e:	e0e5      	b.n	800c44c <__kernel_rem_pio2+0x4ac>
 800c280:	2302      	movs	r3, #2
 800c282:	9302      	str	r3, [sp, #8]
 800c284:	e75c      	b.n	800c140 <__kernel_rem_pio2+0x1a0>
 800c286:	f8db 3000 	ldr.w	r3, [fp]
 800c28a:	b955      	cbnz	r5, 800c2a2 <__kernel_rem_pio2+0x302>
 800c28c:	b123      	cbz	r3, 800c298 <__kernel_rem_pio2+0x2f8>
 800c28e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c292:	f8cb 3000 	str.w	r3, [fp]
 800c296:	2301      	movs	r3, #1
 800c298:	3201      	adds	r2, #1
 800c29a:	f10b 0b04 	add.w	fp, fp, #4
 800c29e:	461d      	mov	r5, r3
 800c2a0:	e755      	b.n	800c14e <__kernel_rem_pio2+0x1ae>
 800c2a2:	1acb      	subs	r3, r1, r3
 800c2a4:	f8cb 3000 	str.w	r3, [fp]
 800c2a8:	462b      	mov	r3, r5
 800c2aa:	e7f5      	b.n	800c298 <__kernel_rem_pio2+0x2f8>
 800c2ac:	1e62      	subs	r2, r4, #1
 800c2ae:	ab0c      	add	r3, sp, #48	; 0x30
 800c2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c2b8:	a90c      	add	r1, sp, #48	; 0x30
 800c2ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c2be:	e754      	b.n	800c16a <__kernel_rem_pio2+0x1ca>
	...
 800c2cc:	3ff00000 	.word	0x3ff00000
 800c2d0:	0800d610 	.word	0x0800d610
 800c2d4:	40200000 	.word	0x40200000
 800c2d8:	3ff00000 	.word	0x3ff00000
 800c2dc:	3e700000 	.word	0x3e700000
 800c2e0:	41700000 	.word	0x41700000
 800c2e4:	3fe00000 	.word	0x3fe00000
 800c2e8:	0800d5d0 	.word	0x0800d5d0
 800c2ec:	1e62      	subs	r2, r4, #1
 800c2ee:	ab0c      	add	r3, sp, #48	; 0x30
 800c2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c2f8:	e7de      	b.n	800c2b8 <__kernel_rem_pio2+0x318>
 800c2fa:	a90c      	add	r1, sp, #48	; 0x30
 800c2fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c300:	3b01      	subs	r3, #1
 800c302:	430a      	orrs	r2, r1
 800c304:	e790      	b.n	800c228 <__kernel_rem_pio2+0x288>
 800c306:	3301      	adds	r3, #1
 800c308:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c30c:	2900      	cmp	r1, #0
 800c30e:	d0fa      	beq.n	800c306 <__kernel_rem_pio2+0x366>
 800c310:	9a08      	ldr	r2, [sp, #32]
 800c312:	18e3      	adds	r3, r4, r3
 800c314:	18a6      	adds	r6, r4, r2
 800c316:	aa20      	add	r2, sp, #128	; 0x80
 800c318:	1c65      	adds	r5, r4, #1
 800c31a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c31e:	9302      	str	r3, [sp, #8]
 800c320:	9b02      	ldr	r3, [sp, #8]
 800c322:	42ab      	cmp	r3, r5
 800c324:	da04      	bge.n	800c330 <__kernel_rem_pio2+0x390>
 800c326:	461c      	mov	r4, r3
 800c328:	e6b5      	b.n	800c096 <__kernel_rem_pio2+0xf6>
 800c32a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c32c:	2301      	movs	r3, #1
 800c32e:	e7eb      	b.n	800c308 <__kernel_rem_pio2+0x368>
 800c330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c332:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c336:	f7f4 f90d 	bl	8000554 <__aeabi_i2d>
 800c33a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c340:	46b3      	mov	fp, r6
 800c342:	461c      	mov	r4, r3
 800c344:	2700      	movs	r7, #0
 800c346:	f04f 0800 	mov.w	r8, #0
 800c34a:	f04f 0900 	mov.w	r9, #0
 800c34e:	9b06      	ldr	r3, [sp, #24]
 800c350:	429f      	cmp	r7, r3
 800c352:	dd06      	ble.n	800c362 <__kernel_rem_pio2+0x3c2>
 800c354:	ab70      	add	r3, sp, #448	; 0x1c0
 800c356:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c35a:	e9c3 8900 	strd	r8, r9, [r3]
 800c35e:	3501      	adds	r5, #1
 800c360:	e7de      	b.n	800c320 <__kernel_rem_pio2+0x380>
 800c362:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c366:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c36a:	f7f4 f95d 	bl	8000628 <__aeabi_dmul>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4640      	mov	r0, r8
 800c374:	4649      	mov	r1, r9
 800c376:	f7f3 ffa1 	bl	80002bc <__adddf3>
 800c37a:	3701      	adds	r7, #1
 800c37c:	4680      	mov	r8, r0
 800c37e:	4689      	mov	r9, r1
 800c380:	e7e5      	b.n	800c34e <__kernel_rem_pio2+0x3ae>
 800c382:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c386:	e754      	b.n	800c232 <__kernel_rem_pio2+0x292>
 800c388:	ec47 6b10 	vmov	d0, r6, r7
 800c38c:	f1ca 0000 	rsb	r0, sl, #0
 800c390:	f000 fa8e 	bl	800c8b0 <scalbn>
 800c394:	ec57 6b10 	vmov	r6, r7, d0
 800c398:	4b9f      	ldr	r3, [pc, #636]	; (800c618 <__kernel_rem_pio2+0x678>)
 800c39a:	ee10 0a10 	vmov	r0, s0
 800c39e:	2200      	movs	r2, #0
 800c3a0:	4639      	mov	r1, r7
 800c3a2:	f7f4 fbc7 	bl	8000b34 <__aeabi_dcmpge>
 800c3a6:	b300      	cbz	r0, 800c3ea <__kernel_rem_pio2+0x44a>
 800c3a8:	4b9c      	ldr	r3, [pc, #624]	; (800c61c <__kernel_rem_pio2+0x67c>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	4639      	mov	r1, r7
 800c3b0:	f7f4 f93a 	bl	8000628 <__aeabi_dmul>
 800c3b4:	f7f4 fbe8 	bl	8000b88 <__aeabi_d2iz>
 800c3b8:	4605      	mov	r5, r0
 800c3ba:	f7f4 f8cb 	bl	8000554 <__aeabi_i2d>
 800c3be:	4b96      	ldr	r3, [pc, #600]	; (800c618 <__kernel_rem_pio2+0x678>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f7f4 f931 	bl	8000628 <__aeabi_dmul>
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	f7f3 ff73 	bl	80002b8 <__aeabi_dsub>
 800c3d2:	f7f4 fbd9 	bl	8000b88 <__aeabi_d2iz>
 800c3d6:	f104 0b01 	add.w	fp, r4, #1
 800c3da:	ab0c      	add	r3, sp, #48	; 0x30
 800c3dc:	f10a 0a18 	add.w	sl, sl, #24
 800c3e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c3e4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c3e8:	e72b      	b.n	800c242 <__kernel_rem_pio2+0x2a2>
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	4639      	mov	r1, r7
 800c3ee:	f7f4 fbcb 	bl	8000b88 <__aeabi_d2iz>
 800c3f2:	ab0c      	add	r3, sp, #48	; 0x30
 800c3f4:	46a3      	mov	fp, r4
 800c3f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c3fa:	e722      	b.n	800c242 <__kernel_rem_pio2+0x2a2>
 800c3fc:	ab70      	add	r3, sp, #448	; 0x1c0
 800c3fe:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c402:	ab0c      	add	r3, sp, #48	; 0x30
 800c404:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c408:	f7f4 f8a4 	bl	8000554 <__aeabi_i2d>
 800c40c:	4622      	mov	r2, r4
 800c40e:	462b      	mov	r3, r5
 800c410:	f7f4 f90a 	bl	8000628 <__aeabi_dmul>
 800c414:	4632      	mov	r2, r6
 800c416:	e9c9 0100 	strd	r0, r1, [r9]
 800c41a:	463b      	mov	r3, r7
 800c41c:	4620      	mov	r0, r4
 800c41e:	4629      	mov	r1, r5
 800c420:	f7f4 f902 	bl	8000628 <__aeabi_dmul>
 800c424:	f108 38ff 	add.w	r8, r8, #4294967295
 800c428:	4604      	mov	r4, r0
 800c42a:	460d      	mov	r5, r1
 800c42c:	e713      	b.n	800c256 <__kernel_rem_pio2+0x2b6>
 800c42e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c432:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c436:	f7f4 f8f7 	bl	8000628 <__aeabi_dmul>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4620      	mov	r0, r4
 800c440:	4629      	mov	r1, r5
 800c442:	f7f3 ff3b 	bl	80002bc <__adddf3>
 800c446:	3601      	adds	r6, #1
 800c448:	4604      	mov	r4, r0
 800c44a:	460d      	mov	r5, r1
 800c44c:	9b04      	ldr	r3, [sp, #16]
 800c44e:	429e      	cmp	r6, r3
 800c450:	dc01      	bgt.n	800c456 <__kernel_rem_pio2+0x4b6>
 800c452:	45b0      	cmp	r8, r6
 800c454:	daeb      	bge.n	800c42e <__kernel_rem_pio2+0x48e>
 800c456:	ab48      	add	r3, sp, #288	; 0x120
 800c458:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c45c:	e9c3 4500 	strd	r4, r5, [r3]
 800c460:	3f01      	subs	r7, #1
 800c462:	f108 0801 	add.w	r8, r8, #1
 800c466:	e6ff      	b.n	800c268 <__kernel_rem_pio2+0x2c8>
 800c468:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	dc0b      	bgt.n	800c486 <__kernel_rem_pio2+0x4e6>
 800c46e:	2b00      	cmp	r3, #0
 800c470:	dc6e      	bgt.n	800c550 <__kernel_rem_pio2+0x5b0>
 800c472:	d045      	beq.n	800c500 <__kernel_rem_pio2+0x560>
 800c474:	9b07      	ldr	r3, [sp, #28]
 800c476:	f003 0007 	and.w	r0, r3, #7
 800c47a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c47e:	ecbd 8b02 	vpop	{d8}
 800c482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c486:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c488:	2b03      	cmp	r3, #3
 800c48a:	d1f3      	bne.n	800c474 <__kernel_rem_pio2+0x4d4>
 800c48c:	ab48      	add	r3, sp, #288	; 0x120
 800c48e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c492:	46d0      	mov	r8, sl
 800c494:	46d9      	mov	r9, fp
 800c496:	f1b9 0f00 	cmp.w	r9, #0
 800c49a:	f1a8 0808 	sub.w	r8, r8, #8
 800c49e:	dc64      	bgt.n	800c56a <__kernel_rem_pio2+0x5ca>
 800c4a0:	465c      	mov	r4, fp
 800c4a2:	2c01      	cmp	r4, #1
 800c4a4:	f1aa 0a08 	sub.w	sl, sl, #8
 800c4a8:	dc7e      	bgt.n	800c5a8 <__kernel_rem_pio2+0x608>
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	f1bb 0f01 	cmp.w	fp, #1
 800c4b2:	f300 8097 	bgt.w	800c5e4 <__kernel_rem_pio2+0x644>
 800c4b6:	9b02      	ldr	r3, [sp, #8]
 800c4b8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c4bc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f040 8099 	bne.w	800c5f8 <__kernel_rem_pio2+0x658>
 800c4c6:	9b01      	ldr	r3, [sp, #4]
 800c4c8:	e9c3 5600 	strd	r5, r6, [r3]
 800c4cc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c4d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c4d4:	e7ce      	b.n	800c474 <__kernel_rem_pio2+0x4d4>
 800c4d6:	ab48      	add	r3, sp, #288	; 0x120
 800c4d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	f7f3 feec 	bl	80002bc <__adddf3>
 800c4e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4e8:	f1bb 0f00 	cmp.w	fp, #0
 800c4ec:	daf3      	bge.n	800c4d6 <__kernel_rem_pio2+0x536>
 800c4ee:	9b02      	ldr	r3, [sp, #8]
 800c4f0:	b113      	cbz	r3, 800c4f8 <__kernel_rem_pio2+0x558>
 800c4f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	9b01      	ldr	r3, [sp, #4]
 800c4fa:	e9c3 0100 	strd	r0, r1, [r3]
 800c4fe:	e7b9      	b.n	800c474 <__kernel_rem_pio2+0x4d4>
 800c500:	2000      	movs	r0, #0
 800c502:	2100      	movs	r1, #0
 800c504:	e7f0      	b.n	800c4e8 <__kernel_rem_pio2+0x548>
 800c506:	ab48      	add	r3, sp, #288	; 0x120
 800c508:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c510:	f7f3 fed4 	bl	80002bc <__adddf3>
 800c514:	3c01      	subs	r4, #1
 800c516:	2c00      	cmp	r4, #0
 800c518:	daf5      	bge.n	800c506 <__kernel_rem_pio2+0x566>
 800c51a:	9b02      	ldr	r3, [sp, #8]
 800c51c:	b1e3      	cbz	r3, 800c558 <__kernel_rem_pio2+0x5b8>
 800c51e:	4602      	mov	r2, r0
 800c520:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c524:	9c01      	ldr	r4, [sp, #4]
 800c526:	e9c4 2300 	strd	r2, r3, [r4]
 800c52a:	4602      	mov	r2, r0
 800c52c:	460b      	mov	r3, r1
 800c52e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c532:	f7f3 fec1 	bl	80002b8 <__aeabi_dsub>
 800c536:	ad4a      	add	r5, sp, #296	; 0x128
 800c538:	2401      	movs	r4, #1
 800c53a:	45a3      	cmp	fp, r4
 800c53c:	da0f      	bge.n	800c55e <__kernel_rem_pio2+0x5be>
 800c53e:	9b02      	ldr	r3, [sp, #8]
 800c540:	b113      	cbz	r3, 800c548 <__kernel_rem_pio2+0x5a8>
 800c542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c546:	4619      	mov	r1, r3
 800c548:	9b01      	ldr	r3, [sp, #4]
 800c54a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c54e:	e791      	b.n	800c474 <__kernel_rem_pio2+0x4d4>
 800c550:	465c      	mov	r4, fp
 800c552:	2000      	movs	r0, #0
 800c554:	2100      	movs	r1, #0
 800c556:	e7de      	b.n	800c516 <__kernel_rem_pio2+0x576>
 800c558:	4602      	mov	r2, r0
 800c55a:	460b      	mov	r3, r1
 800c55c:	e7e2      	b.n	800c524 <__kernel_rem_pio2+0x584>
 800c55e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c562:	f7f3 feab 	bl	80002bc <__adddf3>
 800c566:	3401      	adds	r4, #1
 800c568:	e7e7      	b.n	800c53a <__kernel_rem_pio2+0x59a>
 800c56a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c56e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c572:	4620      	mov	r0, r4
 800c574:	4632      	mov	r2, r6
 800c576:	463b      	mov	r3, r7
 800c578:	4629      	mov	r1, r5
 800c57a:	f7f3 fe9f 	bl	80002bc <__adddf3>
 800c57e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4620      	mov	r0, r4
 800c588:	4629      	mov	r1, r5
 800c58a:	f7f3 fe95 	bl	80002b8 <__aeabi_dsub>
 800c58e:	4632      	mov	r2, r6
 800c590:	463b      	mov	r3, r7
 800c592:	f7f3 fe93 	bl	80002bc <__adddf3>
 800c596:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c59a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c59e:	ed88 7b00 	vstr	d7, [r8]
 800c5a2:	f109 39ff 	add.w	r9, r9, #4294967295
 800c5a6:	e776      	b.n	800c496 <__kernel_rem_pio2+0x4f6>
 800c5a8:	e9da 8900 	ldrd	r8, r9, [sl]
 800c5ac:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	4632      	mov	r2, r6
 800c5b4:	463b      	mov	r3, r7
 800c5b6:	4649      	mov	r1, r9
 800c5b8:	f7f3 fe80 	bl	80002bc <__adddf3>
 800c5bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	4640      	mov	r0, r8
 800c5c6:	4649      	mov	r1, r9
 800c5c8:	f7f3 fe76 	bl	80002b8 <__aeabi_dsub>
 800c5cc:	4632      	mov	r2, r6
 800c5ce:	463b      	mov	r3, r7
 800c5d0:	f7f3 fe74 	bl	80002bc <__adddf3>
 800c5d4:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c5d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c5dc:	ed8a 7b00 	vstr	d7, [sl]
 800c5e0:	3c01      	subs	r4, #1
 800c5e2:	e75e      	b.n	800c4a2 <__kernel_rem_pio2+0x502>
 800c5e4:	ab48      	add	r3, sp, #288	; 0x120
 800c5e6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ee:	f7f3 fe65 	bl	80002bc <__adddf3>
 800c5f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c5f6:	e75a      	b.n	800c4ae <__kernel_rem_pio2+0x50e>
 800c5f8:	9b01      	ldr	r3, [sp, #4]
 800c5fa:	9a01      	ldr	r2, [sp, #4]
 800c5fc:	601d      	str	r5, [r3, #0]
 800c5fe:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c602:	605c      	str	r4, [r3, #4]
 800c604:	609f      	str	r7, [r3, #8]
 800c606:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c60a:	60d3      	str	r3, [r2, #12]
 800c60c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c610:	6110      	str	r0, [r2, #16]
 800c612:	6153      	str	r3, [r2, #20]
 800c614:	e72e      	b.n	800c474 <__kernel_rem_pio2+0x4d4>
 800c616:	bf00      	nop
 800c618:	41700000 	.word	0x41700000
 800c61c:	3e700000 	.word	0x3e700000

0800c620 <__kernel_sin>:
 800c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c624:	ed2d 8b04 	vpush	{d8-d9}
 800c628:	eeb0 8a41 	vmov.f32	s16, s2
 800c62c:	eef0 8a61 	vmov.f32	s17, s3
 800c630:	ec55 4b10 	vmov	r4, r5, d0
 800c634:	b083      	sub	sp, #12
 800c636:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c63a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c63e:	9001      	str	r0, [sp, #4]
 800c640:	da06      	bge.n	800c650 <__kernel_sin+0x30>
 800c642:	ee10 0a10 	vmov	r0, s0
 800c646:	4629      	mov	r1, r5
 800c648:	f7f4 fa9e 	bl	8000b88 <__aeabi_d2iz>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d051      	beq.n	800c6f4 <__kernel_sin+0xd4>
 800c650:	4622      	mov	r2, r4
 800c652:	462b      	mov	r3, r5
 800c654:	4620      	mov	r0, r4
 800c656:	4629      	mov	r1, r5
 800c658:	f7f3 ffe6 	bl	8000628 <__aeabi_dmul>
 800c65c:	4682      	mov	sl, r0
 800c65e:	468b      	mov	fp, r1
 800c660:	4602      	mov	r2, r0
 800c662:	460b      	mov	r3, r1
 800c664:	4620      	mov	r0, r4
 800c666:	4629      	mov	r1, r5
 800c668:	f7f3 ffde 	bl	8000628 <__aeabi_dmul>
 800c66c:	a341      	add	r3, pc, #260	; (adr r3, 800c774 <__kernel_sin+0x154>)
 800c66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c672:	4680      	mov	r8, r0
 800c674:	4689      	mov	r9, r1
 800c676:	4650      	mov	r0, sl
 800c678:	4659      	mov	r1, fp
 800c67a:	f7f3 ffd5 	bl	8000628 <__aeabi_dmul>
 800c67e:	a33f      	add	r3, pc, #252	; (adr r3, 800c77c <__kernel_sin+0x15c>)
 800c680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c684:	f7f3 fe18 	bl	80002b8 <__aeabi_dsub>
 800c688:	4652      	mov	r2, sl
 800c68a:	465b      	mov	r3, fp
 800c68c:	f7f3 ffcc 	bl	8000628 <__aeabi_dmul>
 800c690:	a33c      	add	r3, pc, #240	; (adr r3, 800c784 <__kernel_sin+0x164>)
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	f7f3 fe11 	bl	80002bc <__adddf3>
 800c69a:	4652      	mov	r2, sl
 800c69c:	465b      	mov	r3, fp
 800c69e:	f7f3 ffc3 	bl	8000628 <__aeabi_dmul>
 800c6a2:	a33a      	add	r3, pc, #232	; (adr r3, 800c78c <__kernel_sin+0x16c>)
 800c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a8:	f7f3 fe06 	bl	80002b8 <__aeabi_dsub>
 800c6ac:	4652      	mov	r2, sl
 800c6ae:	465b      	mov	r3, fp
 800c6b0:	f7f3 ffba 	bl	8000628 <__aeabi_dmul>
 800c6b4:	a337      	add	r3, pc, #220	; (adr r3, 800c794 <__kernel_sin+0x174>)
 800c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ba:	f7f3 fdff 	bl	80002bc <__adddf3>
 800c6be:	9b01      	ldr	r3, [sp, #4]
 800c6c0:	4606      	mov	r6, r0
 800c6c2:	460f      	mov	r7, r1
 800c6c4:	b9eb      	cbnz	r3, 800c702 <__kernel_sin+0xe2>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	4650      	mov	r0, sl
 800c6cc:	4659      	mov	r1, fp
 800c6ce:	f7f3 ffab 	bl	8000628 <__aeabi_dmul>
 800c6d2:	a325      	add	r3, pc, #148	; (adr r3, 800c768 <__kernel_sin+0x148>)
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	f7f3 fdee 	bl	80002b8 <__aeabi_dsub>
 800c6dc:	4642      	mov	r2, r8
 800c6de:	464b      	mov	r3, r9
 800c6e0:	f7f3 ffa2 	bl	8000628 <__aeabi_dmul>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	f7f3 fde6 	bl	80002bc <__adddf3>
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	460d      	mov	r5, r1
 800c6f4:	ec45 4b10 	vmov	d0, r4, r5
 800c6f8:	b003      	add	sp, #12
 800c6fa:	ecbd 8b04 	vpop	{d8-d9}
 800c6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c702:	4b1b      	ldr	r3, [pc, #108]	; (800c770 <__kernel_sin+0x150>)
 800c704:	ec51 0b18 	vmov	r0, r1, d8
 800c708:	2200      	movs	r2, #0
 800c70a:	f7f3 ff8d 	bl	8000628 <__aeabi_dmul>
 800c70e:	4632      	mov	r2, r6
 800c710:	ec41 0b19 	vmov	d9, r0, r1
 800c714:	463b      	mov	r3, r7
 800c716:	4640      	mov	r0, r8
 800c718:	4649      	mov	r1, r9
 800c71a:	f7f3 ff85 	bl	8000628 <__aeabi_dmul>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	ec51 0b19 	vmov	r0, r1, d9
 800c726:	f7f3 fdc7 	bl	80002b8 <__aeabi_dsub>
 800c72a:	4652      	mov	r2, sl
 800c72c:	465b      	mov	r3, fp
 800c72e:	f7f3 ff7b 	bl	8000628 <__aeabi_dmul>
 800c732:	ec53 2b18 	vmov	r2, r3, d8
 800c736:	f7f3 fdbf 	bl	80002b8 <__aeabi_dsub>
 800c73a:	a30b      	add	r3, pc, #44	; (adr r3, 800c768 <__kernel_sin+0x148>)
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	4606      	mov	r6, r0
 800c742:	460f      	mov	r7, r1
 800c744:	4640      	mov	r0, r8
 800c746:	4649      	mov	r1, r9
 800c748:	f7f3 ff6e 	bl	8000628 <__aeabi_dmul>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	4630      	mov	r0, r6
 800c752:	4639      	mov	r1, r7
 800c754:	f7f3 fdb2 	bl	80002bc <__adddf3>
 800c758:	4602      	mov	r2, r0
 800c75a:	460b      	mov	r3, r1
 800c75c:	4620      	mov	r0, r4
 800c75e:	4629      	mov	r1, r5
 800c760:	f7f3 fdaa 	bl	80002b8 <__aeabi_dsub>
 800c764:	e7c4      	b.n	800c6f0 <__kernel_sin+0xd0>
 800c766:	bf00      	nop
 800c768:	55555549 	.word	0x55555549
 800c76c:	3fc55555 	.word	0x3fc55555
 800c770:	3fe00000 	.word	0x3fe00000
 800c774:	5acfd57c 	.word	0x5acfd57c
 800c778:	3de5d93a 	.word	0x3de5d93a
 800c77c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c780:	3e5ae5e6 	.word	0x3e5ae5e6
 800c784:	57b1fe7d 	.word	0x57b1fe7d
 800c788:	3ec71de3 	.word	0x3ec71de3
 800c78c:	19c161d5 	.word	0x19c161d5
 800c790:	3f2a01a0 	.word	0x3f2a01a0
 800c794:	1110f8a6 	.word	0x1110f8a6
 800c798:	3f811111 	.word	0x3f811111

0800c79c <fabs>:
 800c79c:	ec51 0b10 	vmov	r0, r1, d0
 800c7a0:	ee10 2a10 	vmov	r2, s0
 800c7a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7a8:	ec43 2b10 	vmov	d0, r2, r3
 800c7ac:	4770      	bx	lr
	...

0800c7b0 <floor>:
 800c7b0:	ec51 0b10 	vmov	r0, r1, d0
 800c7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c7bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c7c0:	2e13      	cmp	r6, #19
 800c7c2:	ee10 5a10 	vmov	r5, s0
 800c7c6:	ee10 8a10 	vmov	r8, s0
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	dc32      	bgt.n	800c834 <floor+0x84>
 800c7ce:	2e00      	cmp	r6, #0
 800c7d0:	da14      	bge.n	800c7fc <floor+0x4c>
 800c7d2:	a333      	add	r3, pc, #204	; (adr r3, 800c8a0 <floor+0xf0>)
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	f7f3 fd70 	bl	80002bc <__adddf3>
 800c7dc:	2200      	movs	r2, #0
 800c7de:	2300      	movs	r3, #0
 800c7e0:	f7f4 f9b2 	bl	8000b48 <__aeabi_dcmpgt>
 800c7e4:	b138      	cbz	r0, 800c7f6 <floor+0x46>
 800c7e6:	2c00      	cmp	r4, #0
 800c7e8:	da57      	bge.n	800c89a <floor+0xea>
 800c7ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c7ee:	431d      	orrs	r5, r3
 800c7f0:	d001      	beq.n	800c7f6 <floor+0x46>
 800c7f2:	4c2d      	ldr	r4, [pc, #180]	; (800c8a8 <floor+0xf8>)
 800c7f4:	2500      	movs	r5, #0
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	e025      	b.n	800c848 <floor+0x98>
 800c7fc:	4f2b      	ldr	r7, [pc, #172]	; (800c8ac <floor+0xfc>)
 800c7fe:	4137      	asrs	r7, r6
 800c800:	ea01 0307 	and.w	r3, r1, r7
 800c804:	4303      	orrs	r3, r0
 800c806:	d01f      	beq.n	800c848 <floor+0x98>
 800c808:	a325      	add	r3, pc, #148	; (adr r3, 800c8a0 <floor+0xf0>)
 800c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80e:	f7f3 fd55 	bl	80002bc <__adddf3>
 800c812:	2200      	movs	r2, #0
 800c814:	2300      	movs	r3, #0
 800c816:	f7f4 f997 	bl	8000b48 <__aeabi_dcmpgt>
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d0eb      	beq.n	800c7f6 <floor+0x46>
 800c81e:	2c00      	cmp	r4, #0
 800c820:	bfbe      	ittt	lt
 800c822:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c826:	fa43 f606 	asrlt.w	r6, r3, r6
 800c82a:	19a4      	addlt	r4, r4, r6
 800c82c:	ea24 0407 	bic.w	r4, r4, r7
 800c830:	2500      	movs	r5, #0
 800c832:	e7e0      	b.n	800c7f6 <floor+0x46>
 800c834:	2e33      	cmp	r6, #51	; 0x33
 800c836:	dd0b      	ble.n	800c850 <floor+0xa0>
 800c838:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c83c:	d104      	bne.n	800c848 <floor+0x98>
 800c83e:	ee10 2a10 	vmov	r2, s0
 800c842:	460b      	mov	r3, r1
 800c844:	f7f3 fd3a 	bl	80002bc <__adddf3>
 800c848:	ec41 0b10 	vmov	d0, r0, r1
 800c84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c850:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c854:	f04f 33ff 	mov.w	r3, #4294967295
 800c858:	fa23 f707 	lsr.w	r7, r3, r7
 800c85c:	4207      	tst	r7, r0
 800c85e:	d0f3      	beq.n	800c848 <floor+0x98>
 800c860:	a30f      	add	r3, pc, #60	; (adr r3, 800c8a0 <floor+0xf0>)
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	f7f3 fd29 	bl	80002bc <__adddf3>
 800c86a:	2200      	movs	r2, #0
 800c86c:	2300      	movs	r3, #0
 800c86e:	f7f4 f96b 	bl	8000b48 <__aeabi_dcmpgt>
 800c872:	2800      	cmp	r0, #0
 800c874:	d0bf      	beq.n	800c7f6 <floor+0x46>
 800c876:	2c00      	cmp	r4, #0
 800c878:	da02      	bge.n	800c880 <floor+0xd0>
 800c87a:	2e14      	cmp	r6, #20
 800c87c:	d103      	bne.n	800c886 <floor+0xd6>
 800c87e:	3401      	adds	r4, #1
 800c880:	ea25 0507 	bic.w	r5, r5, r7
 800c884:	e7b7      	b.n	800c7f6 <floor+0x46>
 800c886:	2301      	movs	r3, #1
 800c888:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c88c:	fa03 f606 	lsl.w	r6, r3, r6
 800c890:	4435      	add	r5, r6
 800c892:	4545      	cmp	r5, r8
 800c894:	bf38      	it	cc
 800c896:	18e4      	addcc	r4, r4, r3
 800c898:	e7f2      	b.n	800c880 <floor+0xd0>
 800c89a:	2500      	movs	r5, #0
 800c89c:	462c      	mov	r4, r5
 800c89e:	e7aa      	b.n	800c7f6 <floor+0x46>
 800c8a0:	8800759c 	.word	0x8800759c
 800c8a4:	7e37e43c 	.word	0x7e37e43c
 800c8a8:	bff00000 	.word	0xbff00000
 800c8ac:	000fffff 	.word	0x000fffff

0800c8b0 <scalbn>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	ec55 4b10 	vmov	r4, r5, d0
 800c8b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	462b      	mov	r3, r5
 800c8be:	b99a      	cbnz	r2, 800c8e8 <scalbn+0x38>
 800c8c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8c4:	4323      	orrs	r3, r4
 800c8c6:	d036      	beq.n	800c936 <scalbn+0x86>
 800c8c8:	4b39      	ldr	r3, [pc, #228]	; (800c9b0 <scalbn+0x100>)
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	ee10 0a10 	vmov	r0, s0
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f7f3 fea9 	bl	8000628 <__aeabi_dmul>
 800c8d6:	4b37      	ldr	r3, [pc, #220]	; (800c9b4 <scalbn+0x104>)
 800c8d8:	429e      	cmp	r6, r3
 800c8da:	4604      	mov	r4, r0
 800c8dc:	460d      	mov	r5, r1
 800c8de:	da10      	bge.n	800c902 <scalbn+0x52>
 800c8e0:	a32b      	add	r3, pc, #172	; (adr r3, 800c990 <scalbn+0xe0>)
 800c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e6:	e03a      	b.n	800c95e <scalbn+0xae>
 800c8e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c8ec:	428a      	cmp	r2, r1
 800c8ee:	d10c      	bne.n	800c90a <scalbn+0x5a>
 800c8f0:	ee10 2a10 	vmov	r2, s0
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	4629      	mov	r1, r5
 800c8f8:	f7f3 fce0 	bl	80002bc <__adddf3>
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	460d      	mov	r5, r1
 800c900:	e019      	b.n	800c936 <scalbn+0x86>
 800c902:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c906:	460b      	mov	r3, r1
 800c908:	3a36      	subs	r2, #54	; 0x36
 800c90a:	4432      	add	r2, r6
 800c90c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c910:	428a      	cmp	r2, r1
 800c912:	dd08      	ble.n	800c926 <scalbn+0x76>
 800c914:	2d00      	cmp	r5, #0
 800c916:	a120      	add	r1, pc, #128	; (adr r1, 800c998 <scalbn+0xe8>)
 800c918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c91c:	da1c      	bge.n	800c958 <scalbn+0xa8>
 800c91e:	a120      	add	r1, pc, #128	; (adr r1, 800c9a0 <scalbn+0xf0>)
 800c920:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c924:	e018      	b.n	800c958 <scalbn+0xa8>
 800c926:	2a00      	cmp	r2, #0
 800c928:	dd08      	ble.n	800c93c <scalbn+0x8c>
 800c92a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c92e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c932:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c936:	ec45 4b10 	vmov	d0, r4, r5
 800c93a:	bd70      	pop	{r4, r5, r6, pc}
 800c93c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c940:	da19      	bge.n	800c976 <scalbn+0xc6>
 800c942:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c946:	429e      	cmp	r6, r3
 800c948:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c94c:	dd0a      	ble.n	800c964 <scalbn+0xb4>
 800c94e:	a112      	add	r1, pc, #72	; (adr r1, 800c998 <scalbn+0xe8>)
 800c950:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d1e2      	bne.n	800c91e <scalbn+0x6e>
 800c958:	a30f      	add	r3, pc, #60	; (adr r3, 800c998 <scalbn+0xe8>)
 800c95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95e:	f7f3 fe63 	bl	8000628 <__aeabi_dmul>
 800c962:	e7cb      	b.n	800c8fc <scalbn+0x4c>
 800c964:	a10a      	add	r1, pc, #40	; (adr r1, 800c990 <scalbn+0xe0>)
 800c966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d0b8      	beq.n	800c8e0 <scalbn+0x30>
 800c96e:	a10e      	add	r1, pc, #56	; (adr r1, 800c9a8 <scalbn+0xf8>)
 800c970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c974:	e7b4      	b.n	800c8e0 <scalbn+0x30>
 800c976:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c97a:	3236      	adds	r2, #54	; 0x36
 800c97c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c980:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c984:	4620      	mov	r0, r4
 800c986:	4b0c      	ldr	r3, [pc, #48]	; (800c9b8 <scalbn+0x108>)
 800c988:	2200      	movs	r2, #0
 800c98a:	e7e8      	b.n	800c95e <scalbn+0xae>
 800c98c:	f3af 8000 	nop.w
 800c990:	c2f8f359 	.word	0xc2f8f359
 800c994:	01a56e1f 	.word	0x01a56e1f
 800c998:	8800759c 	.word	0x8800759c
 800c99c:	7e37e43c 	.word	0x7e37e43c
 800c9a0:	8800759c 	.word	0x8800759c
 800c9a4:	fe37e43c 	.word	0xfe37e43c
 800c9a8:	c2f8f359 	.word	0xc2f8f359
 800c9ac:	81a56e1f 	.word	0x81a56e1f
 800c9b0:	43500000 	.word	0x43500000
 800c9b4:	ffff3cb0 	.word	0xffff3cb0
 800c9b8:	3c900000 	.word	0x3c900000

0800c9bc <_init>:
 800c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9be:	bf00      	nop
 800c9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c2:	bc08      	pop	{r3}
 800c9c4:	469e      	mov	lr, r3
 800c9c6:	4770      	bx	lr

0800c9c8 <_fini>:
 800c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ca:	bf00      	nop
 800c9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ce:	bc08      	pop	{r3}
 800c9d0:	469e      	mov	lr, r3
 800c9d2:	4770      	bx	lr
